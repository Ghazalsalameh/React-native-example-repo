"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """
  The variable name to export this field as.
  """
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """
  Specify the store key.
  """
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type AccountAddressCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

type AccountAddressDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

type AccountAddressUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

type AccountAvatarDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  user: User
  accountErrors: [AccountError!]!
}

type AccountAvatarUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  user: User
  accountErrors: [AccountError!]!
}

type AccountError {
  field: String
  message: String
  code: AccountErrorCode!
}

enum AccountErrorCode {
  ACTIVATE_OWN_ACCOUNT
  ACTIVATE_SUPERUSER_ACCOUNT
  DUPLICATED_INPUT_ITEM
  DEACTIVATE_OWN_ACCOUNT
  DEACTIVATE_SUPERUSER_ACCOUNT
  DELETE_NON_STAFF_USER
  DELETE_OWN_ACCOUNT
  DELETE_STAFF_ACCOUNT
  DELETE_SUPERUSER_ACCOUNT
  DELETE_SUPERVENDOR_ACCOUNT
  DELETE_CONSUMER_ACCOUNT
  GRAPHQL_ERROR
  INVALID
  INVALID_PASSWORD
  LEFT_NOT_MANAGEABLE_PERMISSION
  INVALID_CREDENTIALS
  NOT_FOUND
  OUT_OF_SCOPE_SERVICE_ACCOUNT
  OUT_OF_SCOPE_USER
  OUT_OF_SCOPE_GROUP
  OUT_OF_SCOPE_PERMISSION
  PASSWORD_ENTIRELY_NUMERIC
  PASSWORD_TOO_COMMON
  PASSWORD_TOO_SHORT
  PASSWORD_TOO_SIMILAR
  INTEGRATION_TOKEN_ERROR
  REQUIRED
  UNIQUE
}

input AccountInput {
  firstName: String
  lastName: String
  defaultBillingAddress: AddressInput
  defaultShippingAddress: AddressInput
}

input AccountRegisterInput {
  firstName: String
  email: String
  lastName: String
  nationalId: String!
  mobile: String!
  password: String!
}

type AccountReSendEmailOTPCode {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  sessionToken: String
}

type AccountReSendOTPCode {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  sessionToken: String
}

type AccountSetDefaultAddress {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  user: User
  accountErrors: [AccountError!]!
}

type Action {
  actionFields: [ActionField]
  errors: [DecisionMakerGraphqlError]
}

type ActionDefinitionField {
  allowedValues: [String]
  code: String
  display: String
  id: ID
  type: ActionFieldType
}

type ActionField {
  code: String
  type: ActionFieldType!
  valueBoolean: Boolean
  valueDate: Date
  valueList: [String]
  valueNumber: Float
  valueString: String
}

input ActionFieldInput {
  code: String
  type: ActionFieldType!
  valueBoolean: Boolean
  valueDate: Date
  valueList: [String]
  valueNumber: Float
  valueString: String
}

enum ActionFieldType {
  BOOLEAN
  DATE
  LIST
  NUMBER
  STRING
}

enum ActivityType {
  TradeDrug
}

input AddDiagnosisToVisitInput {
  code: String!
  visitDiagnosisType: VisitDiagnosisType!
  visitId: ID!
}

type Address implements Node {
  id: ID!
  streetAddress1: String
  streetAddress2: String
  city: City!
  area: String
  district: String
  region: String
  postalCode: String!
  phone: String
  buildingName: String
  buildingNumber: String
  unitNumber: String
  isDefaultShippingAddress: Boolean
  isDefaultBillingAddress: Boolean
  coordinates: LocationType
  translations: [AddressTranslation]
  name: String
}

type AddressCountableConnection {
  pageInfo: PageInfo!
  edges: [AddressCountableEdge!]!
  totalCount: Int
}

type AddressCountableEdge {
  node: Address!
  cursor: String!
}

input AddressInput {
  name: String
  streetAddress1: String
  streetAddress2: String
  area: String
  district: String
  region: String
  buildingName: String
  postalCode: String
  phone: String
  buildingNumber: String
  unitNumber: String
  coordinates: LocationInput
  translations: [AddressTranslationInput]
  city: ID
}

type AddressTranslation implements Node {
  name: String
  streetAddress1: String!
  streetAddress2: String!
  area: String!
  district: String!
  region: String!
  buildingName: String!
  id: ID!
  language: LanguageDisplay!
}

input AddressTranslationInput {
  name: String
  streetAddress1: String
  streetAddress2: String
  area: String
  district: String
  region: String
  buildingName: String
  languageCode: LanguageCodeEnum!
}

enum AddressTypeEnum {
  BILLING
  SHIPPING
}

type AddVendorToFavorite {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  customerFavoriteVendor: CustomerFavoriteVendor
  vendorErrors: [VendorError!]!
}

input AdminUserCreateInput {
  firstName: String
  lastName: String
  gender: PersonGenderEnum
  dateOfBirth: Date
  isActive: Boolean
  note: String
  mobile: String
  nationalId: String
  photo: String
  password: String!
  branches: [ID]
  healthLicenseNumber: String
  healthLicenseStartDate: Date
  healthLicenseEndDate: Date
  email: String!
  address: AddressInput
  appType: AppTypes!
  appRole: AppRoleTypes!
  vendorUserType: VendorUserTypes
  vendor: ID
  payer: ID
  doctorInfo: DoctorInput
  addGroups: [ID!]
}

type Aggregation {
  key: String!
  value: Int!
}

type AnonymousChatGroup implements H_Node {
  anonymousChatLink: String
  chatId: H_Long
  createdBy: String
  createdDate: Instant
  error: String
  failedToCreate: Boolean
  id: ID!
  lastModifiedBy: String
  lastModifiedDate: Instant
  participants: [AnonymousChatGroupParticipant]
  suspended: Boolean
  title: String
  token: String
  visit: Visit
}

type AnonymousChatGroupCountableConnection {
  edges: [AnonymousChatGroupCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type AnonymousChatGroupCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AnonymousChatGroup!
}

type AnonymousChatGroupParticipant implements H_Node {
  createdBy: String
  createdDate: Instant
  id: ID!
  lastModifiedBy: String
  lastModifiedDate: Instant
  meetingPlatformId: H_Long
  name: String
  selectedAsOwnerUser: Boolean
  user: User
}

type Appointment implements H_Node {
  cancellationReason: String
  confirmedEndTime: Instant
  confirmedStartTime: Instant
  consumer: Patient
  consumerUser: User
  created: Instant
  createdByUser: User
  doctor: Doctor
  doctorUser: User
  healthProgram: HealthProgram
  healthProgramMember: HealthProgramMember

  """
  The ID of the object.
  """
  id: ID!
  lastModifiedByUser: User
  modified: Instant
  paymentInfo: AppointmentPaymentRequest
  providerGuidedCareHealthProgramTeam: ProviderGuidedCareHealthProgramTeam
  rejectionReason: String
  requestedBy: RequestedBy
  requestedEndTime: Instant
  requestedStartTime: Instant
  specialty: T_Specialization
  specialtyId: Int
  status: AppointmentStatus
  subscription: HealthProgramUserSubscription
  suggestedTimeSlots: [String]
  type: AppointmentType
  vendor: Vendor
  visit: Visit
}

"""
Appointment Approval Action
"""
type AppointmentApprovalAction {
  appointment: Appointment
  appointmentErrors: [H_EntityError!]!

  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
}

type AppointmentCountableConnection {
  edges: [AppointmentCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type AppointmentCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Appointment!
}

input AppointmentFilterInput {
  doctors: [ID]
  patients: [ID]
  providerGuidedCareHealthProgramTeams: [ID]
  requestedBy: RequestedBy
  requestedEndTime: H_DateTimeRangeInput
  requestedStartTime: H_DateTimeRangeInput
  selfProviderGuidedCareHealthProgramTeamsOnly: Boolean
  status: [AppointmentStatus]
  type: [AppointmentType]
  upcoming: Boolean
}

type AppointmentPaymentRequest implements H_Node {
  amount: H_Money
  appointment: Appointment
  currency: String
  id: ID!
  totalAmount: H_Float
  type: AppointmentPaymentType
}

input AppointmentPaymentRequestInput {
  totalAmount: H_FloatNotNegative
  type: AppointmentPaymentType!
}

enum AppointmentPaymentType {
  CASH_ONLY
  INSURANCE_COVERAGE
  PRE_PAID
}

enum AppointmentSortingField {
  """
  Sort appointment by confirmed start time.
  """
  CONFIRMED_START_DATE

  """
  Sort appointments by creation date.
  """
  CREATED

  """
  Sort appointment by requested start time.
  """
  REQUESTED_START_DATE
}

input AppointmentSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: H_OrderDirection!

  """
  Sort appointments by the selected field.
  """
  field: AppointmentSortingField
}

enum AppointmentStatus {
  APPROVED
  CALL_IN_PROGRESS
  CANCELLED
  CHAT_IN_PROGRESS
  COMING_SOON
  CONFIRMED
  FINISHED_SUCCESSFULLY
  PENDING_APPROVAL
  REJECTED
  REQUEST
  RESCHEDULED
  TENTATIVE
}

"""
Appointment status update
"""
type AppointmentStatusUpdate {
  appointment: Appointment
  appointmentErrors: [H_EntityError!]!

  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
}

input AppointmentStatusUpdateInput {
  """
  appointment cancellation reason
  """
  cancellationReason: String

  """
  Appointment Link
  """
  meetingPlatformLink: String
  status: AppointmentStatus!
}

input AppointmentTimeSlotInput {
  endTime: Instant!
  startTime: Instant!
}

enum AppointmentType {
  AT_HOME
  DIAGNOSTIC
  ONLINE
  ONSITE
}

enum AppointmentTypeEnum {
  ONLINE
  ONSITE
  AT_HOME
}

enum AppRoleTypes {
  ADMIN
  USER
}

type ApproveVendor {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  vendorErrors: [VendorError!]!
  vendor: Vendor
}

enum AppTypes {
  ADMIN
  VENDOR
  CUSTOMER
  AGGREGATOR
  PAYER
}

type AssignUserToBranch {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  branchErrors: [BranchError!]!
  branchUser: BranchUser
}

type Attachment implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  file: String
  alt: String!
  contentType: String!
  messages(
    before: String
    after: String
    first: Int
    last: Int
  ): MessageCountableConnection!
  sortOrder: Int
}

input AttachmentInput {
  alt: String
  file: String!
  contentType: String!
}

type Attribute implements Node & ObjectWithBasicTranslatableFields {
  id: ID!
  productTypes(
    before: String
    after: String
    first: Int
    last: Int
  ): ProductTypeCountableConnection!
  productVariantTypes(
    before: String
    after: String
    first: Int
    last: Int
  ): ProductTypeCountableConnection!
  name: String
  inputType: AttributeInputTypeEnum
  slug: String
  values: [AttributeValue]
  valueRequired: Boolean!
  visibleInStorefront: Boolean!
  filterableInStorefront: Boolean!
  filterableInDashboard: Boolean!
  availableInGrid: Boolean!
  translation(languageCode: LanguageCodeEnum!): AttributeTranslation
  storefrontSearchPosition: Int!
}

type AttributeAssign {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productType: ProductType
  productErrors: [ProductAttributeError!]!
}

input AttributeAssignInput {
  id: ID!
  type: AttributeTypeEnum!
}

type AttributeBulkDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  count: Int!
  productErrors: [ProductError!]!
}

type AttributeCountableConnection {
  pageInfo: PageInfo!
  edges: [AttributeCountableEdge!]!
  totalCount: Int
}

type AttributeCountableEdge {
  node: Attribute!
  cursor: String!
}

type AttributeCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  attribute: Attribute
  productErrors: [ProductError!]!
}

input AttributeCreateInput {
  inputType: AttributeInputTypeEnum
  name: String!
  slug: String
  values: [AttributeValueCreateInput]
  valueRequired: Boolean
  isVariantOnly: Boolean
  visibleInStorefront: Boolean
  filterableInStorefront: Boolean
  filterableInDashboard: Boolean
  storefrontSearchPosition: Int
  availableInGrid: Boolean
}

type AttributeDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  attribute: Attribute
}

input AttributeFilterInput {
  valueRequired: Boolean
  isVariantOnly: Boolean
  visibleInStorefront: Boolean
  filterableInStorefront: Boolean
  filterableInDashboard: Boolean
  availableInGrid: Boolean
  search: String
  ids: [ID]
  inCollection: ID
  inCategory: ID
}

input AttributeInput {
  slug: String!
  value: String
  values: [String]
}

enum AttributeInputTypeEnum {
  DROPDOWN
  MULTISELECT
}

type AttributeReorderValues {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  attribute: Attribute
  productErrors: [ProductError!]!
}

enum AttributeSortField {
  NAME
  SLUG
  VALUE_REQUIRED
  IS_VARIANT_ONLY
  VISIBLE_IN_STOREFRONT
  FILTERABLE_IN_STOREFRONT
  FILTERABLE_IN_DASHBOARD
  STOREFRONT_SEARCH_POSITION
  AVAILABLE_IN_GRID
}

input AttributeSortingInput {
  direction: OrderDirection!
  field: AttributeSortField!
}

type AttributeTranslatableContent implements Node {
  id: ID!
  name: String!
  translation(languageCode: LanguageCodeEnum!): AttributeTranslation
  attribute: Attribute
}

type AttributeTranslate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  translationErrors: [TranslationError!]!
  attribute: Attribute
}

type AttributeTranslation implements Node {
  id: ID!
  name: String!
  language: LanguageDisplay!
}

enum AttributeTypeEnum {
  PRODUCT
  VARIANT
}

type AttributeUnassign {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productType: ProductType
  productErrors: [ProductError!]!
}

type AttributeUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  attribute: Attribute
  productErrors: [ProductError!]!
}

input AttributeUpdateInput {
  name: String
  slug: String
  removeValues: [ID]
  addValues: [AttributeValueCreateInput]
  valueRequired: Boolean
  isVariantOnly: Boolean
  visibleInStorefront: Boolean
  filterableInStorefront: Boolean
  filterableInDashboard: Boolean
  storefrontSearchPosition: Int
  availableInGrid: Boolean
}

type AttributeValue implements Node & ObjectWithBasicTranslatableFields {
  id: ID!
  name: String
  slug: String
  type: AttributeValueType
  translation(languageCode: LanguageCodeEnum!): AttributeValueTranslation
  inputType: AttributeInputTypeEnum
}

type AttributeValueBulkDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  count: Int!
  productErrors: [ProductError!]!
}

type AttributeValueCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  attribute: Attribute
  productErrors: [ProductError!]!
  attributeValue: AttributeValue
}

input AttributeValueCreateInput {
  name: String!
}

type AttributeValueDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  attribute: Attribute
  productErrors: [ProductError!]!
  attributeValue: AttributeValue
}

input AttributeValueInput {
  id: ID
  values: [String]!
}

type AttributeValueTranslatableContent implements Node {
  id: ID!
  name: String!
  translation(languageCode: LanguageCodeEnum!): AttributeValueTranslation
  attributeValue: AttributeValue
}

type AttributeValueTranslate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  translationErrors: [TranslationError!]!
  attributeValue: AttributeValue
}

type AttributeValueTranslation implements Node {
  id: ID!
  name: String!
  language: LanguageDisplay!
}

enum AttributeValueType {
  COLOR
  GRADIENT
  URL
  STRING
}

type AttributeValueUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  attribute: Attribute
  productErrors: [ProductError!]!
  attributeValue: AttributeValue
}

enum AuthStatus {
  APPROVED
  PENDING
  REJECTED
}

input BenefitFilterInput {
  healthPrograms: [ID]
  ids: [ID]
}

type BenefitGroup implements H_Node {
  created: Instant
  description: String
  healthPrograms(
    after: String
    before: String
    first: Int
    last: Int
  ): HealthProgramCountableConnection
  id: ID!
  modified: Instant
  name: String
}

type BenefitGroupComplex implements H_Node {
  benefitGroup: BenefitGroup
  created: Instant
  extraBenefits: [ExtraBenefitComplex]
  id: ID!
  modified: Instant
  optionsValues: [BenefitOptionComplex]
}

"""
CRUD a new Benefit Group
"""
type BenefitGroupCRUD {
  benefitGroup: BenefitGroup

  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  healthProgramErrors: [H_EntityError!]!
}

input BenefitGroupInput {
  description: String
  name: String
}

type BenefitOption implements H_Node {
  careType: CareType
  code: HealthProgramBenefitOptionCode
  description: String
  id: ID!
  name: String
  type: HealthProgramOptionType
}

type BenefitOptionComplex implements H_Node {
  created: Instant
  healthPrograms(
    after: String
    before: String
    first: Int
    last: Int
  ): HealthProgramCountableConnection
  id: ID!
  modified: Instant
  name: String
  option: BenefitOption
  value: H_Float
}

type Block implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  name: String!
  nameAr: String
  city: City!
  coordinates: [LocationType]
}

type BlockCountableConnection {
  pageInfo: PageInfo!
  edges: [BlockCountableEdge!]!
  totalCount: Int
}

type BlockCountableEdge {
  node: Block!
  cursor: String!
}

type BlockCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  blockErrors: [BlockError!]!
  block: Block
}

type BlockDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  blockErrors: [BlockError!]!
  block: Block
}

type BlockError {
  field: String
  message: String
  code: BlockErrorCode!
}

enum BlockErrorCode {
  ALREADY_EXISTS
  DUPLICATED_INPUT_ITEM
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input BlockFilterInput {
  location: LocationInput
  name_Icontains: String
  name: String
}

input BlockInput {
  name: String
  nameAr: String
  coordinates: [LocationInput!]
  city: ID
}

input BlockOrder {
  direction: OrderDirection!
  field: BlockOrderField
}

enum BlockOrderField {
  NAME
  CREATED
}

type BlockUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  blockErrors: [BlockError!]!
  block: Block
}

type Branch implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  seoTitle: String
  seoDescription: String
  name: String!
  nameAr: String
  description: String!
  vendor: Vendor!
  address: Address
  users: [User]
  consumers(
    before: String
    after: String
    first: Int
    last: Int
  ): UserCountableConnection!
  isActive: Boolean!
  contactNumber: String
  contactEmail: String
  type: BranchType
  healthLicenseStartDate: Date
  healthLicenseEndDate: Date
  isTrained: Boolean!
  acceptsDelivery: Boolean!
  acceptsPickup: Boolean!
  workingHours: [WorkingHour]
  workingHoursOverride: [WorkingHourOverride]
  branchuser(
    before: String
    after: String
    first: Int
    last: Int
  ): BranchUserCountableConnection!
  messages(
    customerId: ID!
    before: String
    after: String
    first: Int
    last: Int
  ): MessageCountableConnection
  isOpen: Boolean
  unReadMessagesCountForCurrentUser: Int
  healthLicense: String
}

type BranchCountableConnection {
  pageInfo: PageInfo!
  edges: [BranchCountableEdge!]!
  totalCount: Int
}

type BranchCountableEdge {
  node: Branch!
  cursor: String!
}

type BranchCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  branchErrors: [BranchError!]!
  branch: Branch
}

type BranchDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  branchErrors: [BranchError!]!
  branch: Branch
}

type BranchError {
  field: String
  message: String
  code: VendorErrorCode!
}

input BranchFilterInput {
  description: String
  description_Icontains: String
  contactNumber: String
  contactNumber_Icontains: String
  ids: [ID]
  vendors: [ID]
  hasChatWith: Boolean
  type: [VendorBranchTypeEnum]
  location: DistanceFilterInput
  isActive: Boolean
  acceptsDelivery: Boolean
  acceptsPickup: Boolean
  isActiveBranch: Boolean
  isIntegrated: Boolean
  name_Icontains: String
  name: String
  branchGlobalSearch: String
}

input BranchInput {
  name: String
  nameAr: String
  description: String
  workingHours: [WorkingHourInput]
  workingHoursOverride: [WorkingHourOverrideInput]
  addressInput: AddressInput
  isActive: Boolean
  contactNumber: String
  contactEmail: String
  type: VendorBranchTypeEnum
  healthLicense: String
  healthLicenseStartDate: Date
  healthLicenseEndDate: Date
  isTrained: Boolean
  acceptsDelivery: Boolean
  acceptsPickup: Boolean
}

type BranchInvoice implements Node {
  id: ID!
  totalServiceCommission: Float!
  totalCreditOrders: Float!
  totalCashOrders: Float!
  totalWalletOrders: Float!
  totalShippingPrice: Float
  totalPaidShippingPrice: Float
  totalOrders: Int!
  vendorInvoice: VendorInvoice!
  branchId: Int
  branch: Branch
}

input BranchOrder {
  direction: OrderDirection!
  field: BranchOrderField
}

enum BranchOrderField {
  NAME
  CREATED
  LAST_MESSAGE_SENT
  NEAREST
}

enum BranchType {
  HOSPITAL
  PHARMACY
  CLINIC
  DIAGNOSTIC_CENTER
}

type BranchUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  branchErrors: [BranchError!]!
  branch: Branch
}

type BranchUser {
  id: ID!
  created: DateTime!
  modified: DateTime!
  branch: Branch!
  user: User!
}

type BranchUserCountableConnection {
  pageInfo: PageInfo!
  edges: [BranchUserCountableEdge!]!
  totalCount: Int
}

type BranchUserCountableEdge {
  node: BranchUser!
  cursor: String!
}

enum BulkErrorCodes {
  BULK_CANCEL_BULK_FILE
  BULK_DUPLICATE_ROW_DATA
  BULK_FIELD_REQUIRED
  BULK_FILE_NOT_FOUND
  BULK_FILE_SERVICE_NOT_REACHABLE
  BULK_INVALID_DATE_FORMAT
  BULK_INVALID_FILE_EXTENSION
  BULK_NONE_NEGATIVE_PAGE_SIZE
  BULK_PERMISSION_DENIED
  BULK_TEMPLATE_NOT_ENABLED
  BULK_UNKNOWN
  BULK_UNKNOWN_TYPE
  FILE_ALREADY_EXIST
}

type BulkFile {
  code: BulkTemplateCode
  createdBy: User
  createdDate: Date
  errors: [BulkGraphqlError]
  failedRecordCount: Int
  id: ID
  processedRecordCount: Int
  recordsCount: Int
  status: BulkProcessingStatus
  updateDate: Date
}

type BulkFileConnection {
  edges: [BulkFileEdge]
  pageInfo: PageInfo
  totalCount: Int
}

type BulkFileEdge {
  cursor: String
  node: BulkFile
}

input BulkFilesFilterInput {
  code: BulkTemplateCode!
  createdBy: ID
  createdDate: Date
  entityID: ID
  processingStatus: BulkProcessingStatus
  updateDate: Date
}

enum BulkFilesOrderDirection {
  ASC
  DESC
}

enum BulkFileSortField {
  CREATED_DATE
  UPDATED_DATE
}

input BulkFilesSortingInput {
  direction: BulkFilesOrderDirection!
  field: BulkFileSortField!
}

type BulkGraphqlError {
  code: BulkErrorCodes
  errorType: ErrorType
  field: String
  message: String
}

enum BulkProcessingStatus {
  CANCELLED
  PENDING
  PROCESSED
  UNDER_PROCESS
}

type BulkProductError {
  field: String
  message: String
  code: ProductErrorCode!
  index: Int
  branches: [ID!]
}

type BulkTemplate {
  code: BulkTemplateCode
  description: String
}

enum BulkTemplateCode {
  HEALTH_PROGRAM_MEMBER
  HEALTH_PROGRAM_NETWORK
  HEALTH_PROGRAM_NETWORK_PROVIDER
  PRESCRIPTION_ORDER
}

input CallsPerVendorFilter {
  fromDate: String!
  healthProgramId: Int!
  isUrgentDemandCall: Boolean!
  toDate: String!
}

enum CareType {
  ERX_COVERAGE
  PROACTIVE
  REACTIVE
}

input CatalogueInput {
  products: [ID]
  categories: [ID]
  collections: [ID]
}

type Category implements Node & ObjectWithExtendedTranslatableFields {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String
  description: String
  descriptionJson: JSONString
  slug: String!
  parent: Category
  sortOrder: Int
  level: Int!
  ancestors(
    before: String
    after: String
    first: Int
    last: Int
  ): CategoryCountableConnection
  products(
    before: String
    after: String
    first: Int
    last: Int
  ): ProductCountableConnection
  children(
    before: String
    after: String
    first: Int
    last: Int
  ): CategoryCountableConnection
  backgroundImage: Image
  icon: Image
  translation(languageCode: LanguageCodeEnum!): CategoryTranslation
}

type CategoryBulkDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  count: Int!
  productErrors: [ProductError!]!
}

type CategoryCountableConnection {
  pageInfo: PageInfo!
  edges: [CategoryCountableEdge!]!
  totalCount: Int
}

type CategoryCountableEdge {
  node: Category!
  cursor: String!
}

type CategoryCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  category: Category
}

type CategoryDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  category: Category
}

input CategoryFilterInput {
  search: String
  ids: [ID]
  parent: ID
}

input CategoryInput {
  description: String
  descriptionJson: JSONString
  name: String
  slug: String
  seo: SeoInput
  backgroundImage: String
  backgroundImageAlt: String
  sortOrder: Int
  icon: String
}

enum CategorySortField {
  NAME
  PRODUCT_COUNT
  SUBCATEGORY_COUNT
}

input CategorySortingInput {
  direction: OrderDirection!
  field: CategorySortField!
}

type CategoryTranslatableContent implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: String!
  translation(languageCode: LanguageCodeEnum!): CategoryTranslation
  category: Category
}

type CategoryTranslate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  translationErrors: [TranslationError!]!
  category: Category
}

type CategoryTranslation implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: String!
  language: LanguageDisplay!
}

type CategoryUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  category: Category
}

type ChatError {
  field: String
  message: String
  code: ChatErrorCode!
}

enum ChatErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
}

type Checkout implements Node {
  created: DateTime!
  lastChange: DateTime!
  token: UUID!
  quantity: Int!
  billingAddress: OrderAddress
  shippingAddress: OrderAddress
  note: String!
  discount: Money
  discountName: String
  translatedDiscountName: String
  source: String
  id: ID!
  email: String!
  isShippingRequired: Boolean!
  lines: [CheckoutLine]
  shippingPrice: TaxedMoney
  subtotalPrice: TaxedMoney
  totalPrice: TaxedMoney
  user: User
}

type CheckoutAddNote {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutComplete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  orders: [Order]
  confirmationNeeded: Boolean!
  checkoutErrors: [CheckoutError!]!
}

type CheckoutCountableConnection {
  pageInfo: PageInfo!
  edges: [CheckoutCountableEdge!]!
  totalCount: Int
}

type CheckoutCountableEdge {
  node: Checkout!
  cursor: String!
}

type CheckoutCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  created: Boolean
  checkoutErrors: [CheckoutError!]!
  checkout: Checkout
}

input CheckoutCreateInput {
  lines: [CheckoutLineInput]!
  email: String
  shippingAddress: AddressInput
  billingAddress: AddressInput
  source: String
}

type CheckoutCustomerAttach {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  checkoutErrors: [CheckoutError!]!
  checkout: Checkout
}

type CheckoutEmailUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutError {
  field: String
  message: String
  code: CheckoutErrorCode!
  branch: ID
}

enum CheckoutErrorCode {
  BILLING_ADDRESS_NOT_SET
  CHECKOUT_NOT_FULLY_PAID
  GRAPHQL_ERROR
  PRODUCT_NOT_PUBLISHED
  INSUFFICIENT_STOCK
  INVALID
  INVALID_SHIPPING_METHOD
  NOT_FOUND
  QUANTITY_GREATER_THAN_LIMIT
  REQUIRED
  SHIPPING_ADDRESS_NOT_SET
  SHIPPING_METHOD_NOT_APPLICABLE
  SHIPPING_METHOD_NOT_SET
  SHIPPING_NOT_REQUIRED
  TAX_ERROR
  UNIQUE
  DISCOUNT_NOT_APPLICABLE
  ZERO_QUANTITY
}

type CheckoutLine implements Node {
  id: ID!
  variant: ProductVariant!
  quantity: Int!
  totalPrice: TaxedMoney
  requiresShipping: Boolean
  children: [CheckoutLine]
  isExpired: Boolean
  branch: Branch
  price: Money
}

type CheckoutLineCountableConnection {
  pageInfo: PageInfo!
  edges: [CheckoutLineCountableEdge!]!
  totalCount: Int
}

type CheckoutLineCountableEdge {
  node: CheckoutLine!
  cursor: String!
}

type CheckoutLineDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

input CheckoutLineInput {
  quantity: Int!
  variantId: ID!
  lines: [CheckoutLineInput]
  branch: ID!
}

type CheckoutLinesAdd {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutLinesUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutShippingAddressUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type City implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  name: String!
  nameAr: String
  maxNumberOfRounds: Int
  maxNumberOfTries: Int
  timeOutPeriod: Int
  area: String
  rounds: [CityRound]
  blocks(
    before: String
    after: String
    first: Int
    last: Int
  ): BlockCountableConnection!
  addresses(
    before: String
    after: String
    first: Int
    last: Int
  ): AddressCountableConnection!
}

type CityCountableConnection {
  pageInfo: PageInfo!
  edges: [CityCountableEdge!]!
  totalCount: Int
}

type CityCountableEdge {
  node: City!
  cursor: String!
}

type CityCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  cityErrors: [BlockError!]!
  city: City
}

type CityDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  cityErrors: [BlockError!]!
  city: City
}

input CityFilterInput {
  name_Icontains: String
  name: String
}

input CityInput {
  rounds: [RoundInput]
  name: String
  nameAr: String
  maxNumberOfRounds: Int
  maxNumberOfTries: Int
  timeOutPeriod: Int
  area: String
}

input CityOrder {
  direction: OrderDirection!
  field: CityOrderField
}

enum CityOrderField {
  NAME
  CREATED
}

type CityRound implements Node {
  id: ID!
  city: City!
  radius: Float!
  maxNumberOfPharmacies: Int!
  pharmaciesTypes: [VendorBranchTypeEnum]
}

type CityUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  cityErrors: [BlockError!]!
  city: City
}

type Clinician {
  email: String
  englishName: String
  firstName: String
  lastName: String
  license: String
  licenseEnd: Date
  licenseStart: Date
  phone: String
  tempPassword: String
}

type ClinicianCredentials {
  errors: [IntegrationGraphqlError]
  user: User
  userName: String
}

input ClinicianCredentialsInput {
  password: String!
  token: String
  user: ID!
  userName: String!
}

type CodeSystem {
  codeSystemConcepts: [CodeSystemConcept]
  codeSystemDefinition: CodeSystemDefinition
  codeSystemHistory: [CodeSystemHistory]
  display: String
  errors: [TerminologyGraphqlError]
  id: ID
  isActive: Boolean
  processingStatus: ProcessingStatus
  version: Int
}

enum CodeSystemCode {
  ALLERGY
  CLINICIAN
  CURRENT_PROCEDURAL_TERMINOLOGY
  DENIAL_CODE
  DIAGNOSIS
  DIAGNOSIS_RELATED_GROUP
  DIVISION
  GENERIC_DRUG
  GENERIC_DRUG_EXTRA_DATA
  HEALTH_PROVIDER
  LAB_TEST
  MEDICAL_SERVICE
  REJECTION_REASON
  ROUTE_OF_ADMIN
  SERVICE
  SPECIALITY
  TEMPERATURE
  TERMINOLOGY_EMPTY_CODE_SYSTEM
  TRADE_DRUG
  TRADE_DRUG_EXTRA_DATA
  UNIT_ID
}

type CodeSystemConcept {
  code: String
  display: String
  errors: [TerminologyGraphqlError]
  id: ID
  properties: [CodeSystemConceptProperty]
}

type CodeSystemConceptChange {
  newCodeSystemConcept: CodeSystemConcept
  oldCodeSystemConcept: CodeSystemConcept
}

type CodeSystemConceptConnection {
  edges: [CodeSystemConceptEdge]
  pageInfo: PageInfo
  totalCount: Int
}

type CodeSystemConceptEdge {
  cursor: String
  node: CodeSystemConcept
}

type CodeSystemConceptFieldDefinition {
  code: String
  display: String
  errors: [TerminologyGraphqlError]
  fieldType: Type
  id: ID
  isEditable: Boolean!
  isMandatory: Boolean
  isVisible: Boolean
  toolTip: String
}

input CodeSystemConceptFieldDefinitionInput {
  code: String!
  codeSystemDefinition: CodeSystemDefinitionInput!
  display: String!
  fieldType: Type!
  id: ID
  isMandatory: Boolean!
  isVisible: Boolean!
  toolTip: String
}

input CodeSystemConceptInput {
  code: String
  id: ID
  properties: [CodeSystemConceptPropertyInput]
}

type CodeSystemConceptProperty {
  code: String
  errors: [TerminologyGraphqlError]
  fieldType: Type
  id: ID
  valueBoolean: Boolean
  valueDate: Date
  valueFloat: Float
  valueInteger: Int
  valueString: String
}

input CodeSystemConceptPropertyInput {
  code: String
  fieldType: Type
  id: ID
  valueBoolean: Boolean
  valueDate: Date
  valueFloat: Float
  valueInteger: Int
  valueString: String
}

type CodeSystemConnection {
  edges: [CodeSystemEdge]
  pageInfo: PageInfo
  totalCount: Int
}

type CodeSystemDefinition {
  code: CodeSystemCode
  codeSystemConceptFields: [CodeSystemConceptFieldDefinition]
  display: String
  editorUserId: User
  errors: [TerminologyGraphqlError]
  id: ID
  isEditable: Boolean
  reviewerUserId: User
}

input CodeSystemDefinitionInput {
  id: ID
}

type CodeSystemEdge {
  cursor: String
  node: CodeSystem
}

type CodeSystemEvent {
  codeSystemCode: CodeSystemCode
  id: ID
  processingStatus: ProcessingStatus
}

type CodeSystemHistory {
  errors: [TerminologyGraphqlError]
  id: ID
  processingStatus: ProcessingStatus
  updateDate: String
  user: User
}

type CodeSystemSummery {
  activeCodeSystem: CodeSystem
  codeSystemDefinition: CodeSystemDefinition
  iconUrl: String
  lastCodeSystem: CodeSystem
}

type Coding {
  code: String
  display: String
}

type Collection implements Node & ObjectWithExtendedTranslatableFields {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String
  description: String
  descriptionJson: JSONString
  publicationDate: Date
  isPublished: Boolean!
  slug: String!
  products(
    before: String
    after: String
    first: Int
    last: Int
  ): ProductCountableConnection
  backgroundImage: Image
  translation(languageCode: LanguageCodeEnum!): CollectionTranslation
}

type CollectionAddProducts {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  collection: Collection
  productErrors: [ProductError!]!
}

type CollectionBulkDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  count: Int!
  productErrors: [ProductError!]!
}

type CollectionBulkPublish {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  count: Int!
  productErrors: [ProductError!]!
}

type CollectionCountableConnection {
  pageInfo: PageInfo!
  edges: [CollectionCountableEdge!]!
  totalCount: Int
}

type CollectionCountableEdge {
  node: Collection!
  cursor: String!
}

type CollectionCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  collection: Collection
}

input CollectionCreateInput {
  isPublished: Boolean
  name: String
  slug: String
  description: String
  descriptionJson: JSONString
  backgroundImage: String
  backgroundImageAlt: String
  seo: SeoInput
  publicationDate: Date
  products: [ID]
}

type CollectionDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  collection: Collection
}

input CollectionFilterInput {
  published: CollectionPublished
  search: String
  ids: [ID]
}

input CollectionInput {
  isPublished: Boolean
  name: String
  slug: String
  description: String
  descriptionJson: JSONString
  backgroundImage: String
  backgroundImageAlt: String
  seo: SeoInput
  publicationDate: Date
}

enum CollectionPublished {
  PUBLISHED
  HIDDEN
}

type CollectionRemoveProducts {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  collection: Collection
  productErrors: [ProductError!]!
}

type CollectionReorderProducts {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  collection: Collection
  productErrors: [ProductError!]!
}

enum CollectionSortField {
  NAME
  AVAILABILITY
  PRODUCT_COUNT
}

input CollectionSortingInput {
  direction: OrderDirection!
  field: CollectionSortField!
}

type CollectionTranslatableContent implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: String!
  translation(languageCode: LanguageCodeEnum!): CollectionTranslation
  collection: Collection
}

type CollectionTranslate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  translationErrors: [TranslationError!]!
  collection: Collection
}

type CollectionTranslation implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: String!
  language: LanguageDisplay!
}

type CollectionUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  collection: Collection
}

type Condition {
  conditionOperation: ConditionOperation
  conditions: [Condition]
  entityType: EntityType
  field: Field
  id: ID
  isGroup: Boolean
  operator: Operator
  value: ConditionValue
}

input ConditionInput {
  conditionOperation: ConditionOperation
  conditions: [ConditionInput]
  entityType: EntityType
  field: FieldInput
  isGroup: Boolean!
  operator: Operator
  value: ConditionValueInput
}

enum ConditionOperation {
  AND
  OR
}

type ConditionValue {
  valueBoolean: Boolean
  valueDate: Date
  valueID: String
  valueList: ID
  valueNumber: Float
  valueString: String
}

input ConditionValueInput {
  valueBoolean: Boolean
  valueDate: Date
  valueID: String
  valueList: ID
  valueNumber: Float
  valueString: String
}

type ConfigurationItem {
  name: String!
  value: String
  type: ConfigurationTypeFieldEnum
  helpText: String
  label: String
}

input ConfigurationItemInput {
  name: String!
  value: String
}

enum ConfigurationTypeFieldEnum {
  STRING
  INTEGER
  BOOLEAN
  SECRET
  PASSWORD
}

type ConfirmAccountEmail {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  success: Boolean
  accountErrors: [AccountError!]!
}

type ConfirmAccountMobile {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  success: Boolean
  accountErrors: [AccountError!]!
}

type ConfirmPasswordRestOTP {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  token: String
  success: Boolean
  accountErrors: [AccountError!]!
}

input ConsumerAppointmentConfirmInput {
  """
  Appointment confirmed end time
  """
  confirmedEndTime: Instant!

  """
  Appointment confirmed start time
  """
  confirmedStartTime: Instant!
}

"""
Creates an Appointment.
"""
type ConsumerAppointmentCreate {
  appointment: Appointment
  appointmentErrors: [H_EntityError!]!

  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
}

input ConsumerAppointmentInput {
  doctor: ID!
  healthProgram: ID!
  requestedEndTime: Instant!
  requestedStartTime: Instant!
  specialty: String!
  type: AppointmentType
}

"""
follow health channel.
"""
type ConsumerHealthChannelFollow {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  healthChannelErrors: [H_EntityError!]!
  healthChannelFollower: HealthChannelFollower
}

input ConsumerHealthChannelFollowInput {
  channel: ID!
}

"""
UnFollow health channel.
"""
type ConsumerHealthChannelUnFollow {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  healthChannelErrors: [H_EntityError!]!
  success: Boolean
}

type ConsumerPrescriptionDispense {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  orderErrors: [OrderError!]!
  order: Order
}

input ConsumerPrescriptionDispenseInput {
  referenceNumber: String!
  nationalId: String
  isDeliveryRequested: Boolean!
  shippingAddress: AddressInput!
}

"""
Rate a Health Channel
"""
type ConsumerRateHealthChannel {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  healthChannelErrors: [H_EntityError!]!
  healthChannelRating: HealthChannelRating
}

type ConsumerViewPreference implements Node {
  id: ID!
  user: User!
  view: String!
  data: JSONString
}

type ConsumerViewPreferenceError {
  field: String
  message: String
  code: ConsumerViewPreferenceErrorCode!
}

enum ConsumerViewPreferenceErrorCode {
  GRAPHQL_ERROR
  INVALID
  UNIQUE
  REQUIRED
}

input ConsumerViewPreferenceInput {
  view: String
  data: JSONString
}

type ConsumerViewPreferenceSave {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  consumerViewPreferenceErrors: [ConsumerViewPreferenceError!]!
  consumerViewPreference: ConsumerViewPreference
}

type ConsumerWishlistDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  wishlist: Wishlist
  wishlistErrors: [WishlistError!]!
}

type ConvertVirtualOrderToRealOne {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  orders: [Order]
  success: Boolean
  orderErrors: [OrderError!]!
}

type CountryDisplay {
  code: String!
  country: String!
}

enum CoverageByType {
  CASH
  INSURANCE
  PROVIDER
  TPA
}

input CreatePrescriptionActivityInput {
  code: String!
  duration: String!
  frequencyType: FrequencyType!
  frequencyUnitType: String!
  frequencyValue: Int!
  instructions: String!
  observation: String!
  quantity: Float!
  refills: Int!
  type: ActivityType!
}

input CreatePrescriptionDiagnosisInput {
  code: String!
  type: DiagnosisType!
}

input CreatePrescriptionInput {
  activities: [CreatePrescriptionActivityInput]!
  diagnoses: [CreatePrescriptionDiagnosisInput]!
  memberWeight: Int!
  visitId: ID!
}

type CustomerAcceptDraftOrder {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  orderErrors: [OrderError!]!
  order: Order
}

input CustomerCreateInput {
  firstName: String
  email: String
  lastName: String
  mobile: String!
  password: String!
  nationalId: String!
}

input CustomerDashboardFilterInput {
  dateJoined: DateRangeInput
  joinedPeriod: ReportingPeriod
}

type CustomerEvent implements Node {
  id: ID!
  date: DateTime
  type: CustomerEventsEnum
  user: User
  message: String
  count: Int
}

enum CustomerEventsEnum {
  ACCOUNT_CREATED
  ACCOUNT_CREATED_FROM_SSO
  PASSWORD_RESET_LINK_SENT
  PASSWORD_RESET
  EMAIL_CHANGED_REQUEST
  PASSWORD_CHANGED
  EMAIL_CHANGED
  PLACED_ORDER
  NOTE_ADDED_TO_ORDER
  DIGITAL_LINK_DOWNLOADED
  CUSTOMER_DELETED
  NAME_ASSIGNED
  EMAIL_ASSIGNED
  NOTE_ADDED
}

type CustomerFavoriteVendor implements Node {
  id: ID!
  vendor: Vendor!
  customer: User!
}

type CustomerFavoriteVendorCountableConnection {
  pageInfo: PageInfo!
  edges: [CustomerFavoriteVendorCountableEdge!]!
  totalCount: Int
}

type CustomerFavoriteVendorCountableEdge {
  node: CustomerFavoriteVendor!
  cursor: String!
}

input CustomerFilterInput {
  dateJoined: DateRangeInput
  search: String
  joinedPeriod: ReportingPeriod
  nationalId: String
}

type CustomerMarkMessagesAsSeen {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  updatedCount: Int
  chatErrors: [ChatError!]!
}

type CustomerSendMessage {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  chatErrors: [ChatError!]!
  message: Message
}

input CustomerUpdateInput {
  firstName: String
  email: String
  lastName: String
  mobile: String!
  password: String!
}

"""
An RFC-3339 compliant Full Date Scalar
"""
scalar Date

input DateRangeInput {
  gte: Date
  lte: Date
}

scalar DateTime

input DateTimeFilterInput {
  date: Date!
  time: TimeRangeFilterInput!
}

input DateTimeRangeInput {
  gte: DateTime
  lte: DateTime
}

enum DayOfWeekEnum {
  SAT
  SUN
  MON
  TUE
  WED
  THU
  FRI
}

scalar Decimal

input DecimalRangeInput {
  gte: Decimal
  lte: Decimal
}

type Decision {
  actionFields: [ActionField]
  conditions: [Condition]
  decisionPlan: DecisionPlan
  drl: String
  errors: [DecisionMakerGraphqlError]
  id: ID
  isActive: Boolean
  isScript: Boolean
  name: String
  priority: Priority
}

type DecisionConnection {
  edges: [DecisionEdge]
  pageInfo: PageInfo
  totalCount: Int
}

type DecisionEdge {
  cursor: String
  node: Decision
}

input DecisionInput {
  actionFields: [ActionFieldInput]
  conditions: [ConditionInput]!
  decisionPlan: DecisionPlanInput!
  drl: String
  id: ID
  isActive: Boolean!
  isScript: Boolean!
  name: String!
  priority: Priority!
}

input DecisionInputData {
  code: String!
  type: EntityType!
  valueBoolean: Boolean
  valueDate: Date
  valueID: String
  valueList: [String]
  valueNumber: Float
  valueString: String
}

enum DecisionMakerErrorCodes {
  DECISION_FILE_NOT_FOUND
  DECISION_FILE_SERVICE_NOT_REACHABLE
  DECISION_INVALID_FILE_EXTENSION
  DECISION_INVALID_ID
  DECISION_MAKER_DUPLICATE_LIST_ITEM
  DECISION_MAKER_DUPLICATE_LIST_NAME
  DECISION_MAKER_DUPLICATE_RULE_NAME
  DECISION_MAKER_ENTITY_NOT_FOUND
  DECISION_MAKER_FIELD_MANDATORY
  DECISION_MAKER_FIELD_SIZE
  DECISION_MAKER_FIELD_SIZE_EXCEPTION
  DECISION_MAKER_INVALID_ACTION
  DECISION_MAKER_INVALID_OPERATOR
  DECISION_MAKER_INVALID_RULE
  DECISION_MAKER_INVALID_VALUE
  DECISION_MAKER_NONE_NEGATIVE_PAGE_SIZE
  DECISION_MAKER_SUB_LIST_NOT_FOUND
  DECISION_MAKER_UNKNOWN
  DECISION_MAKER_UNKNOWN_TYPE
  DECISION_MAKER_VALIDATION_ERROR
  DECISION_PERMISSION_DENIED
  INVALID_OR_EXPIRED_TOKEN
}

type DecisionMakerGraphqlError {
  code: DecisionMakerErrorCodes
  errorType: ErrorType
  field: String
  message: String
}

enum DecisionMakerOrderDirection {
  ASC
  DESC
}

type DecisionPlan {
  actionDefinitionFields: [ActionDefinitionField]
  code: String
  display: String
  field: [Field]
  id: ID
  isRiskTemplate: Boolean
}

input DecisionPlanInput {
  id: ID!
}

enum DecisionSortField {
  DECISION_PLAN
  IS_ACTIVE
  NAME
  TYPE
}

input DecisionSortingInput {
  direction: DecisionMakerOrderDirection!
  field: DecisionSortField!
}

type DeliveryError {
  field: String
  message: String
  code: DeliveryErrorCode!
}

enum DeliveryErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

enum DeliveryType {
  DELIVERY
  PICKUP
}

enum DeliveryTypes {
  PICKUP
  DELIVERY
}

type Diagnose implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  type: String!
  code: String!
  prescription: Prescription!
  display: String
}

input DiagnoseFilterInput {
  code: String
}

input DiagnosisInput {
  code: String!
  type: DiagnosisType!
}

type DiagnosisPrediction {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  diagnosis: [String]
  diagnosisPredictionsErrors: [PrescriptionError!]!
}

input DiagnosisPredictionInput {
  doctorNote: String!
}

enum DiagnosisType {
  Principal
  Secondary
}

scalar DictType

type DiscountError {
  field: String
  message: String
  code: DiscountErrorCode!
}

enum DiscountErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

enum DiscountStatusEnum {
  ACTIVE
  EXPIRED
  SCHEDULED
}

enum DiscountValueTypeEnum {
  FIXED
  PERCENTAGE
}

input DistanceFilterInput {
  distance: Decimal = 5000
  coordinates: LocationInput!
}

type Division implements Node {
  id: ID!
  createdBy: User
  modifiedBy: User
  created: DateTime!
  modified: DateTime!
  name: String!
  vendorSet(
    before: String
    after: String
    first: Int
    last: Int
  ): VendorCountableConnection!
}

type DivisionConnection {
  pageInfo: PageInfo!
  edges: [DivisionEdge]!
}

type DivisionEdge {
  node: Division
  cursor: String!
}

type Doctor implements Node {
  appointments(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for Appointment
    """
    filter: AppointmentFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
    sortBy: AppointmentSortingInput
  ): AppointmentCountableConnection
  dashboard: DoctorDashboard
  healthProgramNetworkProviderProfessionals(
    after: String
    before: String
    filter: HealthProgramNetworkProviderProfessionalFilterInput
    first: Int
    last: Int
  ): HealthProgramNetworkProviderProfessionalCountableConnection
  id: ID!
  created: DateTime!
  modified: DateTime!
  isNationalIdPublic: Boolean!
  isLicenseNumberPublic: Boolean!
  isDateOfBirthPublic: Boolean!
  languages: JSONString
  isLanguagesPublic: Boolean!
  yearsOfExperience: Int!
  isYearsOfExperiencePublic: Boolean!
  specializations: [Specialization]
  bio: String
  secondMobileNumber: String
  isSecondMobileNumberPublic: Boolean!
  isMobileNumberPublic: Boolean!
  socialLinks: JSONString
  isSocialLinksPublic: Boolean!
  inCall: Boolean!
  isAddressPublic: Boolean!
  totalRatings: Int!
  ratingsSum: Float!
  averageRating: Float!
  vendor: Vendor!
  user: User
  appointmentSlotTimePeriod: Int!
  appointmentTypes: [AppointmentTypeEnum]
  seniority: DoctorSeniorityEnum
  qualifications: [Qualification]
  availabilities(
    before: String
    after: String
    first: Int
    last: Int
  ): DoctorAvailabilityCountableConnection!
  workingHours: [WorkingHour]
  lastAvailability: DoctorAvailability
  availabilityStatus: DoctorAvailabilityStatusEnum!
}

input DoctorAcceptAppointmentInput {
  paymentInfo: AppointmentPaymentRequestInput!
  suggestedTimeSlots: [AppointmentTimeSlotInput]!
}

input DoctorAppointmentRejectInput {
  rejectionReason: String
}

type DoctorAvailabilitiesSum {
  doctor: ID
  sumOfAvailabilities: Float
}

type DoctorAvailability implements Node {
  id: ID!
  status: DoctorAvailabilityStatus!
  period: Float
  doctor: Doctor!
  startTime: DateTime!
  endTime: DateTime
}

type DoctorAvailabilityCountableConnection {
  pageInfo: PageInfo!
  edges: [DoctorAvailabilityCountableEdge!]!
  totalCount: Int
}

type DoctorAvailabilityCountableEdge {
  node: DoctorAvailability!
  cursor: String!
}

enum DoctorAvailabilityStatus {
  UNAVAILABLE
  AVAILABLE_LEVEL_1
  AVAILABLE_LEVEL_2
}

type DoctorAvailabilityStatusChange {
  doctor: Doctor
}

enum DoctorAvailabilityStatusEnum {
  UNAVAILABLE
  AVAILABLE_LEVEL_1
  AVAILABLE_LEVEL_2
}

type DoctorAvailabilityStatusUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  result: String
  doctorErrors: [DoctorError!]!
}

type DoctorCountableConnection {
  pageInfo: PageInfo!
  edges: [DoctorCountableEdge!]!
  totalCount: Int
}

type DoctorCountableEdge {
  node: Doctor!
  cursor: String!
}

type DoctorDashboard {
  numberOfNewRequests: Int
  numberOfScheduledCalls: Int
  numberOfVisitsPerStatus(date: H_ReportingPeriod): DictType
  totalEVisits: Int
}

type DoctorError {
  field: String
  message: String
  code: DoctorErrorCode!
}

enum DoctorErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input DoctorFilterInput {
  specializations: [ID]
  location: DistanceFilterInput
  rating: DecimalRangeInput
  yearsOfExperience: IntRangeInput
  languages: [String]
  gender: String
  inCall: Boolean
  meetingPlatformId: String
  availabilityStatus: [DoctorAvailabilityStatusEnum]
  appointmentAvailableTime: DateTimeFilterInput
  vendor: [ID]
  branch: [ID]
  appointmentTypes: [AppointmentTypeEnum]
  healthConditions: [ID]
  city: ID
  isActive: Boolean
  licenseNumber: String
  licenseNumber_Icontains: String
}

input DoctorHealthProgramPointsFilterInput {
  doctorId: String!
  fromDate: String!
  healthProgramId: Int!
  toDate: String!
}

type DoctorHealthProgramTotalPointsTrackingConnection {
  edges: [DoctorHealthProgramTotalPointsTrackingCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type DoctorHealthProgramTotalPointsTrackingCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  node: DoctorHealthProgramTotalPointsTrackingResponse!
}

type DoctorHealthProgramTotalPointsTrackingResponse {
  availabilityRatingFactor: H_Float
  callQualityRatingFactor: H_Float
  doctor: Doctor
  mainSpecializationsRateFactor: H_Float
  pointsDuringNormalDemand: H_Float
  pointsDuringUrgentDemand: H_Float
  totalPoints: Int
}

type DoctorInCallStatusUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  result: String
  doctorErrors: [DoctorError!]!
}

input DoctorInput {
  isDateOfBirthPublic: Boolean
  bio: String
  languages: [String!]
  isLanguagesPublic: Boolean
  isMobileNumberPublic: Boolean
  socialLinks: [String!]
  isSocialLinksPublic: Boolean
  isAddressPublic: Boolean
  workingHours: [WorkingHourInput]
  appointmentSlotTimePeriod: Int
  qualifications: [QualificationInput]
  appointmentTypes: [AppointmentTypeEnum]
  isNationalIdPublic: Boolean
  isLicenseNumberPublic: Boolean
  yearsOfExperience: Int
  isYearsOfExperiencePublic: Boolean
  specializations: [ID]
  secondMobileNumber: String
  isSecondMobileNumberPublic: Boolean
  seniority: DoctorSeniorityEnum
}

input DoctorOrder {
  direction: OrderDirection!
  field: DoctorOrderField
}

enum DoctorOrderField {
  RATING
  CREATED
}

input DoctorProfileInput {
  isDateOfBirthPublic: Boolean
  bio: String
  languages: [String!]
  isLanguagesPublic: Boolean
  isMobileNumberPublic: Boolean
  socialLinks: [String!]
  isSocialLinksPublic: Boolean
  isAddressPublic: Boolean
  workingHours: [WorkingHourInput]
  appointmentSlotTimePeriod: Int
  qualifications: [QualificationInput]
  appointmentTypes: [AppointmentTypeEnum]
}

type DoctorProfileUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  doctorErrors: [DoctorError!]!
  doctor: Doctor
}

enum DoctorSeniorityEnum {
  GP
  SP
  CP
}

"""
doctor reject assigned call
"""
type DoctorVisitReject {
  doctorVisitRejectionAudit: DoctorVisitRejectionAudit

  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  visitErrors: [H_EntityError!]!
}

input DoctorVisitRejectInput {
  reason: String
  visit: ID!
}

type DoctorVisitRejectionAudit implements H_Node {
  created: Instant
  doctorId: Int
  id: ID!
  modified: Instant
  reason: String
  visit: Visit
}

type DoctorVisitRejectionAuditCountableConnection {
  edges: [DoctorVisitRejectionAuditCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type DoctorVisitRejectionAuditCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DoctorVisitRejectionAudit!
}

input DoctorVisitRejectionAuditFilterInput {
  visits: [ID]
}

input DraftOrderAcceptInput {
  shippingAddress: AddressInput!
}

type DraftOrderCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  orderErrors: [OrderError!]!
  order: Order
}

input DraftOrderCreateInput {
  user: ID!
  userEmail: String
  discount: Decimal
  customerNote: String!
  branchId: ID!
  total: Decimal!
}

"""
Create a new EarliestVisit
"""
type EarliestVisitCreate {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  visit: Visit
  visitErrors: [H_EntityError!]!
}

input EarliestVisitCreateInput {
  healthProgram: ID!
  patientNote: String
}

type EarlyRefillReason implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  reason: String!
  type: EarlyRefillReasonType!
  earlyRefillRequests(
    before: String
    after: String
    first: Int
    last: Int
  ): EarlyRefillRequestCountableConnection!
}

type EarlyRefillReasonCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  earlyRefillReasonErrors: [EarlyRefillReasonError!]!
  earlyRefillReason: EarlyRefillReason
}

type EarlyRefillReasonDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  earlyRefillReasonErrors: [EarlyRefillReasonError!]!
  earlyRefillReason: EarlyRefillReason
}

type EarlyRefillReasonError {
  field: String
  message: String
  code: EarlyRefillReasonErrorCode!
}

enum EarlyRefillReasonErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input EarlyRefillReasonInput {
  reason: String!
}

enum EarlyRefillReasonType {
  SYSTEM
  CUSTOM
}

type EarlyRefillReasonUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  earlyRefillReasonErrors: [EarlyRefillReasonError!]!
  earlyRefillReason: EarlyRefillReason
}

type EarlyRefillRequest implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  prescription: Prescription!
  status: EarlyRefillRequestStatus!
  reason: EarlyRefillReason!
}

type EarlyRefillRequestCountableConnection {
  pageInfo: PageInfo!
  edges: [EarlyRefillRequestCountableEdge!]!
  totalCount: Int
}

type EarlyRefillRequestCountableEdge {
  node: EarlyRefillRequest!
  cursor: String!
}

type EarlyRefillRequestCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  earlyRefillRequestErrors: [RefillError!]!
  earlyRefillRequest: EarlyRefillRequest
}

input EarlyRefillRequestFilterInput {
  status: String
}

input EarlyRefillRequestInput {
  prescription: ID!
  earlyRefillReason: ID
  customEarlyRefillReason: String
}

enum EarlyRefillRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EntityType {
  BOOLEAN
  DATE
  ID
  LIST
  NUMBER
  STRING
}

type Error {
  field: String
  message: String
}

enum ErrorDetail {
  """
  The deadline expired before the operation could complete.

  For operations that change the state of the system, this error
  may be returned even if the operation has completed successfully.
  For example, a successful response from a server could have been
  delayed long enough for the deadline to expire.

  HTTP Mapping: 504 Gateway Timeout
  Error Type: UNAVAILABLE
  """
  DEADLINE_EXCEEDED

  """
  The server detected that the client is exhibiting a behavior that
  might be generating excessive load.

  HTTP Mapping: 429 Too Many Requests or 420 Enhance Your Calm
  Error Type: UNAVAILABLE
  """
  ENHANCE_YOUR_CALM

  """
  The requested field is not found in the schema.

  This differs from `NOT_FOUND` in that `NOT_FOUND` should be used when a
  query is valid, but is unable to return a result (if, for example, a
  specific video id doesn't exist). `FIELD_NOT_FOUND` is intended to be
  returned by the server to signify that the requested field is not known to exist.
  This may be returned in lieu of failing the entire query.
  See also `PERMISSION_DENIED` for cases where the
  requested field is invalid only for the given user or class of users.

  HTTP Mapping: 404 Not Found
  Error Type: BAD_REQUEST
  """
  FIELD_NOT_FOUND

  """
  The client specified an invalid argument.

  Note that this differs from `FAILED_PRECONDITION`.
  `INVALID_ARGUMENT` indicates arguments that are problematic
  regardless of the state of the system (e.g., a malformed file name).

  HTTP Mapping: 400 Bad Request
  Error Type: BAD_REQUEST
  """
  INVALID_ARGUMENT

  """
  The provided cursor is not valid.

  The most common usage for this error is when a client is paginating
  through a list that uses stateful cursors. In that case, the provided
  cursor may be expired.

  HTTP Mapping: 404 Not Found
  Error Type: NOT_FOUND
  """
  INVALID_CURSOR

  """
  Unable to perform operation because a required resource is missing.

  Example: Client is attempting to refresh a list, but the specified
  list is expired. This requires an action by the client to get a new list.

  If the user is simply trying GET a resource that is not found,
  use the NOT_FOUND error type. FAILED_PRECONDITION.MISSING_RESOURCE
  is to be used particularly when the user is performing an operation
  that requires a particular resource to exist.

  HTTP Mapping: 400 Bad Request or 500 Internal Server Error
  Error Type: FAILED_PRECONDITION
  """
  MISSING_RESOURCE

  """
  Service Error.

  There is a problem with an upstream service.

  This may be returned if a gateway receives an unknown error from a service
  or if a service is unreachable.
  If a request times out which waiting on a response from a service,
  `DEADLINE_EXCEEDED` may be returned instead.
  If a service returns a more specific error Type, the specific error Type may
  be returned instead.

  HTTP Mapping: 502 Bad Gateway
  Error Type: UNAVAILABLE
  """
  SERVICE_ERROR

  """
  Request failed due to network errors.

  HTTP Mapping: 503 Unavailable
  Error Type: UNAVAILABLE
  """
  TCP_FAILURE

  """
  Request throttled based on server concurrency limits.

  HTTP Mapping: 503 Unavailable
  Error Type: UNAVAILABLE
  """
  THROTTLED_CONCURRENCY

  """
  Request throttled based on server CPU limits

  HTTP Mapping: 503 Unavailable.
  Error Type: UNAVAILABLE
  """
  THROTTLED_CPU

  """
  The operation is not implemented or is not currently supported/enabled.

  HTTP Mapping: 501 Not Implemented
  Error Type: BAD_REQUEST
  """
  UNIMPLEMENTED

  """
  Unknown error.

  This error should only be returned when no other error detail applies.
  If a client sees an unknown errorDetail, it will be interpreted as UNKNOWN.

  HTTP Mapping: 500 Internal Server Error
  """
  UNKNOWN
}

enum ErrorType {
  """
  Bad Request.

  There is a problem with the request.
  Retrying the same request is not likely to succeed.
  An example would be a query or argument that cannot be deserialized.

  HTTP Mapping: 400 Bad Request
  """
  BAD_REQUEST

  """
  The operation was rejected because the system is not in a state
  required for the operation's execution.  For example, the directory
  to be deleted is non-empty, an rmdir operation is applied to
  a non-directory, etc.

  Service implementers can use the following guidelines to decide
  between `FAILED_PRECONDITION` and `UNAVAILABLE`:

  - Use `UNAVAILABLE` if the client can retry just the failing call.
  - Use `FAILED_PRECONDITION` if the client should not retry until
  the system state has been explicitly fixed.  E.g., if an "rmdir"
       fails because the directory is non-empty, `FAILED_PRECONDITION`
  should be returned since the client should not retry unless
  the files are deleted from the directory.

  HTTP Mapping: 400 Bad Request or 500 Internal Server Error
  """
  FAILED_PRECONDITION

  """
  Internal error.

  An unexpected internal error was encountered. This means that some
  invariants expected by the underlying system have been broken.
  This error code is reserved for serious errors.

  HTTP Mapping: 500 Internal Server Error
  """
  INTERNAL

  """
  The requested entity was not found.

  This could apply to a resource that has never existed (e.g. bad resource id),
  or a resource that no longer exists (e.g. cache expired.)

  Note to server developers: if a request is denied for an entire class
  of users, such as gradual feature rollout or undocumented allowlist,
  `NOT_FOUND` may be used. If a request is denied for some users within
  a class of users, such as user-based access control, `PERMISSION_DENIED`
  must be used.

  HTTP Mapping: 404 Not Found
  """
  NOT_FOUND

  """
  The caller does not have permission to execute the specified
  operation.

  `PERMISSION_DENIED` must not be used for rejections
  caused by exhausting some resource or quota.
  `PERMISSION_DENIED` must not be used if the caller
  cannot be identified (use `UNAUTHENTICATED`
  instead for those errors).

  This error Type does not imply the
  request is valid or the requested entity exists or satisfies
  other pre-conditions.

  HTTP Mapping: 403 Forbidden
  """
  PERMISSION_DENIED

  """
  The request does not have valid authentication credentials.

  This is intended to be returned only for routes that require
  authentication.

  HTTP Mapping: 401 Unauthorized
  """
  UNAUTHENTICATED

  """
  Currently Unavailable.

  The service is currently unavailable.  This is most likely a
  transient condition, which can be corrected by retrying with
  a backoff.

  HTTP Mapping: 503 Unavailable
  """
  UNAVAILABLE

  """
  Unknown error.

  For example, this error may be returned when
  an error code received from another address space belongs to
  an error space that is not known in this address space.  Also
  errors raised by APIs that do not return enough error information
  may be converted to this error.

  If a client sees an unknown errorType, it will be interpreted as UNKNOWN.
  Unknown errors MUST NOT trigger any special behavior. These MAY be treated
  by an implementation as being equivalent to INTERNAL.

  When possible, a more specific error should be provided.

  HTTP Mapping: 520 Unknown Error
  """
  UNKNOWN
}

type ExclusionOption implements H_Node {
  created: Instant
  description: String
  healthPrograms(
    after: String
    before: String
    first: Int
    last: Int
  ): HealthProgramCountableConnection
  id: ID!
  modified: Instant
  name: String
}

"""
CRUD a new Exclusion Option
"""
type ExclusionOptionCRUD {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  exclusionOption: ExclusionOption
  healthProgramErrors: [H_EntityError!]!
}

input ExclusionOptionInput {
  description: String
  name: String
}

type ExtraBenefit implements H_Node {
  created: Instant
  id: ID!
  modified: Instant
  name: String
}

type ExtraBenefitComplex implements H_Node {
  created: Instant
  extraBenefit: ExtraBenefit
  healthChannels: [HealthChannel]
  id: ID!
  modified: Instant
}

"""
CRUD a new Extra Benefit
"""
type ExtraBenefitCRUD {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  extraBenefit: ExtraBenefit
  healthProgramErrors: [H_EntityError!]!
}

input ExtraBenefitInput {
  name: String
}

type Field {
  allowedValues: [String]
  category: RiskFactorFieldCategory
  code: String
  display: String
  fieldType: FieldType
  id: ID
  operators: [Operator]
  standard: RiskFactorTemplateFieldStandard
  unit: RiskFactorFieldUnit
}

input FieldInput {
  id: ID!
}

type FieldType {
  id: ID
  type: EntityType
}

input FieldTypeInput {
  type: EntityType!
}

input FreeDeliveryEligibilityCheckInput {
  shippingAddress: AddressInput!
  patientIdentifier: String!
}

enum FrequencyType {
  Day
  Hour
  Month
  Week
}

type FromGlobalId {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  pk: String
  type: String
}

type FulfillmentLine implements Node {
  id: ID!
  quantity: Int!
  orderLine: OrderLine
}

type GenericDrugDeliveryEligibility {
  deliveryTypes: [DeliveryType]
  genericDrug: String
}

type GenericDrugProperties {
  isHazardous: Boolean
  isHighAlert: Boolean
  isLASA: Boolean
}

type GetMeetingPlatformChatLink {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  chatLink: String
  chatErrors: [ChatError!]!
}

type Group implements Node {
  id: ID!
  name: String!
  permissions: [Permission]
  groupConfiguration: GroupConfiguration
  users: [User]
  userCanManage: Boolean!
}

type GroupConfiguration {
  keycloakGroupId: String
  groupType: AppTypes
  isEditable: Boolean
  isGlobal: Boolean
  vendor: Vendor
}

input GroupConfigurationInput {
  vendor: ID
  groupType: AppTypes!
  isEditable: Boolean
  isGlobal: Boolean
}

input GroupConfigurationUpdateInput {
  isEditable: Boolean
}

type GroupCountableConnection {
  pageInfo: PageInfo!
  edges: [GroupCountableEdge!]!
  totalCount: Int
}

type GroupCountableEdge {
  node: Group!
  cursor: String!
}

type GuidedCareHealthProgram implements H_Node {
  allowProactiveFacilityVisits: Boolean
  allowProactiveHomeVisits: Boolean
  allowProactiveVirtualVisits: Boolean
  allowReactiveFacilityVisits: Boolean
  allowReactiveHomeVisits: Boolean
  allowReactiveVirtualVisits: Boolean
  createdBy: String
  createdDate: Instant
  description: String
  guidedCareHealthProgramMemberLists: [HealthProgramMemberList]
  guidedCareHealthProgramTemplate: HealthProgramTemplate
  guidedCareType: GuidedCareType
  id: ID!
  insuranceNetworks: [InsuranceNetwork]
  isActive: Boolean
  lastModifiedDate: Instant
  minNumberOfProgramServicePerYear: [ServiceOfGuidedCareHealthProgram]
  minimumNumberOfProactiveFacilityVisits: Int
  minimumNumberOfProactiveHomeVisits: Int
  minimumNumberOfProactiveVirtualVisits: Int
  minimumNumberOfReactiveFacilityVisits: Int
  minimumNumberOfReactiveHomeVisits: Int
  minimumNumberOfReactiveVirtualVisits: Int
  name: String
  payer: Payer
  price: Int
  teamMembers: [GuidedCareProgramTeamMember]
}

type GuidedCareHealthProgramCountableConnection {
  edges: [GuidedCareHealthProgramCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type GuidedCareHealthProgramCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: GuidedCareHealthProgram!
}

type GuidedCareHealthProgramCRUD {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  guidedCareHealthProgram: GuidedCareHealthProgram
  guidedCareHealthProgramErrors: [H_EntityError!]!
}

input GuidedCareHealthProgramFilter {
  payerId: ID
  providerId: ID
  templateId: ID
}

input GuidedCareHealthProgramInput {
  allowProactiveFacilityVisits: Boolean
  allowProactiveHomeVisits: Boolean
  allowProactiveVirtualVisits: Boolean
  allowReactiveFacilityVisits: Boolean
  allowReactiveHomeVisits: Boolean
  allowReactiveVirtualVisits: Boolean
  description: String
  guidedCareHealthProgramMemberLists: [ID]
  guidedCareType: GuidedCareType
  insuranceNetworks: [ID]
  isActive: Boolean
  minNumberOfProgramServicePerYear: [ServiceOfGuidedCareHealthProgramInput]
  name: String!
  payerId: ID
  price: Int
  teamMembers: [GuidedCareProgramTeamMemberInput]
  templateName: String!
}

input GuidedCarePatientTeamEnrollmentInput {
  teamId: ID!
}

type GuidedCareProgramTeamMember implements H_Node {
  id: ID!
  isBackupPersonMandatory: Boolean
  isKeyTeamMember: Boolean
  isLicencedHealthProfessional: Boolean
  isMandatory: Boolean
  minimumNumberOfProactiveFacilityVisits: Int
  minimumNumberOfProactiveHomeVisits: Int
  minimumNumberOfProactiveVirtualVisits: Int
  minimumNumberOfReactiveFacilityVisits: Int
  minimumNumberOfReactiveHomeVisits: Int
  minimumNumberOfReactiveVirtualVisits: Int
  position: TeamMemberPosition
  specialization: String
  templateTeamMember: TemplateTeamMember
}

input GuidedCareProgramTeamMemberInput {
  id: ID
  isBackupPersonMandatory: Boolean
  isKeyTeamMember: Boolean
  isLicencedHealthProfessional: Boolean
  isMandatory: Boolean
  minimumNumberOfProactiveFacilityVisits: Int
  minimumNumberOfProactiveHomeVisits: Int
  minimumNumberOfProactiveVirtualVisits: Int
  minimumNumberOfReactiveFacilityVisits: Int
  minimumNumberOfReactiveHomeVisits: Int
  minimumNumberOfReactiveVirtualVisits: Int
  position: TeamMemberPosition
  specialization: String
  templateTeamMember: TemplateTeamMemberInput
}

enum GuidedCareType {
  CHRONIC
  PRIMARY
}

input H_DateTimeRangeInput {
  """
  Start date.
  """
  gte: Instant

  """
  End date.
  """
  lte: Instant
}

enum H_DayOfWeek {
  Friday
  Monday
  Saturday
  Sunday
  Thursday
  Tuesday
  Wednesday
}

type H_EntityError {
  """
  The error code.
  """
  code: H_EntityErrorCode!

  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String
}

enum H_EntityErrorCode {
  ALREADY_EXISTS
  APPOINTMENT_OVERLAP
  DUPLICATED_INPUT_ITEM
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

"""
Represents an error in the input of a mutation.
"""
type H_Error {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String
}

scalar H_Float

scalar H_FloatNotNegative

enum H_Gender {
  FEMALE
  MALE
}

input H_LocationInput {
  """
  Latitude Value.
  """
  lat: H_Float!

  """
  Longitude Value .
  """
  lng: H_Float!
}

type H_LocationType {
  lat: H_Float
  lng: H_Float
}

scalar H_Long

"""
Represents amount of money in specific currency.
"""
type H_Money {
  """
  Amount of money.
  """
  amount: H_Float!

  """
  Currency code.
  """
  currency: String!
}

"""
An object with an ID
"""
interface H_Node {
  """
  The ID of the object.
  """
  id: ID!
}

enum H_OrderDirection {
  """
  Specifies an ascending sort order.
  """
  ASC

  """
  Specifies a descending sort order.
  """
  DESC
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type H_PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

input H_PriceRangeInput {
  """
  Price greater than or equal to.
  """
  gte: H_FloatNotNegative

  """
  Price less than or equal to.
  """
  lte: H_FloatNotNegative
}

enum H_ReportingPeriod {
  LAST_7_DAYS
  THIS_MONTH
  TODAY
}

input H_SiteSettingsInput {
  appointmentReminderTime: Int
  doctorVisitAcceptanceTimeout: Int
  healthProgramVisitWaitTimeBeforeCall: Int
  messengerCallMinimumDuration: Int
}

type HandleOrderVendorAcceptTimeout {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  success: Boolean
  orderErrors: [OrderError!]!
}

type HealthChannel implements H_Node {
  averageRating: H_Float
  category: HealthChannelCategory
  coverImage: String
  created: Instant
  description: String
  followers(
    after: String
    before: String
    first: Int
    last: Int
  ): HealthChannelFollowerCountableConnection
  followersCount: Int
  healthChannelFollowers: [HealthChannelFollower]
  healthChannelRatings: [HealthChannelRating]
  id: ID!
  isFollowing: Boolean
  labels: [String]
  modified: Instant
  name: String
  published: Boolean
  ratingsSum: H_Float
  subscriptionType: HealthChannelSubscriptionType
  totalRatings: Int
  url: String
}

type HealthChannelCategory implements H_Node {
  created: Instant
  healthChannels(
    after: String
    before: String
    first: Int
    last: Int
  ): HealthChannelCountableConnection
  id: ID!
  modified: Instant
  name: String
}

type HealthChannelCategoryCountableConnection {
  edges: [HealthChannelCategoryCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type HealthChannelCategoryCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: HealthChannelCategory!
}

"""
CRUD a new health channel category.
"""
type HealthChannelCategoryCRUD {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  healthChannelCategory: HealthChannelCategory
  healthChannelErrors: [H_EntityError!]!
}

input HealthChannelCategoryInput {
  """
  Health Channel Category Name
  """
  name: String!
}

type HealthChannelCountableConnection {
  edges: [HealthChannelCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type HealthChannelCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: HealthChannel!
}

"""
CRUD a new health channel.
"""
type HealthChannelCRUD {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  healthChannel: HealthChannel
  healthChannelErrors: [H_EntityError!]!
}

input HealthChannelFilterInput {
  categories: [ID]
  consumers: [ID]
  published: Boolean
  subscriptionType: [HealthChannelSubscriptionType]
}

type HealthChannelFollower implements H_Node {
  channel: HealthChannel
  consumerId: Int
  created: Instant
  id: ID!
  modified: Instant
}

type HealthChannelFollowerCountableConnection {
  edges: [HealthChannelFollowerCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type HealthChannelFollowerCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: HealthChannelFollower!
}

input HealthChannelFollowerFilterInput {
  channels: [ID]
}

input HealthChannelInput {
  category: ID
  coverImage: Upload
  description: String
  labels: [String!]
  name: String
  published: Boolean
  subscriptionType: HealthChannelSubscriptionType
  url: String
}

type HealthChannelRating implements H_Node {
  comment: String
  consumerId: Int
  healthChannel: HealthChannel
  id: ID!
  rating: H_Float
}

input HealthChannelRatingInput {
  """
  ID of Health Channel to be rated
  """
  channel: ID!

  """
  Feedback on the user's rating for the health channel
  """
  comment: String

  """
  The rating provided by the user (from 1 to 5)
  """
  rating: H_FloatNotNegative!
}

enum HealthChannelSubscriptionType {
  FREE
  PAID
}

type HealthCondition implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  name: String!
  specializations: [Specialization]
}

type HealthConditionCountableConnection {
  pageInfo: PageInfo!
  edges: [HealthConditionCountableEdge!]!
  totalCount: Int
}

type HealthConditionCountableEdge {
  node: HealthCondition!
  cursor: String!
}

input HealthConditionFilterInput {
  name: String
  name_Icontains: String
  specializations: [ID]
}

type HealthProgram implements H_Node {
  backGroundImage: String
  baselineAvailabilityHours: Int
  benefitGroups: [BenefitGroupComplex]
  callQualityRatingFactors: String
  careFor: [String]
  code: String
  copay: Boolean
  copayAmount: H_Float
  copayPercentage: H_Float
  created: Instant
  createdByUser: User
  currency: String
  description: String
  exclusionOptions: [ExclusionOption]
  healthProgramMemberLists(
    after: String
    before: String
    first: Int
    last: Int
  ): HealthProgramMemberListCountableConnection
  healthProgramNetworks(
    after: String
    before: String
    first: Int
    last: Int
  ): HealthProgramNetworkCountableConnection
  icon: String
  id: ID!
  images: [String]
  insuranceNetworks(
    after: String
    before: String
    first: Int
    last: Int
  ): InsuranceNetworkCountableConnection
  isActive: Boolean
  isSubscribed: Boolean
  mainSpecializationsRateFactors: String
  modified: Instant
  name: String
  operatorProfitSharePercentage: H_Float
  payer: Payer
  platformProfitSharePercentage: H_Float
  pointsDuringNormalDemand: H_Float
  pointsDuringUrgentDemand: H_Float
  prescriptionEnabled: Boolean
  price: H_Money
  priceAmount: H_Float
  referralsToSpecialistsEnabled: Boolean
  requiresIdValidation: Boolean
  service: String
  serviceType: HealthProgramServiceType
  specializations: [HealthProgramSpecialization]
  subscriptionPeriod: HealthProgramSubscriptionPeriod
  subscriptions(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): HealthProgramUserSubscriptionCountableConnection
  targetGroup: String
  totalMembers: Int
  type: HealthProgramType
  unattendedCallPenaltyFactor: H_Float
  vendorProfitSharePercentage: H_Float
}

input HealthProgramBenefitGroupExtraBenefitInput {
  extraBenefit: ID!
  healthChannels: [ID]!
}

input HealthProgramBenefitGroupInput {
  benefitGroup: ID!
  extraBenefits: [HealthProgramBenefitGroupExtraBenefitInput]
  optionsValues: [HealthProgramBenefitGroupOptionValueInput]!
}

input HealthProgramBenefitGroupOptionValueInput {
  name: String
  option: ID!
  value: H_FloatNotNegative!
}

enum HealthProgramBenefitOptionCode {
  MAX_OF_FREE_AUDIO_VIDEO_CALLS
  NUMBER_OF_PROACTIVE_AUDIO_VIDEO_CALLS
  NUMBER_OF_REACTIVE_AUDIO_VIDEO_CALLS
  PATIENT_SHARE_PERCENTAGE
  PROACTIVE_AT_HOME_PLANNED_HEALTH_SERVICES
  PROACTIVE_IN_PERSON_PLANNED_HEALTH_SERVICES
  REACTIVE_AT_HOME_HEALTH_SERVICES
  REACTIVE_IN_PERSON_HEALTH_SERVICES
}

"""
CRUD a new Health Program Benefit Option
"""
type HealthProgramBenefitOptionCRUD {
  benefitOption: BenefitOption

  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  healthProgramErrors: [H_EntityError!]!
}

input HealthProgramBenefitOptionInput {
  careType: CareType
  code: HealthProgramBenefitOptionCode
  description: String
  name: String
  type: HealthProgramOptionType
}

type HealthProgramCallsPerVendorResponse {
  numberOfCalls: Int
  vendor: Vendor
}

type HealthProgramCallsPerVendorResponseConnection {
  edges: [HealthProgramCallsPerVendorResponseCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type HealthProgramCallsPerVendorResponseCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  node: HealthProgramCallsPerVendorResponse!
}

type HealthProgramCountableConnection {
  edges: [HealthProgramCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type HealthProgramCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: HealthProgram!
}

"""
CRUD a new Health Program
"""
type HealthProgramCRUD {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  healthProgram: HealthProgram
  healthProgramErrors: [H_EntityError!]
}

input HealthProgramExclusionOptionInput {
  exclusionOption: ID!
}

input HealthProgramFilterInput {
  benefitGroups: [ID]
  benefitOptions: [ID]
  code: String
  description: String
  description_Icontains: String
  exclusionOptions: [ID]
  healthProgramMemberLists: [ID]
  healthProgramNetworks: [ID]
  insuranceNetworks: [ID]
  isActive: Boolean
  isSubscribed: Boolean
  name: String
  name_Icontains: String
  prescriptionEnabled: Boolean
  price: H_PriceRangeInput
  specializations: [ID]
  targetGroup: String
  targetGroup_Icontains: String
}

input HealthProgramInput {
  """
  health program back ground image
  """
  backGroundImage: Upload
  baselineAvailabilityHours: Int
  benefitGroups: [HealthProgramBenefitGroupInput]
  callQualityRatingFactors: String
  careFor: [String]
  code: String!
  copay: Boolean
  copayAmount: H_FloatNotNegative
  copayPercentage: H_FloatNotNegative
  description: String
  exclusionOptions: [HealthProgramExclusionOptionInput]
  healthProgramMemberLists: [ID]
  healthProgramNetworks: [ID]

  """
  health program icon
  """
  icon: Upload
  images: [String]
  insuranceNetworks: [ID]
  isActive: Boolean
  mainSpecializationsRateFactors: String
  name: StringNotBlank!
  operatorProfitSharePercentage: H_FloatNotNegative
  payerId: ID
  platformProfitSharePercentage: H_FloatNotNegative
  pointsDuringNormalDemand: H_FloatNotNegative
  pointsDuringUrgentDemand: H_FloatNotNegative
  prescriptionEnabled: Boolean
  priceAmount: H_FloatNotNegative
  referralsToSpecialistsEnabled: Boolean
  requiresIdValidation: Boolean
  service: String
  serviceType: HealthProgramServiceType!
  specializations: [String]
  subscriptionPeriod: HealthProgramSubscriptionPeriod!
  targetGroup: String
  type: HealthProgramType!
  unattendedCallPenaltyFactor: H_FloatNotNegative
  vendorProfitSharePercentage: H_FloatNotNegative
}

type HealthProgramMember implements H_Node {
  bmi: H_FloatNotNegative
  chronicDiseases: [String!]
  coverageBy: CoverageByType
  created: Instant
  createdByUser: User
  dateOfBirth: InstantNoTime
  disabilities: [String!]
  email: String
  firstName: String
  gender: H_Gender
  healthProgramMemberLists(
    after: String
    before: String
    first: Int
    last: Int
  ): HealthProgramMemberListCountableConnection
  heightInCM: H_FloatNotNegative
  id: ID!
  insuranceCompanyId: String
  insuranceCompanyLicenseNumber: String
  insuranceId: String
  insurancePolicyNumber: String
  lastName: String
  membershipEnd: Instant
  membershipStart: Instant
  modified: Instant
  nationalId: String
  patient: Patient
  payer: Payer
  phone: String
  sehacityId: String
  user: User
  weightInKG: H_FloatNotNegative
}

type HealthProgramMemberBodyComposition implements H_Node {
  bmi: H_FloatNotNegative
  created: Instant
  heightInCM: H_FloatNotNegative
  id: ID!
  member: HealthProgramMember
  modified: Instant
  patient: Patient
  user: User
  weightInKG: H_FloatNotNegative
}

type HealthProgramMemberBodyCompositionBasic {
  bmi: H_FloatNotNegative
  heightInCM: H_FloatNotNegative
  weightInKG: H_FloatNotNegative
}

type HealthProgramMemberBodyCompositionCountableConnection {
  edges: [HealthProgramMemberBodyCompositionCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type HealthProgramMemberBodyCompositionCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: HealthProgramMemberBodyComposition!
}

input HealthProgramMemberBodyCompositionFilterInput {
  healthProgramMembers: [ID]
  ids: [ID]
  patients: [ID]
  users: [ID]
}

input HealthProgramMemberBodyCompositionInput {
  heightInCM: H_FloatNotNegative
  weightInKG: H_FloatNotNegative
}

type HealthProgramMemberCountableConnection {
  edges: [HealthProgramMemberCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type HealthProgramMemberCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: HealthProgramMember!
}

type HealthProgramMemberCRUD {
  details: String
  entity: HealthProgramMember
  entityErrors: [H_EntityError!]!
  errors: [H_Error!]!
}

input HealthProgramMemberFilterInput {
  healthProgramMemberLists: [ID]
  ids: [ID]
  insuranceCompanyIds: [ID]
  insuranceId: String
  insurancePolicyNumber: String
  isActive: Boolean
  nationalId: String
  patients: [ID]
  teamId: ID
  userId: ID
}

input HealthProgramMemberInput {
  chronicDiseases: [String!]
  coverageBy: CoverageByType!
  dateOfBirth: InstantNotFuture
  disabilities: [String!]
  email: String
  firstName: StringNotBlank!
  gender: H_Gender
  healthProgramMemberLists: [ID]
  heightInCM: H_FloatNotNegative
  insuranceCompanyId: ID
  insuranceCompanyLicenseNumber: String
  insuranceId: StringNotBlank!
  insurancePolicyNumber: String
  lastName: StringNotBlank!
  membershipEnd: Instant!
  membershipStart: Instant!
  nationalId: String!
  phone: String!
  sehacityId: String
  weightInKG: H_FloatNotNegative
}

type HealthProgramMemberList implements H_Node {
  created: Instant
  createdByUser: User
  description: String
  healthProgramMembers(
    after: String
    before: String
    first: Int
    last: Int
  ): HealthProgramMemberCountableConnection
  id: ID!
  isActive: Boolean
  modified: Instant
  name: String
  payer: Payer
}

type HealthProgramMemberListCountableConnection {
  edges: [HealthProgramMemberListCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type HealthProgramMemberListCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: HealthProgramMemberList!
}

type HealthProgramMemberListCRUD {
  entity: HealthProgramMemberList
  entityErrors: [H_EntityError!]!
  errors: [H_Error!]!
}

input HealthProgramMemberListFilterInput {
  healthPrograms: [ID]
  ids: [ID]
  isActive: Boolean
  members: [ID]
  name: String
  name_Icontains: String
}

input HealthProgramMemberListInput {
  description: String
  isActive: Boolean
  name: String
  payerId: ID
}

enum HealthProgramMemberListSortingField {
  CREATED
  IS_ACTIVE
  NAME
  UPDATED
}

input HealthProgramMemberListSortingInput {
  direction: H_OrderDirection!
  field: HealthProgramMemberListSortingField
}

type HealthProgramNetwork implements H_Node {
  created: Instant
  createdByUser: User
  healthProgramNetworkProviders(
    after: String
    before: String
    first: Int
    last: Int
  ): HealthProgramNetworkProviderCountableConnection
  id: ID!
  isActive: Boolean
  modified: Instant
  name: String
  payer: Payer
  providerCount: Int
}

type HealthProgramNetworkCountableConnection {
  edges: [HealthProgramNetworkCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type HealthProgramNetworkCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: HealthProgramNetwork!
}

type HealthProgramNetworkCRUD {
  entity: HealthProgramNetwork
  entityErrors: [H_EntityError!]!
  errors: [H_Error!]!
}

input HealthProgramNetworkFilterInput {
  healthPrograms: [ID]
  ids: [ID]
  isActive: Boolean
  name: String
  name_Icontains: String
  providers: [ID]
}

input HealthProgramNetworkInput {
  isActive: Boolean
  name: String
  payerId: ID
}

type HealthProgramNetworkProvider implements H_Node {
  created: Instant
  createdByUser: User
  healthProgramNetwork: HealthProgramNetwork
  healthProgramNetworkProviderProfessionals(
    after: String
    before: String
    filter: HealthProgramNetworkProviderProfessionalFilterInput
    first: Int
    last: Int
  ): HealthProgramNetworkProviderProfessionalCountableConnection
  id: ID!
  isActive: Boolean
  modified: Instant
  provider: Vendor
  services: [String]
  virtualCallEnabled: Boolean
}

type HealthProgramNetworkProviderCountableConnection {
  edges: [HealthProgramNetworkProviderCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type HealthProgramNetworkProviderCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: HealthProgramNetworkProvider!
}

type HealthProgramNetworkProviderCRUD {
  entity: HealthProgramNetworkProvider
  entityErrors: [H_EntityError!]!
  errors: [H_Error!]!
}

input HealthProgramNetworkProviderFilterInput {
  healthProgramNetworks: [ID]
  ids: [ID]
  isActive: Boolean
  professionals: [ID]
  providers: [ID]
  services: [String]
  virtualCallEnabled: Boolean
}

input HealthProgramNetworkProviderInput {
  healthProgramNetwork: ID
  isActive: Boolean
  providerId: ID
  services: [String]
  virtualCallEnabled: Boolean
}

type HealthProgramNetworkProviderProfessional implements H_Node {
  created: Instant
  createdByUser: User
  healthProgramNetworkProvider: HealthProgramNetworkProvider
  id: ID!
  modified: Instant
  overridingServices: [String]
  overridingVirtualCallEnabled: Boolean
  professional: Doctor
}

type HealthProgramNetworkProviderProfessionalCountableConnection {
  edges: [HealthProgramNetworkProviderProfessionalCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type HealthProgramNetworkProviderProfessionalCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: HealthProgramNetworkProviderProfessional!
}

type HealthProgramNetworkProviderProfessionalCRUD {
  entity: HealthProgramNetworkProviderProfessional
  entityErrors: [H_EntityError!]!
  errors: [H_Error!]!
}

input HealthProgramNetworkProviderProfessionalFilterInput {
  healthProgramNetworkProviders: [ID]
  healthProgramNetworks: [ID]
  ids: [ID]
  overridingServices: [String]
  overridingVirtualCallEnabled: Boolean
  professionals: [ID]
  providers: [ID]
}

input HealthProgramNetworkProviderProfessionalInput {
  healthProgramNetworkProvider: ID
  overridingServices: [String]
  overridingVirtualCallEnabled: Boolean
  professionalId: ID
}

enum HealthProgramNetworkSortingField {
  CODE
  CREATED
  IS_ACTIVE
  NAME
  UPDATED
}

input HealthProgramNetworkSortingInput {
  direction: H_OrderDirection!
  field: HealthProgramNetworkSortingField
}

enum HealthProgramOptionType {
  INCLUDE
  LIMITATION
}

input HealthProgramPointsFilterInput {
  doctorId: String
  healthProgramId: Int
  month: Int!
  vendorId: String
  year: Int!
}

enum HealthProgramServiceType {
  FULL_DAY
  ON_DEMAND
}

enum HealthProgramSortingField {
  CODE
  CREATED
  IS_ACTIVE
  NAME
  SERVICE_TYPE
  TYPE
  UPDATED
}

input HealthProgramSortingInput {
  direction: H_OrderDirection!
  field: HealthProgramSortingField
}

type HealthProgramSpecialization implements H_Node {
  created: Instant
  id: ID!
  modified: Instant
  program: HealthProgram
  specialization: T_Specialization
}

"""
Subscribe user to Health Program
"""
type HealthProgramSubscribe {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  healthProgramErrors: [H_EntityError!]!
  healthProgramUserSubscription: HealthProgramUserSubscription
}

input HealthProgramSubscribeInput {
  insuranceMemberId: String
  period: HealthProgramSubscriptionPeriod!

  """
  program id to subscribe to
  """
  program: ID
}

enum HealthProgramSubscriptionPeriod {
  MONTHLY
  YEARLY
}

type HealthProgramTemplate implements H_Node {
  active: Boolean
  allowProactiveFacilityVisits: Boolean
  allowProactiveHomeVisits: Boolean
  allowProactiveVirtualVisits: Boolean
  allowReactiveFacilityVisits: Boolean
  allowReactiveHomeVisits: Boolean
  allowReactiveVirtualVisits: Boolean
  code: String
  createdBy: String
  createdDate: Instant
  guidedCareType: GuidedCareType
  id: ID!
  lastModifiedDate: Instant
  minNumberOfServicePerYear: [ServiceOfHealthProgramTemplate]
  minimumNumberOfProactiveFacilityVisits: Int
  minimumNumberOfProactiveHomeVisits: Int
  minimumNumberOfProactiveVirtualVisits: Int
  minimumNumberOfReactiveFacilityVisits: Int
  minimumNumberOfReactiveHomeVisits: Int
  minimumNumberOfReactiveVirtualVisits: Int
  name: String
  templateTeamMembers: [TemplateTeamMember]
  version: Int
}

type HealthProgramTemplateCountableConnection {
  edges: [HealthProgramTemplateCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type HealthProgramTemplateCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: HealthProgramTemplate!
}

"""
CRUD a new Health Program Template
"""
type HealthProgramTemplateCRUD {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  healthProgramTemplate: HealthProgramTemplate
  healthProgramTemplateErrors: [H_EntityError!]!
}

input HealthProgramTemplateFilterInput {
  guidedCareType: GuidedCareType
}

input HealthProgramTemplateInput {
  active: Boolean
  allowProactiveFacilityVisits: Boolean
  allowProactiveHomeVisits: Boolean
  allowProactiveVirtualVisits: Boolean
  allowReactiveFacilityVisits: Boolean
  allowReactiveHomeVisits: Boolean
  allowReactiveVirtualVisits: Boolean
  code: String
  guidedCareType: GuidedCareType
  minNumberOfServicePerYear: [ServiceOfHealthProgramTemplateInput]
  name: String!
  templateTeamMembers: [TemplateTeamMemberInput]
  version: Int
}

type HealthProgramTotalPointsTrackingConnection {
  doctorId: Int
  edges: [HealthProgramTotalPointsTrackingCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
  totalPoints: Int
}

type HealthProgramTotalPointsTrackingCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  node: HealthProgramTotalPointsTrackingResponse!
}

type HealthProgramTotalPointsTrackingResponse {
  doctor: Doctor
  healthProgramId: String
  healthProgramName: String
  percentage: Int
  totalPoints: Int
  vendor: Vendor
}

enum HealthProgramType {
  GUIDED_CARE
  IMMEDIATE_CARE
  SCHEDULED_CARE
}

type HealthProgramUnSubscribe {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  healthProgramErrors: [H_EntityError!]!
  success: Boolean
}

input HealthProgramUpdateInput {
  """
  health program back ground image
  """
  backGroundImage: Upload
  baselineAvailabilityHours: Int
  benefitGroups: [HealthProgramBenefitGroupInput]
  callQualityRatingFactors: String
  careFor: [String]
  code: String!
  copay: Boolean
  copayAmount: H_FloatNotNegative
  copayPercentage: H_FloatNotNegative
  description: String
  exclusionOptions: [HealthProgramExclusionOptionInput]
  healthProgramMemberLists: [ID]
  healthProgramNetworks: [ID]

  """
  health program icon
  """
  icon: Upload
  images: [String]
  insuranceNetworks: [ID]
  isActive: Boolean
  mainSpecializationsRateFactors: String
  name: StringNotBlank!
  operatorProfitSharePercentage: H_FloatNotNegative
  payerId: ID
  platformProfitSharePercentage: H_FloatNotNegative
  pointsDuringNormalDemand: H_FloatNotNegative
  pointsDuringUrgentDemand: H_FloatNotNegative
  prescriptionEnabled: Boolean
  priceAmount: H_FloatNotNegative
  referralsToSpecialistsEnabled: Boolean
  requiresIdValidation: Boolean
  service: String
  serviceType: HealthProgramServiceType!
  specializations: [String]
  subscriptionPeriod: HealthProgramSubscriptionPeriod!
  targetGroup: String
  unattendedCallPenaltyFactor: H_FloatNotNegative
  vendorProfitSharePercentage: H_FloatNotNegative
}

type HealthProgramUserSubscription implements H_Node {
  consumerId: Int
  created: Instant
  currency: String
  id: ID!
  insuranceMemberId: String
  isActive: Boolean
  modified: Instant
  period: Int
  program: HealthProgram
  total: H_Money
  totalAmount: H_Float
  user: User
  validTill: Instant
  visits(
    after: String
    before: String
    first: Int
    last: Int
  ): VisitCountableConnection
}

type HealthProgramUserSubscriptionCountableConnection {
  edges: [HealthProgramUserSubscriptionCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type HealthProgramUserSubscriptionCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: HealthProgramUserSubscription!
}

input HealthProgramUserSubscriptionFilterInput {
  consumers: [ID]
  healthProgram: [ID]
  ids: [ID]
  isActive: Boolean
  users: [ID]
}

input HealthProgramVendorPointsFilterInput {
  healthProgramId: Int
  month: Int!
  vendorId: String
  year: Int!
}

type HealthProgramVendorTotalPointsTrackingConnection {
  edges: [HealthProgramVendorTotalPointsTrackingCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type HealthProgramVendorTotalPointsTrackingCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  node: HealthProgramVendorTotalPointsTrackingResponse!
}

type HealthProgramVendorTotalPointsTrackingResponse {
  healthProgramId: String
  healthProgramName: String
  percentage: Int
  profitShare: H_Float
  totalPoints: Int
  vendor: Vendor
}

type Image {
  url: String!
  alt: String
}

scalar Instant

scalar InstantNotFuture

scalar InstantNoTime

type InsuranceNetwork implements H_Node {
  created: Instant
  facilities(
    after: String
    before: String
    first: Int
    last: Int
  ): InsuranceNetworkFacilityCountableConnection
  healthPrograms(
    after: String
    before: String
    first: Int
    last: Int
  ): HealthProgramCountableConnection
  id: ID!
  isActive: Boolean
  modified: Instant
  name: String
  payer: Payer
}

type InsuranceNetworkCountableConnection {
  edges: [InsuranceNetworkCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type InsuranceNetworkCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: InsuranceNetwork!
}

"""
CRUD a new InsuranceNetwork
"""
type InsuranceNetworkCRUD {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  insuranceNetwork: InsuranceNetwork
  insuranceNetworkErrors: [H_EntityError!]!
}

type InsuranceNetworkFacility implements H_Node {
  created: Instant
  facility: Vendor
  facilityId: Int
  id: ID!
  insuranceNetwork: InsuranceNetwork
  modified: Instant
}

type InsuranceNetworkFacilityCountableConnection {
  edges: [InsuranceNetworkFacilityCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type InsuranceNetworkFacilityCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: InsuranceNetworkFacility!
}

input InsuranceNetworkFacilityFilterInput {
  facilities: [ID]
  insuranceNetworks: [ID]
  insurances: [ID]
}

input InsuranceNetworkFilterInput {
  facilities: [ID]
  healthPrograms: [ID]
  isActive: Boolean
  name: String
  name_Icontains: String
  payer: [ID]
}

input InsuranceNetworkInput {
  facilities: [ID]

  """
  is InsuranceNetwork Active
  """
  isActive: Boolean

  """
  InsuranceNetwork Name
  """
  name: String

  """
  Payer ID.
  """
  payerId: ID
}

enum InsuranceSortField {
  """
  Sort by creation date.
  """
  CREATION_DATE

  """
  Sort by name.
  """
  NAME
}

input InsuranceSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: H_OrderDirection!

  """
  Sort insurance by the selected field.
  """
  field: InsuranceSortField!
}

type Integration_PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum IntegrationErrorCodes {
  INTEGRATION_ACTIVITY_CODE_NOT_FOUND
  INTEGRATION_CLINICIAN_CREDENTIALS_NOT_FOUND
  INTEGRATION_DATE_OF_BIRTH_NOT_DEFINED
  INTEGRATION_DUPLICATE_BRANCH_CREDENTIALS
  INTEGRATION_ERX_VALIDATION
  INTEGRATION_INVALID_OR_EXPIRED_TOKEN
  INTEGRATION_MEMBER_NOT_ACTIVE
  INTEGRATION_NONE_NEGATIVE_PAGE_SIZE
  INTEGRATION_NULL_POINTER
  INTEGRATION_OPERATION_NOT_ALLOWED
  INTEGRATION_PATIENT_NOT_FOUND
  INTEGRATION_PAYER_LICENSE_NOT_DEFINED
  INTEGRATION_PERMISSION_DENIED
  INTEGRATION_UNKNOWN
  INTEGRATION_UNKNOWN_TYPE
  INVALID_CLINICIAN_CREDENTIALS
}

type IntegrationGraphqlError {
  code: IntegrationErrorCodes
  errorType: ErrorType
  field: String
  message: String
}

enum IntegrationOrderDirection {
  ASC
  DESC
}

input IntRangeInput {
  gte: Int
  lte: Int
}

type InvoiceError {
  field: String
  message: String
  code: InvoiceErrorCode!
}

enum InvoiceErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
}

type IsPrescriptionEligibleForFreeDelivery {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  isFreeDeliveryEligible: Boolean
  prescriptionErrors: [PrescriptionError!]!
}

scalar JSONString

type KeyCloakPermission implements Node {
  keycloakRoleId: String
  isStaff: Boolean
  isVendor: Boolean
  isClient: Boolean
  isAggregator: Boolean!
  id: ID!
}

input KeycloakPermissionConfigurationInput {
  isStaff: Boolean
  isVendor: Boolean
  isClient: Boolean
  isAggregator: Boolean
  keycloakRoleId: String
}

type KeycloakPermissionConfigurationUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  keyCloakPermission: KeyCloakPermission
  permissionGroupErrors: [PermissionGroupError!]!
}

type Lab implements H_Node {
  chronicDisease: String
  chronicDiseaseSeverity: String
  code: String
  created: Instant
  id: ID!
  modified: Instant
  result: String
  resultReceived: Boolean
  suggestedGuidedPrograms: [GuidedCareHealthProgram]
  visit: Visit
  display: String
}

type LabCRUD {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  lab: Lab
  labErrors: [H_EntityError!]!
}

input LabInput {
  code: String
  visitId: ID!
}

input LabResultInput {
  code: String!
  result: String
  visitId: ID!
}

enum LanguageCodeEnum {
  AR
  AZ
  BG
  BN
  CA
  CS
  DA
  DE
  EL
  EN
  ES
  ES_CO
  ET
  FA
  FI
  FR
  HI
  HU
  HY
  ID
  IS
  IT
  JA
  KO
  LT
  MN
  NB
  NL
  PL
  PT
  PT_BR
  RO
  RU
  SK
  SL
  SQ
  SR
  SV
  SW
  TA
  TH
  TR
  UK
  VI
  ZH_HANS
  ZH_HANT
}

type LanguageDisplay {
  code: LanguageCodeEnum!
  language: String!
}

input LocationInput {
  lng: Float!
  lat: Float!
}

type LocationType {
  lng: Float
  lat: Float
}

enum MaritalStatusesEnum {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

type MarkNotificationsAsSeen {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  updatedCount: Int
  accountErrors: [NotificationError!]!
}

type MedicalDeliveryEvent implements Node {
  id: ID!
  date: DateTime
  type: OrderEventsEnum
  user: User
}

type MedicalDeliveryRequest implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  deliveryType: MedicalDeliveryRequestDeliveryType!
  dropOffContactName: String
  dropOffPhoneNumber: String
  dropOffContactType: MedicalDeliveryRequestDropOffContactType!
  dropOffAddress: OrderAddress!
  temperature: String
  requiredDeliveryTime: Int
  cost: Money
  weight: Weight
  deliveryStatus: MedicalDeliveryRequestDeliveryStatus!
  status: MedicalDeliveryRequestStatus!
  description: String
  shippingPrice: TaxedMoney
  failReason: String
  carrierName: String
  totalOrderDistance: Float
  distanceGroup: String
  isSupportTicket: Boolean!
  events: [MedicalDeliveryEvent]
  branch: Branch
  number: String
}

type MedicalDeliveryRequestCountableConnection {
  pageInfo: PageInfo!
  edges: [MedicalDeliveryRequestCountableEdge!]!
  totalCount: Int
}

type MedicalDeliveryRequestCountableEdge {
  node: MedicalDeliveryRequest!
  cursor: String!
}

type MedicalDeliveryRequestCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  medicalDeliveryRequest: MedicalDeliveryRequest
  deliveryErrors: [DeliveryError!]!
}

enum MedicalDeliveryRequestDeliveryStatus {
  PENDING
  PICKED_BY_CONSUMER
  RETURNED
  CARRIER_ALLOCATED
  DRIVER_ACCEPTED_ORDER
  DRIVER_PICKED_UP_ORDER
  DRIVER_IS_ABOUT_TO_ARRIVE
  ORDER_IS_DELIVERED
  ORDER_IS_CANCELLED
  ORDER_IS_SUSPENDED
  ORDER_IS_RESUMED
  DELIVERY_TIMED_OUT
  FAILED
}

enum MedicalDeliveryRequestDeliveryType {
  SAME_DAY
  NEXT_DAY
  EXPRESS_DELIVERY
}

enum MedicalDeliveryRequestDropOffContactType {
  PERSON
  PHARMACY
}

input MedicalDeliveryRequestInput {
  branchId: ID!
  dropOffAddressInput: AddressInput!
  dropOffPhoneNumber: String
  dropOffContactName: String!
  temperature: String!
  requiredDeliveryTime: Int!
  cost: Decimal!
  weight: WeightScalar!
  description: String
  isSupportTicket: Boolean
}

enum MedicalDeliveryRequestStatus {
  WORKFLOW_OK
  WORKFLOW_FAILURE
}

type MedicalDeliveryRequestStatusChanged {
  order: MedicalDeliveryRequest
}

type MedicalDeliveryRequestStatusUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  deliveryErrors: [DeliveryError!]!
  medicalDeliveryRequest: MedicalDeliveryRequest
}

input MedicalDeliveryRequestStatusUpdateInput {
  deliveryStatus: OrderDeliveryStatusEnum!
  deliveryPrice: Float
  failReason: String
  carrierName: String
  totalOrderDistance: Float
  distanceGroup: String
}

enum MedicalDeliverySortField {
  NUMBER
  CREATION_DATE
  MODIFIED_DATE
}

input MedicalDeliverySortingInput {
  direction: OrderDirection!
  field: MedicalDeliverySortField!
}

input MedicalOrderDeliveryFilterInput {
  created: DateRangeInput
  deliveryStatus: [OrderDeliveryStatusEnum]
  modified: DateRangeInput
  branches: [ID]
  numbers: [String]
  isSupportTicket: Boolean
}

type Medication implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  code: String!
  quantity: Float!
  duration: String!
  unitId: Int
  refills: Int!
  routOfAdmin: String!
  instructions: String!
  arabicInstructions: String!
  startDate: String!
  roaArName: String
  roaEnName: String
  prescription: Prescription!
  type: String!
  lastDispenseDate: DateTime
  dispenseCount: Int!
  downloadAction: MedicationDownloadAction!
  downloadActionDate: DateTime!
  orderLines(
    before: String
    after: String
    first: Int
    last: Int
  ): OrderLineCountableConnection!
  remainingDaysToNextRefill: Int
  display: String
  genericDrugProperties: GenericDrugProperties
  tradeDrugs: [TradeDrug]
}

input MedicationAuthorizationStatusInput {
  tradeCode: String!
  status: String!
  rejectionReason: String
}

enum MedicationDownloadAction {
  ORIGINAL
  ADDED
  REMOVED
}

input MedicationFilterInput {
  canRefill: Boolean
}

input MedicationOrderLineInput {
  id: ID!
  tradeCode: String!
  quantity: Int!
}

type MedicationTradeDrugs {
  code: String!
  tradeDrugs: [TradeDrug]
}

type MeetingPlatformIdUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  result: String
  accountErrors: [AccountError!]!
}

type Message implements Node {
  id: ID!
  content: String
  created: DateTime!
  seenDate: DateTime
  sender: User!
  recipient: User
  branch: Branch!
  attachments: [Attachment]
  orderId: Int
  order: Order
}

input MessageAttachmentInput {
  sortOrder: Int!
  attachment: ID!
}

type MessageCountableConnection {
  pageInfo: PageInfo!
  edges: [MessageCountableEdge!]!
  totalCount: Int
}

type MessageCountableEdge {
  node: Message!
  cursor: String!
}

input MessageInput {
  content: String
  attachments: [MessageAttachmentInput]
  branch: ID
}

type MessageSent {
  message: Message
}

type Money {
  currency: String!
  amount: Float!
}

type MoneyRange {
  start: Money
  stop: Money
}

input MoveProductInput {
  productId: ID!
  sortOrder: Int
}

type Mutation {
  cancelBulkFile(fileId: ID!): BulkFile
  uploadBulkFile(
    code: BulkTemplateCode!
    entityID: ID
    fileName: String!
  ): BulkFile
  medicalDeliveryRequestCreate(
    input: MedicalDeliveryRequestInput!
  ): MedicalDeliveryRequestCreate
  medicalDeliveryRequestStatusUpdate(
    id: ID!
    input: MedicalDeliveryRequestStatusUpdateInput!
  ): MedicalDeliveryRequestStatusUpdate
  wishlistAddVendorProductVariant(
    vendorProductVariant: ID!
  ): WishlistAddVendorProductVariantMutation
  wishlistRemoveVendorProductVariant(
    vendorProductVariant: ID!
  ): WishlistRemoveVendorProductVariantMutation
  consumerWishlistDelete: ConsumerWishlistDelete
  earlyRefillReasonCreate(
    input: EarlyRefillReasonInput!
  ): EarlyRefillReasonCreate
  earlyRefillReasonUpdate(
    id: ID!
    input: EarlyRefillReasonInput!
  ): EarlyRefillReasonUpdate
  earlyRefillReasonDelete(id: ID!): EarlyRefillReasonDelete
  earlyRefillRequestCreate(
    input: EarlyRefillRequestInput!
  ): EarlyRefillRequestCreate
  validatePrescription(input: ValidatePrescriptionInput!): ValidatePrescription
  isPrescriptionEligibleForFreeDelivery(
    id: ID!
    input: FreeDeliveryEligibilityCheckInput!
  ): IsPrescriptionEligibleForFreeDelivery
  diagnosisPrediction(input: DiagnosisPredictionInput!): DiagnosisPrediction
  textSummary(input: TextSummaryInput!): TextSummary
  vendorInvoiceCreate(input: VendorInvoiceInput!): VendorInvoiceCreate
  vendorInvoiceUpdate(
    id: ID!
    input: VendorInvoiceUpdateInput!
  ): VendorInvoiceUpdate
  vendorMarkInvoiceAsPaid(id: ID!): VendorMarkInvoiceAsPaid
  siteSettingsUpdate(input: SiteSettingsInput!): SiteSettingsUpdate
  shippingPriceCreate(input: ShippingPriceInput!): ShippingPriceCreate
  shippingPriceDelete(id: ID!): ShippingPriceDelete
  shippingPriceBulkDelete(ids: [ID]!): ShippingPriceBulkDelete
  shippingPriceUpdate(id: ID!, input: ShippingPriceInput!): ShippingPriceUpdate
  shippingPriceTranslate(
    id: ID!
    input: NameTranslationInput!
    languageCode: LanguageCodeEnum!
  ): ShippingPriceTranslate
  shippingZoneCreate(input: ShippingZoneCreateInput!): ShippingZoneCreate
  shippingZoneDelete(id: ID!): ShippingZoneDelete
  shippingZoneBulkDelete(ids: [ID]!): ShippingZoneBulkDelete
  shippingZoneUpdate(
    id: ID!
    input: ShippingZoneUpdateInput!
  ): ShippingZoneUpdate
  pricingRuleCreate(input: PricingRuleInput!): PricingRuleCreate
  pricingRuleUpdate(id: ID!, input: PricingRuleInput!): PricingRuleUpdate
  pricingRuleDelete(id: ID!): PricingRuleDelete
  attributeCreate(input: AttributeCreateInput!): AttributeCreate
  attributeDelete(id: ID!): AttributeDelete
  attributeBulkDelete(ids: [ID]!): AttributeBulkDelete
  attributeAssign(
    operations: [AttributeAssignInput]!
    productTypeId: ID!
  ): AttributeAssign
  attributeUnassign(attributeIds: [ID]!, productTypeId: ID!): AttributeUnassign
  attributeUpdate(id: ID!, input: AttributeUpdateInput!): AttributeUpdate
  attributeTranslate(
    id: ID!
    input: NameTranslationInput!
    languageCode: LanguageCodeEnum!
  ): AttributeTranslate
  attributeValueCreate(
    attribute: ID!
    input: AttributeValueCreateInput!
  ): AttributeValueCreate
  attributeValueDelete(id: ID!): AttributeValueDelete
  attributeValueBulkDelete(ids: [ID]!): AttributeValueBulkDelete
  attributeValueUpdate(
    id: ID!
    input: AttributeValueCreateInput!
  ): AttributeValueUpdate
  attributeValueTranslate(
    id: ID!
    input: NameTranslationInput!
    languageCode: LanguageCodeEnum!
  ): AttributeValueTranslate
  attributeReorderValues(
    attributeId: ID!
    moves: [ReorderInput]!
  ): AttributeReorderValues
  categoryCreate(input: CategoryInput!, parent: ID): CategoryCreate
  categoryUpdate(id: ID!, input: CategoryInput!): CategoryUpdate
  categoryDelete(id: ID!): CategoryDelete
  categoryBulkDelete(ids: [ID]!): CategoryBulkDelete
  categoryTranslate(
    id: ID!
    input: TranslationInput!
    languageCode: LanguageCodeEnum!
  ): CategoryTranslate
  collectionCreate(input: CollectionCreateInput!): CollectionCreate
  collectionUpdate(id: ID!, input: CollectionInput!): CollectionUpdate
  collectionDelete(id: ID!): CollectionDelete
  collectionAddProducts(
    collectionId: ID!
    products: [ID]!
  ): CollectionAddProducts
  collectionRemoveProducts(
    collectionId: ID!
    products: [ID]!
  ): CollectionRemoveProducts
  collectionReorderProducts(
    collectionId: ID!
    moves: [MoveProductInput]!
  ): CollectionReorderProducts
  collectionBulkDelete(ids: [ID]!): CollectionBulkDelete
  collectionBulkPublish(
    ids: [ID]!
    isPublished: Boolean!
  ): CollectionBulkPublish
  collectionTranslate(
    id: ID!
    input: TranslationInput!
    languageCode: LanguageCodeEnum!
  ): CollectionTranslate
  productCreate(input: ProductCreateInput!): ProductCreate
  productDelete(id: ID!): ProductDelete
  productBulkDelete(ids: [ID]!): ProductBulkDelete
  productBulkPublish(ids: [ID]!, isPublished: Boolean!): ProductBulkPublish
  productUpdate(id: ID!, input: ProductInput!): ProductUpdate
  productTranslate(
    id: ID!
    input: TranslationInput!
    languageCode: LanguageCodeEnum!
  ): ProductTranslate
  productLike(input: ProductLikeInput!): ProductLike
  productUnlike(input: ProductLikeInput!): ProductUnLike
  productImageCreate(input: ProductImageCreateInput!): ProductImageCreate
  productImageUpdate(
    id: ID!
    input: ProductImageUpdateInput!
  ): ProductImageUpdate
  productImageDelete(id: ID!): ProductImageDelete
  productImageBulkDelete(ids: [ID]!): ProductImageBulkDelete
  productImageReorder(imagesIds: [ID]!, productId: ID!): ProductImageReorder
  productTypeCreate(input: ProductTypeInput!): ProductTypeCreate
  productTypeUpdate(id: ID!, input: ProductTypeInput!): ProductTypeUpdate
  productTypeDelete(id: ID!): ProductTypeDelete
  productTypeTranslate(
    id: ID!
    input: NameTranslationInput!
    languageCode: LanguageCodeEnum!
  ): ProductTypeTranslate
  productTypeBulkDelete(ids: [ID]!): ProductTypeBulkDelete
  productTypeReorderAttributes(
    moves: [ReorderInput]!
    productTypeId: ID!
    type: AttributeTypeEnum!
  ): ProductTypeReorderAttributes
  productBrandCreate(input: ProductBrandInput!): ProductBrandCreate
  productBrandUpdate(id: ID!, input: ProductBrandInput!): ProductBrandUpdate
  productBrandDelete(id: ID!): ProductBrandDelete
  productVariantCreate(input: ProductVariantCreateInput!): ProductVariantCreate
  productVariantUpdate(
    id: ID!
    input: ProductVariantInput!
  ): ProductVariantUpdate
  productVariantDelete(id: ID!): ProductVariantDelete
  productVariantBulkCreate(
    product: ID!
    variants: [ProductVariantBulkCreateInput]!
  ): ProductVariantBulkCreate
  productVariantBulkDelete(ids: [ID]!): ProductVariantBulkDelete
  productVariantTranslate(
    id: ID!
    input: NameTranslationInput!
    languageCode: LanguageCodeEnum!
  ): ProductVariantTranslate
  productVariantImageAssign(
    imageId: ID!
    variantId: ID!
  ): ProductVariantImageAssign
  productVariantImageUnassign(
    imageId: ID!
    variantId: ID!
  ): ProductVariantImageUnassign
  vendorProductVariantStocksCreate(
    input: VendorProductVariantStocksCreateInput!
  ): VendorProductVariantStocksCreate
  vendorProductVariantStocksUpdate(
    input: VendorProductVariantStocksUpdateInput!
  ): VendorProductVariantStocksUpdate
  vendorProductVariantStocksDelete(
    branchIds: [ID!]
    variantId: ID!
  ): ProductVariantStocksDelete
  draftOrderCreate(input: DraftOrderCreateInput!): DraftOrderCreate
  customerAcceptDraftOrder(
    id: ID!
    input: DraftOrderAcceptInput!
  ): CustomerAcceptDraftOrder
  orderAddNote(order: ID!, input: OrderAddNoteInput!): OrderAddNote
  orderCancel(
    cancellationReason: String
    id: ID!
    nationalId: String
  ): OrderCancel
  vendorOrderAccept(id: ID!, input: VendorOrderAcceptInput): VendorOrderAccept
  vendorOrderReject(id: ID!, rejectionReason: String!): VendorOrderReject
  vendorOrderCancel(cancellationReason: String!, id: ID!): VendorOrderCancel
  orderVendorFinishProcessing(id: ID!): OrderVendorFinishProcessing
  vendorOrderDeliveryStatusUpdate(
    id: ID!
    input: OrderDeliveryStatusUpdateInput!
  ): VendorOrderDeliveryStatusUpdate
  orderGetErxHubApproval(id: ID!): OrderGetErxHubApproval
  resubmitOrderGetErxHubApproval(
    id: ID!
    input: VendorOrderAcceptInput!
  ): ResubmitOrderGetErxHubApproval
  orderRejectionReasonCreate(
    input: OrderRejectionReasonInput!
  ): OrderRejectionReasonCreate
  orderRejectionReasonUpdate(
    id: ID!
    input: OrderRejectionReasonInput!
  ): OrderRejectionReasonUpdate
  orderRejectionReasonDelete(id: ID!): OrderRejectionReasonDelete
  consumerPrescriptionDispense(
    input: ConsumerPrescriptionDispenseInput!
  ): ConsumerPrescriptionDispense
  prescriptionOrderAssignVendors(
    input: PrescriptionOrderAssignVendorsInput!
  ): PrescriptionOrderAssignVendors
  convertVirtualOrderToRealOne(
    branches: [ID]!
    order: ID
  ): ConvertVirtualOrderToRealOne
  orderStatusUpdate(id: ID!, input: OrderStatusUpdateInput!): OrderStatusUpdate
  orderDeliveryStatusUpdate(
    id: ID!
    input: OrderDeliveryStatusUpdateInput!
  ): OrderDeliveryStatusUpdate
  handleOrderVendorAcceptTimeout(orders: [ID!]!): HandleOrderVendorAcceptTimeout
  sendOrderSubscriptionEvent(orderId: ID!): SendOrderSubscriptionEvent
  pluginUpdate(id: ID!, input: PluginUpdateInput!): PluginUpdate
  saleCreate(input: SaleInput!): SaleCreate
  saleUpdate(id: ID!, input: SaleInput!): SaleUpdate
  saleDelete(id: ID!): SaleDelete
  saleBulkDelete(ids: [ID]!): SaleBulkDelete
  saleCataloguesAdd(id: ID!, input: CatalogueInput!): SaleAddCatalogues
  saleCataloguesRemove(id: ID!, input: CatalogueInput!): SaleRemoveCatalogues
  saleTranslate(
    id: ID!
    input: NameTranslationInput!
    languageCode: LanguageCodeEnum!
  ): SaleTranslate
  checkoutCreate(input: CheckoutCreateInput!): CheckoutCreate
  checkoutComplete(
    checkoutId: ID!
    storeSource: Boolean = false
  ): CheckoutComplete
  checkoutCustomerAttach(checkoutId: ID!): CheckoutCustomerAttach
  checkoutEmailUpdate(checkoutId: ID, email: String!): CheckoutEmailUpdate
  checkoutLineDelete(checkoutId: ID!, lineId: ID): CheckoutLineDelete
  checkoutLinesAdd(
    checkoutId: ID!
    lines: [CheckoutLineInput]!
  ): CheckoutLinesAdd
  checkoutLinesUpdate(
    checkoutId: ID!
    lines: [CheckoutLineInput]!
  ): CheckoutLinesUpdate
  checkoutShippingAddressUpdate(
    checkoutId: ID!
    shippingAddress: AddressInput!
  ): CheckoutShippingAddressUpdate
  checkoutDelete(id: ID!): CheckoutDelete
  checkoutAddNote(checkoutId: ID!, note: String!): CheckoutAddNote
  notificationCreate(input: NotificationInput!): NotificationCreate
  markNotificationsAsSeen: MarkNotificationsAsSeen
  userDeviceRegister(input: UserDeviceRegisterInput!): UserDeviceRegister
  userDeviceUnRegister(input: UserDeviceUnRegisterInput!): UserDeviceUnRegister
  sendPushNotification(
    notification: PushNotificationInput!
    userId: ID!
  ): SendPushNotification
  addDecision(decision: DecisionInput!): Decision
  addFieldToRiskFactorTemplate(
    riskFactorFieldId: ID!
    riskFactorTemplateId: ID!
  ): RiskFactorTemplate
  addRiskFactorField(input: RiskFactorTemplateFieldInput!): RiskFactorField
  addRiskFactorTemplate(input: RiskFactorTemplateInput!): RiskFactorTemplate
  addSubList(subList: SubListInput): SubList
  addSubListItem(subListId: ID!, subListItem: SubListItemInput!): SubListItem
  deleteDecision(id: ID!): Decision
  deleteFieldFromRiskFactorTemplate(
    riskFactorFieldId: ID!
    riskFactorTemplateId: ID!
  ): RiskFactorTemplate
  deleteSubList(id: ID!): SubList
  deleteSubListItem(id: ID!): SubListItem
  fetchTerminologyListData(
    codeSystemId: ID!
    searchParameters: [SearchParameter]!
    subListId: ID!
  ): SubList
  firePlanDecisions(inputs: [DecisionInputData]!, planCode: String!): Action
  updateDecision(decision: DecisionInput!): Decision
  updateRiskFactorField(
    id: ID!
    input: RiskFactorTemplateFieldUpdateInput
  ): RiskFactorField
  updateRiskFactorTemplate(
    id: ID!
    input: RiskFactorTemplateUpdateInput!
  ): RiskFactorTemplate
  updateSubList(subList: SubListInput): SubList
  updateSubListItem(subListItem: SubListItemInput!): SubListItem
  uploadSubList(fileName: String!, subListId: ID!): SubList
  ProviderGuidedCareHealthProgramTeamPayerResponse(
    input: ProviderGuidedCareHealthProgramTeamPayerResponseInput!
  ): ProviderGuidedCareHealthProgramTeamCRUD
  addDiagnosisToVisit(input: AddDiagnosisToVisitInput): VisitDiagnosisCRUD
  addMemberToChronicGuidedCareProgram(
    input: VisitChronicGuidedCareMemberAddInput!
  ): LabCRUD

  """
  Appointment status update
  """
  appointmentStatusUpdate(
    """
    id of the appointment to update
    """
    id: ID
    input: AppointmentStatusUpdateInput
  ): AppointmentStatusUpdate

  """
  create a new Benefit Group
  """
  benefitGroupCreate(input: BenefitGroupInput!): BenefitGroupCRUD

  """
  delete a Benefit Group
  """
  benefitGroupDelete(id: ID!): BenefitGroupCRUD

  """
  update Benefit Group
  """
  benefitGroupUpdate(id: ID!, input: BenefitGroupInput!): BenefitGroupCRUD
  changeGuidedCareHealthProgramActiveStatus(
    id: ID!
  ): GuidedCareHealthProgramCRUD
  changeHealthProgramTemplateActiveStatus(id: ID!): HealthProgramTemplateCRUD
  changeProviderGuidedCareHealthProgramTeamActiveStatus(
    id: ID!
  ): ProviderGuidedCareHealthProgramTeamCRUD

  """
  Consumer Confirm Appointment
  """
  consumerAppointmentConfirm(
    id: ID!
    input: ConsumerAppointmentConfirmInput!
  ): AppointmentApprovalAction

  """
  Creates an Appointment.
  """
  consumerAppointmentCreate(
    """
    Fields required to create an Appointment.
    """
    input: ConsumerAppointmentInput!
  ): ConsumerAppointmentCreate

  """
  follow health channel.
  """
  consumerHealthChannelFollow(
    input: ConsumerHealthChannelFollowInput!
  ): ConsumerHealthChannelFollow

  """
  UnFollow health channel.
  """
  consumerHealthChannelUnFollow(channelId: ID!): ConsumerHealthChannelUnFollow

  """
  Rate a Health Channel
  """
  consumerRateHealthChannel(
    """
    Fields required for a consumer to rate a health channel
    """
    input: HealthChannelRatingInput!
  ): ConsumerRateHealthChannel
  deleteVisitDiagnosis(id: ID!): VisitDiagnosisCRUD
  disEnrollPatientToTeam(
    input: GuidedCarePatientTeamEnrollmentInput!
  ): ProviderGuidedCareHealthProgramTeamCRUD

  """
  Doctor Accept Appointment
  """
  doctorAppointmentAccept(
    id: ID!
    input: DoctorAcceptAppointmentInput!
  ): AppointmentApprovalAction

  """
  Doctor Accept Appointment Reject
  """
  doctorAppointmentReject(
    id: ID!
    input: DoctorAppointmentRejectInput!
  ): AppointmentApprovalAction

  """
  doctor accepts assigned call
  """
  doctorVisitAccept(id: ID!): VisitApprovalAction

  """
  doctor reject assigned call
  """
  doctorVisitReject(input: DoctorVisitRejectInput!): DoctorVisitReject

  """
  Create a new EarliestVisit
  """
  earliestVisitCreate(
    """
    fields required to create an early visit
    """
    input: EarliestVisitCreateInput!
  ): EarliestVisitCreate
  enrollPatientToTeam(
    input: GuidedCarePatientTeamEnrollmentInput!
  ): ProviderGuidedCareHealthProgramTeamCRUD

  """
  create a new Exclusion Option
  """
  exclusionOptionCreate(input: ExclusionOptionInput!): ExclusionOptionCRUD

  """
  delete a Exclusion Option
  """
  exclusionOptionDelete(id: ID!): ExclusionOptionCRUD

  """
  update Exclusion Option
  """
  exclusionOptionUpdate(
    id: ID!
    input: ExclusionOptionInput!
  ): ExclusionOptionCRUD

  """
  create a new Extra Benefit
  """
  extraBenefitCreate(input: ExtraBenefitInput!): ExtraBenefitCRUD

  """
  delete a Extra Benefit
  """
  extraBenefitDelete(id: ID!): ExtraBenefitCRUD

  """
  update Extra Benefit
  """
  extraBenefitUpdate(id: ID!, input: ExtraBenefitInput!): ExtraBenefitCRUD
  guidedCareHealthProgramCreate(
    input: GuidedCareHealthProgramInput!
  ): GuidedCareHealthProgramCRUD
  guidedCareHealthProgramUpdate(
    input: GuidedCareHealthProgramInput!
  ): GuidedCareHealthProgramCRUD

  """
  Create a new health channel category.
  """
  healthChannelCategoryCreate(
    """
    Fields required to create a health channel category.
    """
    input: HealthChannelCategoryInput!
  ): HealthChannelCategoryCRUD

  """
  Delete an existing health channel category.
  """
  healthChannelCategoryDelete(
    """
    ID of a health channel category to delete.
    """
    id: ID!
  ): HealthChannelCategoryCRUD

  """
  Update an existing health channel category.
  """
  healthChannelCategoryUpdate(
    """
    ID of a health channel category to update.
    """
    id: ID!

    """
    Fields required to create a health channel category.
    """
    input: HealthChannelCategoryInput!
  ): HealthChannelCategoryCRUD

  """
  Create a new health channel.
  """
  healthChannelCreate(
    """
    Fields required to create a health channel.
    """
    input: HealthChannelInput!
  ): HealthChannelCRUD

  """
  Delete an existing health channel.
  """
  healthChannelDelete(
    """
    ID of a health channel to delete.
    """
    id: ID!
  ): HealthChannelCRUD

  """
  Update an existing health channel.
  """
  healthChannelUpdate(
    """
    ID of a health channel to update.
    """
    id: ID!

    """
    Fields required to create a health channel.
    """
    input: HealthChannelInput!
  ): HealthChannelCRUD

  """
  Create a new Health Program Benefit Option
  """
  healthProgramBenefitOptionCreate(
    """
    Fields required to create Option
    """
    input: HealthProgramBenefitOptionInput!
  ): HealthProgramBenefitOptionCRUD

  """
  delete a Health Program Benefit Option
  """
  healthProgramBenefitOptionDelete(id: ID!): HealthProgramBenefitOptionCRUD

  """
  update Health Program Benefit Option
  """
  healthProgramBenefitOptionUpdate(
    id: ID!
    input: HealthProgramBenefitOptionInput!
  ): HealthProgramBenefitOptionCRUD

  """
  Create a new Health Program
  """
  healthProgramCreate(input: HealthProgramInput!): HealthProgramCRUD

  """
  delete an Existing Health Program
  """
  healthProgramDelete(
    """
    ID of a health program to delete.
    """
    id: ID!
  ): HealthProgramCRUD
  healthProgramMemberBodyCompositionUpdate(
    id: ID!
    input: HealthProgramMemberBodyCompositionInput!
  ): HealthProgramMemberCRUD
  healthProgramMemberCreate(
    input: HealthProgramMemberInput!
  ): HealthProgramMemberCRUD
  healthProgramMemberDelete(id: ID!): HealthProgramMemberCRUD
  healthProgramMemberListCreate(
    input: HealthProgramMemberListInput!
  ): HealthProgramMemberListCRUD
  healthProgramMemberListDelete(id: ID!): HealthProgramMemberListCRUD
  healthProgramMemberListUpdate(
    id: ID!
    input: HealthProgramMemberListInput!
  ): HealthProgramMemberListCRUD
  healthProgramMemberUpdate(
    id: ID!
    input: HealthProgramMemberInput!
  ): HealthProgramMemberCRUD
  healthProgramNetworkCreate(
    input: HealthProgramNetworkInput!
  ): HealthProgramNetworkCRUD
  healthProgramNetworkDelete(id: ID!): HealthProgramNetworkCRUD
  healthProgramNetworkProviderCreate(
    input: HealthProgramNetworkProviderInput!
  ): HealthProgramNetworkProviderCRUD
  healthProgramNetworkProviderDelete(id: ID!): HealthProgramNetworkProviderCRUD
  healthProgramNetworkProviderProfessionalCreate(
    input: HealthProgramNetworkProviderProfessionalInput!
  ): HealthProgramNetworkProviderProfessionalCRUD
  healthProgramNetworkProviderProfessionalDelete(
    id: ID!
  ): HealthProgramNetworkProviderProfessionalCRUD
  healthProgramNetworkProviderProfessionalUpdate(
    id: ID!
    input: HealthProgramNetworkProviderProfessionalInput!
  ): HealthProgramNetworkProviderProfessionalCRUD
  healthProgramNetworkProviderUpdate(
    id: ID!
    input: HealthProgramNetworkProviderInput!
  ): HealthProgramNetworkProviderCRUD
  healthProgramNetworkUpdate(
    id: ID!
    input: HealthProgramNetworkInput!
  ): HealthProgramNetworkCRUD

  """
  Subscribe user to Health Program
  """
  healthProgramSubscribe(
    """
    fields required to create health program subscription
    """
    input: HealthProgramSubscribeInput!
  ): HealthProgramSubscribe
  healthProgramTemplateCreate(
    input: HealthProgramTemplateInput!
  ): HealthProgramTemplateCRUD
  healthProgramTemplateUpdate(
    input: HealthProgramTemplateInput!
  ): HealthProgramTemplateCRUD
  healthProgramUnSubscribe(programId: ID!): HealthProgramUnSubscribe

  """
  Update an Existing Health Program
  """
  healthProgramUpdate(
    """
    ID of a health program to update.
    """
    id: ID!
    input: HealthProgramUpdateInput!
  ): HealthProgramCRUD
  healthProgramsSiteSettingsUpdate(input: H_SiteSettingsInput!): SiteSettings
  insertUnattendedCall(
    input: UnattendedCallInput
  ): TypeMutationInsertUnattendedCall

  """
  Create a new InsuranceNetwork
  """
  insuranceNetworkCreate(
    """
    Fields required to create insuranceNetwork
    """
    input: InsuranceNetworkInput!
  ): InsuranceNetworkCRUD

  """
  deletes an existing InsuranceNetwork
  """
  insuranceNetworkDelete(
    """
    insuranceNetwork id to be deleted
    """
    id: ID!
  ): InsuranceNetworkCRUD

  """
  Update an existing InsuranceNetwork
  """
  insuranceNetworkUpdate(
    """
    insuranceNetwork id to be updated
    """
    id: ID!

    """
    Fields required to create insuranceNetwork
    """
    input: InsuranceNetworkInput!
  ): InsuranceNetworkCRUD
  labRequestCreate(input: LabInput!): LabCRUD
  labRequestDelete(id: ID!): LabCRUD

  """
  Nurse Confirm Appointment
  """
  nurseAppointmentConfirm(
    id: ID!
    input: ConsumerAppointmentConfirmInput!
  ): AppointmentApprovalAction

  """
  Upload an attachment to visit
  """
  patientUploadVisitAttachment(
    input: VisitAttachmentUploadInput!
  ): PatientUploadVisitAttachment

  """
  Patient Visit Cancel
  """
  patientVisitCancel(
    id: ID!
    input: PatientVisitCancelInput!
  ): VisitApprovalAction
  providerGuidedCareHealthProgramTeamCreate(
    input: ProviderGuidedCareHealthProgramTeamInput!
  ): ProviderGuidedCareHealthProgramTeamCRUD
  providerGuidedCareHealthProgramTeamUpdate(
    input: ProviderGuidedCareHealthProgramTeamInput!
  ): ProviderGuidedCareHealthProgramTeamCRUD

  """
  Review an Visit
  """
  reviewVisit(
    """
    Fields required for a customer to review a Visit
    """
    input: VisitReviewInput!
  ): ReviewVisit
  saveOrFetchExistedAnonymousChatGroup(
    ownerUserId: ID
    userIds: [ID!]!
  ): AnonymousChatGroup

  """
  Creates a new visit message.
  """
  sendVisitMessage(
    """
    Fields required for visit participant to send a message.
    """
    input: VisitMessageInput!
  ): SendVisitMessage
  setLabResult(input: LabResultInput!): LabCRUD

  """
  time out doctor reject assigned call
  """
  timeoutDoctorVisitReject(input: DoctorVisitRejectInput!): DoctorVisitReject

  """
  Update Visit Assistant Agent Status.
  """
  visitAssistantAgentStatusUpdate(
    connected: Boolean!
    id: ID!
  ): VisitAssistantAgentStatusUpdate

  """
  end visit call.
  """
  visitCallEnd(visitId: ID!): VisitCallEnd

  """
  Create a new cancel reason.
  """
  visitCancelReasonCreate(
    """
    Fields required to create a cancel reason.
    """
    input: VisitCancelReasonInput!
  ): VisitCancelReasonCRUD

  """
  Delete an existing cancel reason.
  """
  visitCancelReasonDelete(
    """
    ID of a cancel reason to update.
    """
    id: ID!
  ): VisitCancelReasonCRUD

  """
  Update an existing cancel reason.
  """
  visitCancelReasonUpdate(
    """
    ID of a cancel reason to update.
    """
    id: ID!

    """
    Fields required to create a cancel reason.
    """
    input: VisitCancelReasonInput!
  ): VisitCancelReasonCRUD

  """
  creates a new Visit Complain
  """
  visitComplainCreate(
    """
    fields required to create visit complain
    """
    input: VisitComplainCreateInput!
  ): VisitComplainCreate

  """
  assign call request to doctor
  """
  visitDoctorAssign(
    doctorAvailabilityStatus: String
    doctorId: ID!
    doctorUserId: ID!
    visitId: ID!
  ): VisitDoctorAssign
  visitDoctorNoteUpdate(input: VisitDoctorNoteInput!): VisitAction

  """
  Create a new rejection reason.
  """
  visitRejectionReasonCreate(
    """
    Fields required to create a rejection reason.
    """
    input: VisitRejectionReasonInput!
  ): VisitRejectionReasonCRUD

  """
  Delete an existing rejection reason.
  """
  visitRejectionReasonDelete(
    """
    ID of a rejection reason to update.
    """
    id: ID!
  ): VisitRejectionReasonCRUD

  """
  Update an existing rejection reason.
  """
  visitRejectionReasonUpdate(
    """
    ID of a rejection reason to update.
    """
    id: ID!

    """
    Fields required to create a rejection reason.
    """
    input: VisitRejectionReasonInput!
  ): VisitRejectionReasonCRUD

  """
  Visit status update
  """
  visitStatusUpdate(
    """
    id of the visit to update
    """
    id: ID
    input: VisitStatusUpdateInput
  ): VisitStatusUpdate

  """
  Creates a new Visit Summary.
  """
  visitSummaryCreate(
    """
    Fields required to create a Visit Summary.
    """
    input: VisitSummaryInput!
  ): VisitSummaryCRUD

  """
  deletes an existing visit summary.
  """
  visitSummaryDelete(
    """
    ID of visit summary to delete.
    """
    id: ID!
  ): VisitSummaryCRUD

  """
  Update an existing lab
  """
  visitSummaryUpdate(
    """
    ID of the visit summary to be updated.
    """
    id: ID

    """
    Fields required to create a visit summary
    """
    input: VisitSummaryInput!
  ): VisitSummaryCRUD
  createPrescription(
    createPrescriptionInput: CreatePrescriptionInput
  ): VisitPrescription
  setClinicianCredentials(
    clinicianCredentials: ClinicianCredentialsInput
  ): ClinicianCredentials
  setPharmacyCredentials(
    pharmacyCredentials: PharmacyCredentialsInput
  ): PharmacyCredentials
  generatePatientReferral(memberId: String!): PatientReferral
  generatePatientReferralByClinician(
    newReferral: ReferralRequestInput
  ): PatientReferral
  assignCodeSystemEditorAndReviewer(
    code: CodeSystemCode!
    editorUser: ID!
    reviewerUser: ID!
  ): CodeSystemDefinition
  cloneCodeSystem(codeSystemCode: CodeSystemCode!): CodeSystem
  createConceptDefinition(
    codeSystemConceptFieldDefinition: CodeSystemConceptFieldDefinitionInput!
  ): CodeSystemConceptFieldDefinition
  deleteCodeSystemConcept(codeSystemConceptId: ID): CodeSystemConcept
  deleteConceptDefinition(
    codeSystemConceptFieldDefinitionId: ID!
  ): CodeSystemConceptFieldDefinition
  publishCodeSystem(codeSystemId: ID!): CodeSystem
  reviewCodeSystem(
    codeSystemId: ID!
    processingStatus: ProcessingStatus!
  ): CodeSystem
  sendCodeSystemToReview(codeSystemId: ID!): CodeSystem
  updateCodeSystemConcept(
    codeSystemConcept: CodeSystemConceptInput
  ): CodeSystemConcept
  updateConceptDefinition(
    codeSystemConceptFieldDefinition: CodeSystemConceptFieldDefinitionInput!
  ): CodeSystemConceptFieldDefinition
  uploadCodeSystemFile(
    codeSystemCode: CodeSystemCode!
    fileName: String!
  ): CodeSystem
  payerCreate(input: PayerInput!): PayerCreate
  payerUpdate(id: ID!, input: PayerInput!): PayerUpdate
  doctorProfileUpdate(input: DoctorProfileInput!): DoctorProfileUpdate
  doctorAvailabilityStatusUpdate(
    availabilityStatus: DoctorAvailabilityStatusEnum!
    doctorId: ID
    period: Int!
  ): DoctorAvailabilityStatusUpdate
  doctorInCallStatusUpdate(
    doctorId: ID
    inCall: Boolean!
  ): DoctorInCallStatusUpdate
  specializationCreate(input: SpecializationInput!): SpecializationCreate
  specializationUpdate(
    id: ID
    input: SpecializationInput!
  ): SpecializationUpdate
  specializationDelete(id: ID): SpecializationDelete
  patientCreate(input: PatientInput!): PatientCreate
  patientSendOrderOtp(input: PatientSendOrderOtpInput!): PatientSendOrderOTP
  patientInsuranceCardUpload(
    input: PatientInsuranceCardUploadInput!
  ): PatientInsuranceCardUpload
  patientInsuranceCardDelete(id: ID!): PatientInsuranceCardDelete
  patientMedicalHistoryCreate(
    input: PatientMedicalHistoryInput!
    patientId: ID
  ): PatientMedicalHistoryCreate
  patientMedicalHistoryUpdate(
    id: ID!
    input: PatientMedicalHistoryInput!
  ): PatientMedicalHistoryUpdate
  patientMedicalHistoryDelete(id: ID!): PatientMedicalHistoryDelete
  customerSendMessage(input: MessageInput!): CustomerSendMessage
  vendorSendMessage(input: VendorMessageInput!): VendorSendMessage
  uploadAttachment(input: AttachmentInput!): UploadAttachment
  customerMarkMessagesAsSeen(branchId: String!): CustomerMarkMessagesAsSeen
  vendorMarkMessagesAsSeen(
    branchId: String!
    customerId: String!
  ): VendorMarkMessagesAsSeen
  getMeetingPlatformChatLink(
    otherParticipantUserId: ID!
  ): GetMeetingPlatformChatLink
  planCreate(input: PlanInput!): PlanCreate
  planUpdate(id: ID!, input: PlanInput!): PlanUpdate
  branchCreate(input: BranchInput!, vendorId: ID): BranchCreate
  branchUpdate(id: ID!, input: BranchInput!): BranchUpdate
  branchDelete(id: ID!): BranchDelete
  assignUserToBranch(input: UserBranchInput): AssignUserToBranch
  unAssignUserFromBranch(input: UserBranchInput): UnAssignUserFromBranch
  vendorCreate(input: VendorAdminInput!): VendorCreate
  vendorUpdate(id: ID!, input: VendorUpdateAdminInput!): VendorUpdate
  vendorDelete(id: ID!): VendorDelete
  vendorUpdateIsIntegrated(
    id: ID!
    input: VendorUpdateIsIntegratedInput!
  ): VendorUpdateIsIntegrated
  vendorRegister(input: VendorInput!): VendorRegister
  rejectVendor(input: VendorRejectionReasonInput!): RejectVendor
  approveVendor(id: ID!): ApproveVendor
  rateVendor(input: VendorRatingInput!): RateVendor
  addVendorToFavorite(
    vendor: ID! = "vendor id to add to favorite"
  ): AddVendorToFavorite
  removeVendorFromFavorite(
    vendor: ID! = "vendor id to add to favorite"
  ): RemoveVendorFromFavorite
  terminateVendorSubscription(vendor: ID!): TerminateVendorSubscription
  vendorImageCreate(input: VendorImageCreateInput!): VendorImageCreate
  vendorImageUpdate(id: ID!, input: VendorImageUpdateInput!): VendorImageUpdate
  vendorImageDelete(id: ID!): VendorImageDelete
  vendorImageReorder(imagesIds: [ID]!, vendorId: ID!): VendorImageReorder
  walletTransactionCreate(
    id: ID!
    input: WalletTransactionInput!
  ): WalletTransactionCreate
  cityCreate(input: CityInput!): CityCreate
  cityUpdate(id: ID!, input: CityInput!): CityUpdate
  cityDelete(id: ID!): CityDelete
  blockCreate(input: BlockInput!): BlockCreate
  blockUpdate(id: ID!, input: BlockInput!): BlockUpdate
  blockDelete(id: ID!): BlockDelete
  tokenCreate(
    app: AppTypes!
    password: String!
    username: String!
  ): SSOCreateToken
  fromGlobalId(id: ID!): FromGlobalId
  toGlobalId(pk: String!, type: String): ToGlobalId
  requestPasswordResetByMobile(
    app: AppTypes!
    mobile: String!
    username: String!
  ): RequestPasswordResetByMobile
  confirmAccountMobile(
    mobile: String!
    sessionToken: String!
    token: String!
    username: String!
  ): ConfirmAccountMobile
  confirmAccountEmail(
    sessionToken: String!
    token: String!
    username: String!
  ): ConfirmAccountEmail
  confirmPasswordRestOtp(
    mobile: String!
    sessionToken: String!
    token: String!
    username: String!
  ): ConfirmPasswordRestOTP
  setPassword(
    mobile: String!
    password: String!
    token: String!
    username: String!
  ): SetPassword
  passwordChange(newPassword: String!, oldPassword: String!): PasswordChange
  accountAddressCreate(
    input: AddressInput!
    type: AddressTypeEnum
    userId: ID
  ): AccountAddressCreate
  accountAddressUpdate(id: ID!, input: AddressInput!): AccountAddressUpdate
  accountAddressDelete(id: ID!): AccountAddressDelete
  accountSetDefaultAddress(
    id: ID!
    type: AddressTypeEnum!
  ): AccountSetDefaultAddress
  accountRegister(input: AccountRegisterInput!): SSOAccountRegister
  accountUpdate(input: AccountInput!): SSOAccountUpdate
  customerCreate(input: CustomerCreateInput!): SSOCustomerCreate
  customerUpdate(input: CustomerUpdateInput!): SSOCustomerUpdate
  accountReSendOtpCode(
    nationalId: String = "national id to send OTP for."
  ): AccountReSendOTPCode
  accountReSendEmailOtpCode(
    email: String = "email to send OTP for."
  ): AccountReSendEmailOTPCode
  userAvatarUpdate(image: String!): AccountAvatarUpdate
  userAvatarDelete: AccountAvatarDelete
  keycloakPermissionConfigurationUpdate(
    id: ID!
    input: KeycloakPermissionConfigurationInput!
  ): KeycloakPermissionConfigurationUpdate
  permissionGroupCreate(
    input: PermissionGroupCreateInput!
  ): PermissionGroupCreate
  permissionGroupUpdate(
    id: ID!
    input: PermissionGroupUpdateInput!
  ): PermissionGroupUpdate
  permissionGroupDelete(id: ID!): PermissionGroupDelete
  userCreate(input: AdminUserCreateInput!): UserCreate
  userUpdate(id: ID!, input: UserUpdateInput!): UserUpdate
  userDelete(id: ID!): UserDelete
  vendorUserCreate(input: VendorUserCreateInput!): VendorUserCreate
  vendorUserUpdate(id: ID!, input: VendorUserUpdateInput!): VendorUserUpdate
  vendorUserDelete(id: ID!): VendorUserDelete
  meetingPlatformUpdate(
    meetingPlatformId: String!
    userId: ID
  ): MeetingPlatformIdUpdate
  consumerViewPreferenceSave(
    input: ConsumerViewPreferenceInput!
  ): ConsumerViewPreferenceSave
}

input NameTranslationInput {
  name: String
}

type NeedActionCodeSystems {
  codeSystemEvents: [CodeSystemEvent]
  count: Int
}

interface Node {
  id: ID!
}

type Notification implements Node {
  created: DateTime!
  modified: DateTime!
  body: String
  title: String
  type: NotificationType!
  category: NotificationCategory
  seenDate: DateTime
  extraData: String
  id: ID!
}

enum NotificationCategory {
  AUTO_ASSIGN_FAILED
  INVOICE_ISSUED
  LICENSE_EXPIRY
  VENDOR_REGISTERED
  ORDER_REJECTED
  DATA_EXPORT
  DATA_EXPORT_FAILURE
  WORKFLOW_FAILURE
}

enum NotificationCategoryEnum {
  AUTO_ASSIGN_FAILED
  INVOICE_ISSUED
  LICENSE_EXPIRY
  VENDOR_REGISTERED
  ORDER_REJECTED
  DATA_EXPORT
  DATA_EXPORT_FAILURE
  WORKFLOW_FAILURE
}

type NotificationCountableConnection {
  pageInfo: PageInfo!
  edges: [NotificationCountableEdge!]!
  totalCount: Int
}

type NotificationCountableEdge {
  node: Notification!
  cursor: String!
}

type NotificationCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  accountErrors: [NotificationError!]!
  notification: Notification
}

type NotificationCreated {
  notification: Notification
}

type NotificationError {
  field: String
  message: String
  code: NotificationErrorCode!
}

enum NotificationErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  PASSWORD_TOO_SIMILAR
  REQUIRED
  UNIQUE
}

input NotificationFilterInput {
  seen: Boolean
}

input NotificationInput {
  key: String
  body: String
  title: String
  type: NotificationTypeEnum!
  category: NotificationCategoryEnum
  notifiedUsers: [ID!]
  data: JSONString
  withPushNotification: Boolean = false
  pushNotificationApp: AppTypes
}

enum NotificationType {
  INFO
  WARNING
}

enum NotificationTypeEnum {
  INFO
  WARNING
}

interface ObjectWithBasicTranslatableFields {
  name: String
}

interface ObjectWithExtendedTranslatableFields {
  name: String
  description: String
  descriptionJson: JSONString
  seoTitle: String
  seoDescription: String
}

enum Operator {
  CONTAINS
  COUNT
  END_WITH
  EQUAL
  GREATER_THAN
  GREATER_THAN_OR_EQUAL
  IN
  IS_EMPTY
  IS_NOT_EMPTY
  LESS_THAN
  LESS_THAN_OR_EQUAL
  NO
  NOT_CONTAINS
  NOT_EQUAL
  NOT_IN
  START_WITH
  YES
}

type Order implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  status: OrderStatus!
  languageCode: String!
  trackingClientId: String!
  shippingAddress: OrderAddress
  shippingPrice: TaxedMoney
  token: String!
  discount: Money
  discountName: String
  translatedDiscountName: String
  displayGrossPrices: Boolean!
  customerNote: String!
  weight: Weight
  serviceCommissions: Float
  rejectionReason: OrderRejectionReason
  isFreeDelivery: Boolean!
  source: OrderSource!
  isDeliveryRequested: Boolean!
  prescription: Prescription
  parent: Order
  nationalId: String
  failReason: String
  helpDiskTicketId: String
  pickUpOtp: String
  carrierName: String
  totalOrderDistance: Float
  distanceGroup: String
  lines: [OrderLine]!
  number: String
  isPaid: Boolean
  total: TaxedMoney
  subtotal: TaxedMoney
  events: [OrderEvent]
  totalBalance: Money!
  userEmail: String
  isCodPayment: Boolean
  codPaymentAmount: Money!
  deliveryStatus: String
  user: User
  branch: Branch
  type: OrderTypesEnum
  children: [Order]
}

type OrderAddNote {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  order: Order
  event: OrderEvent
  orderErrors: [OrderError!]!
}

input OrderAddNoteInput {
  message: String!
}

type OrderAddress implements Node {
  id: ID!
  streetAddress1: String
  streetAddress2: String
  area: String
  district: String
  region: String
  postalCode: String!
  phone: String!
  buildingName: String
  buildingNumber: String
  unitNumber: String
  coordinates: LocationType
  city: City
  translations: [OrderAddressTranslation]
  name: String
}

type OrderAddressTranslation implements Node {
  name: String
  streetAddress1: String!
  streetAddress2: String!
  area: String!
  district: String!
  region: String!
  buildingName: String!
  id: ID!
  language: LanguageDisplay!
}

type OrderCancel {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  order: Order
  orderErrors: [OrderError!]!
}

type OrderCountableConnection {
  pageInfo: PageInfo!
  edges: [OrderCountableEdge!]!
  totalCount: Int
}

type OrderCountableEdge {
  node: Order!
  cursor: String!
}

input OrderDashboardFilterInput {
  created: DateRangeInput
}

type OrderDeleted {
  event: OrderDeletedEvent
}

type OrderDeletedEvent {
  orderId: ID
}

enum OrderDeliveryStatusEnum {
  PENDING
  PICKED_BY_CONSUMER
  RETURNED
  CARRIER_ALLOCATED
  DRIVER_ACCEPTED_ORDER
  DRIVER_PICKED_UP_ORDER
  DRIVER_IS_ABOUT_TO_ARRIVE
  ORDER_IS_DELIVERED
  ORDER_IS_CANCELLED
  ORDER_IS_SUSPENDED
  ORDER_IS_RESUMED
  DELIVERY_TIMED_OUT
  FAILED
}

type OrderDeliveryStatusUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  orderErrors: [OrderError!]!
  order: Order
}

input OrderDeliveryStatusUpdateInput {
  deliveryStatus: OrderDeliveryStatusEnum!
  orderRejectionReason: ID
  customOrderRejectionReason: String
  pickUpOtp: String
  deliveryPrice: Float
  carrierName: String
  totalOrderDistance: Float
  distanceGroup: String
}

enum OrderDirection {
  ASC
  DESC
}

input OrderDraftFilterInput {
  created: DateRangeInput
  branches: [ID]
}

type OrderError {
  field: String
  message: String
  code: OrderErrorCode!
  branch: ID
  orderLine: ID
}

enum OrderErrorCode {
  BILLING_ADDRESS_NOT_SET
  CANNOT_CANCEL_FULFILLMENT
  CANNOT_CANCEL_ORDER
  CANNOT_DELETE
  CANNOT_REFUND
  CAPTURE_INACTIVE_PAYMENT
  NOT_EDITABLE
  FULFILL_ORDER_LINE
  GRAPHQL_ERROR
  INVALID
  PRODUCT_NOT_PUBLISHED
  NOT_FOUND
  ORDER_NO_SHIPPING_ADDRESS
  PAYMENT_ERROR
  PAYMENT_MISSING
  REQUIRED
  SHIPPING_METHOD_NOT_APPLICABLE
  SHIPPING_METHOD_REQUIRED
  UNIQUE
  VOID_INACTIVE_PAYMENT
  ZERO_QUANTITY
  INSUFFICIENT_STOCK
  DUPLICATED_INPUT_ITEM
  CANNOT_ACCEPT_ORDER
  CANNOT_REJECT_ORDER
}

type OrderEvent implements Node {
  id: ID!
  date: DateTime
  type: OrderEventsEnum
  user: User
  message: String
  email: String
  emailType: OrderEventsEmailsEnum
  amount: Float
  paymentId: String
  paymentGateway: String
  quantity: Int
  composedId: String
  orderNumber: String
  oversoldItems: [String]
  lines: [OrderEventOrderLineObject]
  fulfilledItems: [FulfillmentLine]
}

type OrderEventOrderLineObject {
  quantity: Int
  orderLine: OrderLine
  itemName: String
}

enum OrderEventsEmailsEnum {
  PAYMENT_CONFIRMATION
  SHIPPING_CONFIRMATION
  TRACKING_UPDATED
  ORDER_CONFIRMATION
  FULFILLMENT_CONFIRMATION
}

enum OrderEventsEnum {
  ORDER_CREATED
  DRAFT_CREATED
  DRAFT_ADDED_PRODUCTS
  DRAFT_REMOVED_PRODUCTS
  DRAFT_CUSTOMER_ACCEPTED
  PLACED
  PLACED_FROM_DRAFT
  OVERSOLD_ITEMS
  CANCELED
  VENDOR_ACCEPTED
  VENDOR_REJECTED
  VENDOR_CANCELED
  VENDOR_FINISHED_PROCESSING
  VENDOR_RETURNED
  VENDOR_DELIVERED
  CONSUMER_PICKED
  CONSUMER_CANCELED
  ORDER_MARKED_AS_PAID
  ORDER_FULLY_PAID
  CARD_PAID
  UPDATED_ADDRESS
  EMAIL_SENT
  PAYMENT_CAPTURED
  PAYMENT_REFUNDED
  PAYMENT_VOIDED
  PAYMENT_FAILED
  FULFILLMENT_CANCELED
  FULFILLMENT_RESTOCKED_ITEMS
  FULFILLMENT_FULFILLED_ITEMS
  TRACKING_UPDATED
  NOTE_ADDED
  OTHER
  PRESCRIPTION_ORDER_CREATED
  PRESCRIPTION_ORDER_VENDOR_ASSIGNED
  PRESCRIPTION_REFILL_ORDER_CREATED
  ERX_HUB_AUTH_SUBMIT_TIMED_OUT
  WAITING_ERX_HUB_AUTH_APPROVAL
  ERX_HUB_FULLY_APPROVED
  ERX_HUB_PARTIALLY_APPROVED
  ERX_HUB_REJECTED
  ERX_HUB_TIMED_OUT
  ERX_HUB_AUTH_REQUEST_FAILED
  ERX_HUB_CLAIM_SUBMIT_TIMED_OUT
  WAITING_ERX_HUB_CLAIM_APPROVAL
  ERX_HUB_CLAIM_APPROVED
  ERX_HUB_CLAIM_REJECTED
  ERX_HUB_CLAIM_FAILED
  DISPENSED
  ALLOCATED
  FAILED
  RETURNED
  PENDING_DELIVERY
  DRIVER_RETURNED
  DRIVER_PICKED
  DRIVER_DELIVERED
  READY_FOR_CUSTOMER_PICKUP
  OUT_FOR_DELIVERY
  ORDER_PICKED_BY_CUSTOMER
  ORDER_CARRIER_ALLOCATED
  DRIVER_ACCEPTED_ORDER
  DRIVER_IS_ABOUT_TO_ARRIVE
  ORDER_DELIVERY_IS_CANCELLED
  ORDER_DELIVERY_IS_SUSPENDED
  ORDER_DELIVERY_IS_RESUMED
  ORDER_DELIVERY_TIMED_OUT
  ORDER_DELIVERY_FAILED
}

input OrderFilterInput {
  helpDiskTicketId: String
  helpDiskTicketId_Icontains: String
  created: DateRangeInput
  branches: [ID]
  status: [OrderStatusEnum]
  deliveryStatus: [OrderDeliveryStatusEnum]
  modified: DateRangeInput
  numbers: [String]
  price: IntRangeInput
  active: Boolean
  prescription: ID
  childrenAndFailedOrders: Boolean
  parentOrders: Boolean
  hasHelpDiskTicket: Boolean
  referenceNumber: String
  clinician: String
  orderGlobalSearch: String
  nationalId: String
  isDelivery: Boolean
}

type OrderGetErxHubApproval {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  orderErrors: [OrderError!]!
  order: Order
}

type OrderLine implements Node {
  id: ID!
  variant: ProductVariant
  productName: String!
  variantName: String!
  variantCode: String!
  translatedProductName: String!
  translatedVariantName: String!
  productSku: String!
  quantity: Int!
  quantityFulfilled: Int!
  unitPrice: TaxedMoney
  taxRate: Float!
  medication: Medication
  authStatus: OrderLineAuthStatus!
  rejectionReason: String
  thumbnail: Image
  children: [OrderLine]
  isExpired: Boolean
  tradeDrug: TradeDrug
}

enum OrderLineAuthStatus {
  NEW
  APPROVED
  REJECTED
  PARTIAL_APPROVED
}

type OrderLineCountableConnection {
  pageInfo: PageInfo!
  edges: [OrderLineCountableEdge!]!
  totalCount: Int
}

type OrderLineCountableEdge {
  node: OrderLine!
  cursor: String!
}

type OrderRejectionReason implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  reason: String!
  type: OrderRejectionReasonType!
  orders(
    before: String
    after: String
    first: Int
    last: Int
  ): OrderCountableConnection!
}

type OrderRejectionReasonCountableConnection {
  pageInfo: PageInfo!
  edges: [OrderRejectionReasonCountableEdge!]!
  totalCount: Int
}

type OrderRejectionReasonCountableEdge {
  node: OrderRejectionReason!
  cursor: String!
}

type OrderRejectionReasonCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  orderRejectionReasonErrors: [OrderRejectionReasonError!]!
  orderRejectionReason: OrderRejectionReason
}

type OrderRejectionReasonDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  orderRejectionReasonErrors: [OrderRejectionReasonError!]!
  orderRejectionReason: OrderRejectionReason
}

type OrderRejectionReasonError {
  field: String
  message: String
  code: OrderRejectionReasonErrorCode!
}

enum OrderRejectionReasonErrorCode {
  ALREADY_EXISTS
  DUPLICATED_INPUT_ITEM
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input OrderRejectionReasonInput {
  reason: String!
}

enum OrderRejectionReasonType {
  SYSTEM
  CUSTOM
}

type OrderRejectionReasonUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  orderRejectionReasonErrors: [OrderRejectionReasonError!]!
  orderRejectionReason: OrderRejectionReason
}

enum OrderSortField {
  NUMBER
  CREATION_DATE
  MODIFIED_DATE
  CUSTOMER
  FULFILLMENT_STATUS
  TOTAL
  STATUS_AND_CREATED
}

input OrderSortingInput {
  direction: OrderDirection!
  field: OrderSortField!
}

enum OrderSource {
  CHAT
  CHECKOUT
  PRESCRIPTION_DISPENSE
  PRESCRIPTION_REFILL
}

enum OrderStatus {
  DRAFT
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  WAITING_PROVIDER_SELECTION
  NEW_REQUEST
  ACCEPTED_BY_PROVIDER
  REJECTED_BY_PROVIDER
  IN_PROGRESS
  ALLOCATED
  CANCELED_BY_CONSUMER
  CANCELED_BY_PROVIDER
  ERX_HUB_AUTH_SUBMIT_TIMED_OUT
  WAITING_ERX_HUB_APPROVAL
  ERX_HUB_FULLY_APPROVED
  ERX_HUB_PARTIALLY_APPROVED
  ERX_HUB_REJECTED
  ERX_HUB_TIMED_OUT
  ERX_HUB_AUTH_REQUEST_FAILED
  ERX_HUB_CLAIM_SUBMIT_TIMED_OUT
  WAITING_ERX_HUB_CLAIM_APPROVAL
  ERX_HUB_CLAIM_APPROVED
  ERX_HUB_CLAIM_REJECTED
  ERX_HUB_CLAIM_FAILED
  DISPENSED
  READY_FOR_CUSTOMER_PICKUP
  OUT_FOR_DELIVERY
  DELIVERED
  RETURNED
  FAILED
}

type OrderStatusChange {
  order: Order
}

enum OrderStatusEnum {
  DRAFT
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  WAITING_PROVIDER_SELECTION
  NEW_REQUEST
  ACCEPTED_BY_PROVIDER
  REJECTED_BY_PROVIDER
  IN_PROGRESS
  ALLOCATED
  CANCELED_BY_CONSUMER
  CANCELED_BY_PROVIDER
  ERX_HUB_AUTH_SUBMIT_TIMED_OUT
  WAITING_ERX_HUB_APPROVAL
  ERX_HUB_FULLY_APPROVED
  ERX_HUB_PARTIALLY_APPROVED
  ERX_HUB_REJECTED
  ERX_HUB_TIMED_OUT
  ERX_HUB_AUTH_REQUEST_FAILED
  ERX_HUB_CLAIM_SUBMIT_TIMED_OUT
  WAITING_ERX_HUB_CLAIM_APPROVAL
  ERX_HUB_CLAIM_APPROVED
  ERX_HUB_CLAIM_REJECTED
  ERX_HUB_CLAIM_FAILED
  DISPENSED
  READY_FOR_CUSTOMER_PICKUP
  OUT_FOR_DELIVERY
  DELIVERED
  RETURNED
  FAILED
}

type OrderStatusUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  orderErrors: [OrderError!]!
  order: Order
}

input OrderStatusUpdateInput {
  status: OrderStatusEnum!
  failReason: String
  medicationsStatuses: [MedicationAuthorizationStatusInput]
  helpDiskTicketId: String
}

enum OrderTypesEnum {
  HOME_DELIVERY
  PICKUP_FROM_PHARMACY
}

type OrderVendorFinishProcessing {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  orderErrors: [OrderError!]!
  order: Order
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PasswordChange {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  user: User
  accountErrors: [AccountError!]!
}

type Patient implements Node {
  id: ID!
  activeHealthProgramMembers: [HealthProgramMember]
  bodyComposition: HealthProgramMemberBodyCompositionBasic
  bodyCompositions(
    after: String
    before: String
    filter: HealthProgramMemberBodyCompositionFilterInput
    first: Int
    last: Int
  ): HealthProgramMemberBodyCompositionCountableConnection
  healthProgramsByActiveMembers: [HealthProgram]
  healthProgramsByActiveUserSubscriptions: [HealthProgram]
  inActiveHealthProgramMembers(
    after: String
    before: String
    first: Int
    last: Int
  ): HealthProgramMemberCountableConnection
  created: DateTime!
  modified: DateTime!
  idType: PatientIdType
  memberId: String
  eHealthId: String
  nationality: String
  nationalIdNumber: String!
  firstName: String
  secondName: String
  thirdName: String
  lastName: String
  gender: String
  dateOfBirth: Date
  contactNumber: String!
  email: String
  bloodGroup: String
  preferredLanguage: String
  residencyType: PatientResidencyType
  maritalStatus: PatientMaritalStatus
  emergencyPhoneNumber: String
  user: User
  medicalHistory: PatientMedicalHistory
  chronicDiseases: [String]
  disabilities: [String]
  insuranceCards: [PatientInsuranceCardDetails]
  number: String
}

type PatientCountableConnection {
  pageInfo: PageInfo!
  edges: [PatientCountableEdge!]!
  totalCount: Int
}

type PatientCountableEdge {
  node: Patient!
  cursor: String!
}

type PatientCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  patientErrors: [PatientError!]!
  patient: Patient
}

type PatientDisability implements Node {
  id: ID!
  code: String!
}

type PatientError {
  field: String
  message: String
  code: PatientErrorCode!
}

enum PatientErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input PatientFilterInput {
  id: ID
  id_Icontains: ID
  nationalIdNumber: String
  nationalIdNumber_Icontains: String
  firstName: String
  firstName_Icontains: String
  secondName: String
  secondName_Icontains: String
  thirdName: String
  thirdName_Icontains: String
  lastName: String
  lastName_Icontains: String
  memberId: String
  memberId_Icontains: String
  eHealthId: String
  eHealthId_Icontains: String
  contactNumber: String
  contactNumber_Icontains: String
  email: String
  email_Icontains: String
  bloodGroup: String
  bloodGroup_Icontains: String
  gender: String
  gender_Icontains: String
  preferredLanguage: String
  preferredLanguage_Icontains: String
  nationality: String
  nationality_Icontains: String
  emergencyPhoneNumber: String
  emergencyPhoneNumber_Icontains: String
  idType: [PatientIdTypeEnum]
  residencyType: [ResidencyTypesEnum]
  maritalStatus: [MaritalStatusesEnum]
  dateOfBirth: Date
}

enum PatientHistoryErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

enum PatientIdType {
  D005
  D004
  D003
  D002
  D001
  OTHER
}

enum PatientIdTypeEnum {
  D005
  D004
  D003
  D002
  D001
  OTHER
}

input PatientInput {
  idType: PatientIdTypeEnum
  memberId: String
  eHealthId: String
  nationality: String
  nationalIdNumber: String!
  firstName: String
  secondName: String
  thirdName: String
  lastName: String
  gender: String
  dateOfBirth: Date
  contactNumber: String!
  email: String
  bloodGroup: String
  preferredLanguage: String
  residencyType: ResidencyTypesEnum
  maritalStatus: MaritalStatusesEnum
  emergencyPhoneNumber: String
  chronicDiseases: [String!]
  disabilities: [String!]
}

type PatientInsuranceCardDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  patientErrors: [PatientError!]!
  patientInsuranceCardDetails: PatientInsuranceCardDetails
}

type PatientInsuranceCardDetails implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  memberId: String!
  companyName: String!
  networkName: String
  expiryDate: Date
  cardFrontSideImage: String
  cardBackSideImage: String
  patient: Patient!
}

type PatientInsuranceCardUpload {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  patientErrors: [PatientError!]!
  patientInsuranceCardDetails: PatientInsuranceCardDetails
}

input PatientInsuranceCardUploadInput {
  memberId: String!
  companyName: String!
  networkName: String
  expiryDate: Date
  cardFrontSideImage: String
  cardBackSideImage: String
}

enum PatientMaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

type PatientMedicalHistory implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  hasAsthma: Boolean!
  hasAnemia: Boolean!
  hasBirthDefects: Boolean!
  hasEpilepsy: Boolean!
  hasHighBloodPressure: Boolean!
  hasHeartDisease: Boolean!
  hasHepatitisB: Boolean!
  hasHighCholesterol: Boolean!
  hasStroke: Boolean!
  hasTia: Boolean!
  hasArrhythmia: Boolean!
  hasCancer: Boolean!
  hasClottingDisorder: Boolean!
  hasDiabetes: Boolean!
  hasKidneyDisease: Boolean!
  hasLiverDisease: Boolean!
  hasThyroidDisease: Boolean!
  hasAnyMedicalProblem: Boolean!
  everReceivedCare: Boolean!
  wasCareContinuous: Boolean!
  everHospitalized: Boolean!
  hasOtherDisease: Boolean!
  everOperatedOn: Boolean!
  operationYear: Int!
  hasOperationComplications: Boolean!
  takePrescriptionMedicines: Boolean!
  takeNonTraditionalMedications: Boolean!
  medicationDose: Int!
  medicationFreq: Int!
  hasAllergies: Boolean!
  allergyType: PatientMedicalHistoryAllergyType
  reactionType: PatientMedicalHistoryReactionType
  drinkAlcohol: PatientMedicalHistoryDrinkAlcohol!
  dailyQuantity: Int!
  drinkType: String!
  drugUse: PatientMedicalHistoryDrugUse!
  smokingFreq: PatientMedicalHistorySmokingFreq
  packsNo: PatientMedicalHistoryPacksNo
  noYearsSmoked: Int!
  motherBleedingDisorder: Boolean!
  motherBloodClots: Boolean!
  motherCancer: Boolean!
  motherDiabetes: Boolean!
  motherHeartDisease: Boolean!
  motherHighBloodPressure: Boolean!
  motherHighCholesterol: Boolean!
  fatherBleedingDisorder: Boolean!
  fatherBloodClots: Boolean!
  fatherCancer: Boolean!
  fatherDiabetes: Boolean!
  fatherHeartDisease: Boolean!
  fatherHighBloodPressure: Boolean!
  fatherHighCholesterol: Boolean!
  brotherBleedingDisorder: Boolean!
  brotherBloodClots: Boolean!
  brotherCancer: Boolean!
  brotherDiabetes: Boolean!
  brotherHeartDisease: Boolean!
  brotherHighBloodPressure: Boolean!
  brotherHighCholesterol: Boolean!
  sisterBleedingDisorder: Boolean!
  sisterBloodClots: Boolean!
  sisterCancer: Boolean!
  sisterDiabetes: Boolean!
  sisterHeartDisease: Boolean!
  sisterHighBloodPressure: Boolean!
  sisterHighCholesterol: Boolean!
  gfatherBleedingDisorder: Boolean!
  gfatherBloodClots: Boolean!
  gfatherCancer: Boolean!
  gfatherDiabetes: Boolean!
  gfatherHeartDisease: Boolean!
  gfatherHighBloodPressure: Boolean!
  gfatherHighCholesterol: Boolean!
  gmotherBleedingDisorder: Boolean!
  gmotherBloodClots: Boolean!
  gmotherCancer: Boolean!
  gmotherDiabetes: Boolean!
  gmotherHeartDisease: Boolean!
  gmotherHighBloodPressure: Boolean!
  gmotherHighCholesterol: Boolean!
  everPregnant: Boolean!
  pregnancyCount: Int!
  pregnancyOutcome: PatientMedicalHistoryPregnancyOutcome
  patient: Patient
  disabilities: [PatientDisability]
}

enum PatientMedicalHistoryAllergyType {
  DRUG
  FOOD
  INSECT
  LATEX
  MOLD
  PET
  POLLEN
}

type PatientMedicalHistoryCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  patientHistoryErrors: [PatientMedicalHistoryError!]!
  patientMedicalHistory: PatientMedicalHistory
}

type PatientMedicalHistoryDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  patientHistoryErrors: [PatientMedicalHistoryError!]!
  patientMedicalHistory: PatientMedicalHistory
}

enum PatientMedicalHistoryDrinkAlcohol {
  CURRENT_EVERYDAY
  CURRENT_SOMEDAY
  FORMER
  NEVER
  UNKOWN
}

enum PatientMedicalHistoryDrugUse {
  CURRENT_EVERYDAY
  CURRENT_SOMEDAY
  FORMER
  NEVER
  UNKOWN
}

type PatientMedicalHistoryError {
  field: String
  message: String
  code: PatientHistoryErrorCode!
}

input PatientMedicalHistoryInput {
  hasAsthma: Boolean
  hasAnemia: Boolean
  hasBirthDefects: Boolean
  hasEpilepsy: Boolean
  hasHighBloodPressure: Boolean
  hasHeartDisease: Boolean
  hasHepatitisB: Boolean
  hasHighCholesterol: Boolean
  hasStroke: Boolean
  hasTia: Boolean
  hasArrhythmia: Boolean
  hasCancer: Boolean
  hasClottingDisorder: Boolean
  hasDiabetes: Boolean
  hasKidneyDisease: Boolean
  hasLiverDisease: Boolean
  hasThyroidDisease: Boolean
  hasAnyMedicalProblem: Boolean
  everReceivedCare: Boolean
  wasCareContinuous: Boolean
  everHospitalized: Boolean
  hasOtherDisease: Boolean
  everOperatedOn: Boolean
  operationYear: Int
  hasOperationComplications: Boolean
  takePrescriptionMedicines: Boolean
  takeNonTraditionalMedications: Boolean
  medicationDose: Int
  medicationFreq: Int
  hasAllergies: Boolean
  allergyType: String
  reactionType: String
  drinkAlcohol: String
  dailyQuantity: Int
  drinkType: String
  drugUse: String
  smokingFreq: String
  packsNo: String
  noYearsSmoked: Int
  motherBleedingDisorder: Boolean
  motherBloodClots: Boolean
  motherCancer: Boolean
  motherDiabetes: Boolean
  motherHeartDisease: Boolean
  motherHighBloodPressure: Boolean
  motherHighCholesterol: Boolean
  fatherBleedingDisorder: Boolean
  fatherBloodClots: Boolean
  fatherCancer: Boolean
  fatherDiabetes: Boolean
  fatherHeartDisease: Boolean
  fatherHighBloodPressure: Boolean
  fatherHighCholesterol: Boolean
  brotherBleedingDisorder: Boolean
  brotherBloodClots: Boolean
  brotherCancer: Boolean
  brotherDiabetes: Boolean
  brotherHeartDisease: Boolean
  brotherHighBloodPressure: Boolean
  brotherHighCholesterol: Boolean
  sisterBleedingDisorder: Boolean
  sisterBloodClots: Boolean
  sisterCancer: Boolean
  sisterDiabetes: Boolean
  sisterHeartDisease: Boolean
  sisterHighBloodPressure: Boolean
  sisterHighCholesterol: Boolean
  gmotherBleedingDisorder: Boolean
  gmotherBloodClots: Boolean
  gmotherCancer: Boolean
  gmotherDiabetes: Boolean
  gmotherHeartDisease: Boolean
  gmotherHighBloodPressure: Boolean
  gmotherHighCholesterol: Boolean
  gfatherBleedingDisorder: Boolean
  gfatherBloodClots: Boolean
  gfatherCancer: Boolean
  gfatherDiabetes: Boolean
  gfatherHeartDisease: Boolean
  gfatherHighBloodPressure: Boolean
  gfatherHighCholesterol: Boolean
  everPregnant: Boolean
  pregnancyCount: Int
}

enum PatientMedicalHistoryPacksNo {
  LESS_HALF_PACK
  HALF_PACK
  ONE_PACK
  ONE_AND_HALF_PACK
  TWO_PACKS
  THREE_PACKS
}

enum PatientMedicalHistoryPregnancyOutcome {
  FULL_TERM
  PRETERM
  MISCARRIAGES
  ABORTIONS
}

enum PatientMedicalHistoryReactionType {
  ANAPHYLAXIS
  RASH
  ITCHING
}

enum PatientMedicalHistorySmokingFreq {
  CURRENT_EVERYDAY
  CURRENT_SOMEDAY
  FORMER
  NEVER
  UNKOWN
}

type PatientMedicalHistoryUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  patientHistoryErrors: [PatientMedicalHistoryError!]!
  patientMedicalHistory: PatientMedicalHistory
}

type PatientReferral {
  code: String
  endDate: Date
  errors: [ReferralGraphqlError]
  startDate: Date
}

type PatientReferralConnection {
  edges: [ReferralEdge]
  pageInfo: PageInfo
  totalCount: Int
}

enum PatientResidencyType {
  RESIDENCE
  VISITOR
}

type PatientSendOrderOTP {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  ok: Boolean
  patientErrors: [PatientError!]!
}

input PatientSendOrderOtpInput {
  orderId: ID!
  orderOtp: String!
  patientId: ID!
  branchId: ID!
  url: String!
}

"""
Upload an attachment to visit
"""
type PatientUploadVisitAttachment {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  visitAttachment: VisitAttachment
  visitErrors: [H_EntityError!]!
}

input PatientVisitCancelInput {
  cancellationReason: String!
}

type Payer implements Node {
  facilities(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): InsuranceNetworkFacilityCountableConnection
  id: ID!
  networks(
    after: String
    before: String
    first: Int
    last: Int
  ): InsuranceNetworkCountableConnection
  created: DateTime!
  modified: DateTime!
  name: String!
  nameAr: String
  contactName: String
  contactPhoneNumber: String
  contactMobileNumber: String
  contactEmail: String
  isActive: Boolean!
  licenseNumber: String!
  logo: String
  backgroundImage: String
  users(
    before: String
    after: String
    first: Int
    last: Int
  ): UserCountableConnection!
}

type PayerCountableConnection {
  pageInfo: PageInfo!
  edges: [PayerCountableEdge!]!
  totalCount: Int
}

type PayerCountableEdge {
  node: Payer!
  cursor: String!
}

type PayerCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  payerErrors: [PayerError!]!
  payer: Payer
}

type PayerError {
  field: String
  message: String
  code: PayerErrorCode!
}

enum PayerErrorCode {
  ALREADY_EXISTS
  DUPLICATED_INPUT_ITEM
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  NOT_PAYERS_IMAGE
}

input PayerFilterInput {
  licenseNumber: String
  name_Icontains: String
  name: String
}

input PayerInput {
  name: String
  nameAr: String
  contactName: String
  contactPhoneNumber: String
  contactMobileNumber: String
  contactEmail: String
  isActive: Boolean
  licenseNumber: String
  logo: String
  backgroundImage: String
}

type PayerUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  payerErrors: [PayerError!]!
  payer: Payer
}

enum period {
  MONTHLY
  HALF_YEAR
  YEARLY
  WEEKLY
  THREE_MONTHS
}

type Permission implements Node {
  id: ID!
  code: PermissionEnum
  name: String!
  keyCloakPermission: KeyCloakPermission
}

enum PermissionEnum {
  MANAGE_USERS
  MANAGE_STAFF
  MANAGE_PERMISSIONS
  VIEW_CUSTOMERS
  VIEW_USERS
  VIEW_STAFF
  MANAGE_VENDORS
  MANAGE_BRANCHES
  MANAGE_BLOCKS
  MANAGE_CITIES
  MANAGE_SUBSCRIPTIONS
  VIEW_SUBSCRIPTIONS
  MANAGE_WALLETS
  VIEW_WALLETS
  MANAGE_CHAT
  MANAGE_PATIENTS
  VIEW_PATIENTS
  MANAGE_PATIENT_MEDICAL_HISTORY
  MANAGE_DOCTORS
  MANAGE_SPECIALIZATIONS
  MANAGE_QUALIFICATIONS
  MANAGE_DISCOUNTS
  MANAGE_PLUGINS
  MANAGE_SETTINGS
  MANAGE_TRANSLATIONS
  MANAGE_CHECKOUTS
  MANAGE_ORDERS
  MANAGE_PRODUCTS
  MANAGE_PRODUCT_STOCKS
  MANAGE_SHIPPING
  MANAGE_PRICING_RULES
  MANAGE_REJECTION_REASONS
  MANAGE_INVOICES
  MANAGE_PRESCRIPTIONS
  ASSIGN_PRESCRIPTION_ORDER_TO_VENDORS
  CONVERT_VIRTUAL_ORDER_TO_REAL_ONE
  MANAGE_EARLY_REFILL_REASONS
  MANAGE_MEDICAL_DELIVERY_REQUESTS
  MANAGE_PAYMENTS
  MANAGE_CODE_SYSTEM_REVIEWERS
  PUBLISH_CODE_SYSTEM
  UPLOAD_CODE_SYSTEM_FILE
  MANAGE_CODE_SYSTEM_EDITOR_REVIEWERS
  MANAGE_CODE_SYSTEM_LISTS
  VIEW_CODE_SYSTEM_LISTS
  MANAGE_RULE_ENGINE_RULES
  WORKFLOW_MANAGE_ORDERS
  MANAGE_PHARMACY_CREDENTIALS
  MANAGE_HEALTH_PROGRAMS
  MANAGE_HEALTH_PROGRAMS_CARE_FOR_FIELDS
  MANAGE_VISITS
  MANAGE_VISIT_REJECTION_REASONS
  MANAGE_VISIT_CANCEL_REASONS
  MANAGE_MEDICATIONS
  MANAGE_DIAGNOSIS
  MEDICATION_SCIENTIFIC_DETAILS
  MANAGE_VISIT_SUMMARY
  MANAGE_HEALTH_CHANNELS
  MANAGE_HEALTH_CHANNELS_CATEGORIES
  MANAGE_MEDICATION_SCIENTIFIC_DETAILS
  MANAGE_PROGRAM_TEMPLATES
  MANAGE_PROGRAMS
  MANAGE_PROGRAM_TEAMS
  VIEW_PROGRAM_TEMPLATES
  VIEW_PROGRAMS
  VIEW_PROGRAM_TEAMS
  MANAGE_INSURANCE
  MANAGE_INSURANCE_NETWORKS
  MANAGE_APPOINTMENTS
}

type PermissionGroupCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  group: Group
  permissionGroupErrors: [PermissionGroupError!]!
}

input PermissionGroupCreateInput {
  addPermissions: [PermissionEnum!]
  addUsers: [ID!]
  groupConfiguration: GroupConfigurationInput!
  name: String!
}

type PermissionGroupDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  permissionGroupErrors: [PermissionGroupError!]!
  group: Group
}

type PermissionGroupError {
  field: String
  message: String
  code: PermissionGroupErrorCode!
  permissions: [PermissionEnum!]
  users: [ID!]
}

enum PermissionGroupErrorCode {
  ASSIGN_NON_STAFF_MEMBER
  DUPLICATED_INPUT_ITEM
  CANNOT_REMOVE_FROM_LAST_GROUP
  LEFT_NOT_MANAGEABLE_PERMISSION
  OUT_OF_SCOPE_PERMISSION
  OUT_OF_SCOPE_USER
  REQUIRED
  UNIQUE
  INVALID
  NOT_EDITABLE
}

input PermissionGroupFilterInput {
  search: String
  isGlobal: Boolean
  isEditable: Boolean
}

enum PermissionGroupSortField {
  NAME
}

input PermissionGroupSortingInput {
  direction: OrderDirection!
  field: PermissionGroupSortField!
}

type PermissionGroupUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  group: Group
  permissionGroupErrors: [PermissionGroupError!]!
}

input PermissionGroupUpdateInput {
  addPermissions: [PermissionEnum!]
  addUsers: [ID!]
  groupConfiguration: GroupConfigurationUpdateInput!
  removePermissions: [PermissionEnum!]
  removeUsers: [ID!]
}

enum PersonGenderEnum {
  MALE
  FEMALE
}

type PharmacyCredentials {
  branch: Branch
  errors: [IntegrationGraphqlError]
  userName: String
}

input PharmacyCredentialsInput {
  branch: ID!
  password: String!
  token: String
  userName: String!
}

type Plan implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  currency: String!
  fixedCostAmount: Float!
  fixedCost: Money
  isActive: Boolean!
  fixedOrderCostAmount: Float!
  fixedOrderCost: Money
  fixedOrderPercentage: Float!
  name: String!
  validFrom: DateTime!
  validTill: DateTime
  description: String
  period: PlanPeriod!
  subscriptions(
    before: String
    after: String
    first: Int
    last: Int
  ): VendorSubscriptionCountableConnection!
  isEditable: Boolean
}

type PlanCountableConnection {
  pageInfo: PageInfo!
  edges: [PlanCountableEdge!]!
  totalCount: Int
}

type PlanCountableEdge {
  node: Plan!
  cursor: String!
}

type PlanCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  subscriptionErrors: [SubscriptionError!]!
  plan: Plan
}

input PlanFilterInput {
  name: String
  name_Icontains: String
  isActive: Boolean
}

input PlanInput {
  name: String
  validFrom: DateTime
  validTill: DateTime
  fixedCostAmount: Decimal
  fixedOrderCostAmount: Decimal
  fixedOrderPercentage: Decimal
  isActive: Boolean
  description: String
  period: period
}

input PlanOrder {
  direction: OrderDirection!
  field: PlanOrderField
}

enum PlanOrderField {
  NAME
}

enum PlanPeriod {
  MONTHLY
  HALF_YEAR
  YEARLY
  WEEKLY
  THREE_MONTHS
}

type PlanUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  subscriptionErrors: [SubscriptionError!]!
  plan: Plan
}

type Plugin implements Node {
  id: ID!
  name: String!
  description: String!
  active: Boolean!
  configuration: [ConfigurationItem]
}

type PluginCountableConnection {
  pageInfo: PageInfo!
  edges: [PluginCountableEdge!]!
  totalCount: Int
}

type PluginCountableEdge {
  node: Plugin!
  cursor: String!
}

type PluginError {
  field: String
  message: String
  code: PluginErrorCode!
}

enum PluginErrorCode {
  GRAPHQL_ERROR
  INVALID
  PLUGIN_MISCONFIGURED
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input PluginFilterInput {
  active: Boolean
  search: String
}

enum PluginSortField {
  NAME
  IS_ACTIVE
}

input PluginSortingInput {
  direction: OrderDirection!
  field: PluginSortField!
}

type PluginUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  plugin: Plugin
  pluginsErrors: [PluginError!]!
}

input PluginUpdateInput {
  active: Boolean
  configuration: [ConfigurationItemInput]
}

type Prescription implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  prescriptionId: String!
  referenceNumber: String!
  clinician: String
  providerLicense: String
  patientId: Int
  patientIdentifier: String
  dispenseStatus: PrescriptionDispenseStatus!
  lastDispenseDate: DateTime
  dispenseCount: Int!
  medicalAlerts: [String]
  medicationsHash: String
  diagnosesHash: String
  isDispensed: Boolean!
  medications(filter: MedicationFilterInput): [Medication]
  diagnosis(filter: DiagnoseFilterInput): [Diagnose]
  earlyRefillRequests(
    filter: EarlyRefillRequestFilterInput
    before: String
    after: String
    first: Int
    last: Int
  ): EarlyRefillRequestCountableConnection
  orders(
    sortBy: OrderSortingInput
    filter: OrderFilterInput
    before: String
    after: String
    first: Int
    last: Int
  ): OrderCountableConnection
  activeOrders: [Order]
  patient: Patient
  remainingDaysToNextRefill: Int
  dispenseMethod: PrescriptionDispenseMethodEnum
  visit: Visit
}

type PrescriptionCountableConnection {
  pageInfo: PageInfo!
  edges: [PrescriptionCountableEdge!]!
  totalCount: Int
}

type PrescriptionCountableEdge {
  node: Prescription!
  cursor: String!
}

enum PrescriptionDispenseMethodEnum {
  REFILL
  DISPENSE
  INGESTED
}

enum PrescriptionDispenseStatus {
  PENDING
  WAITING_PROVIDER_SELECTION
  IN_PROGRESS
  WAITING_ERX_HUB_APPROVAL
  ERX_HUB_FULLY_APPROVED
  ERX_HUB_PARTIALLY_APPROVED
  ERX_HUB_REJECTED
  ERX_HUB_TIMED_OUT
  ERX_HUB_AUTH_REQUEST_FAILED
  WAITING_ERX_HUB_CLAIM_APPROVAL
  ERX_HUB_CLAIM_APPROVED
  ERX_HUB_CLAIM_REJECTED
  ERX_HUB_CLAIM_FAILED
  READY_FOR_CUSTOMER_PICKUP
  OUT_FOR_DELIVERY
  DISPENSED
  DELIVERED
}

enum PrescriptionDispenseStatusEnum {
  PENDING
  WAITING_PROVIDER_SELECTION
  IN_PROGRESS
  WAITING_ERX_HUB_APPROVAL
  ERX_HUB_FULLY_APPROVED
  ERX_HUB_PARTIALLY_APPROVED
  ERX_HUB_REJECTED
  ERX_HUB_TIMED_OUT
  ERX_HUB_AUTH_REQUEST_FAILED
  WAITING_ERX_HUB_CLAIM_APPROVAL
  ERX_HUB_CLAIM_APPROVED
  ERX_HUB_CLAIM_REJECTED
  ERX_HUB_CLAIM_FAILED
  READY_FOR_CUSTOMER_PICKUP
  OUT_FOR_DELIVERY
  DISPENSED
  DELIVERED
}

type PrescriptionError {
  field: String
  message: String
  code: PrescriptionErrorCode!
}

enum PrescriptionErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  INGESTED
  CONTROLLED_DRUG
}

input PrescriptionFilterInput {
  referenceNumber: String
  referenceNumber_Icontains: String
  canRefill: Boolean
  search: String
  medication: String
  created: DateRangeInput
  orders: [ID]
  ordersNumbers: [Int]
  orderType: OrderTypesEnum
  status: [PrescriptionDispenseStatusEnum]
}

type PrescriptionOrderAssignVendors {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  success: Boolean
  orders: [Order]
  orderErrors: [OrderError!]!
}

input PrescriptionOrderAssignVendorsInput {
  order: ID!
  branches: [ID]!
}

enum PrescriptionSortField {
  CREATED
  REFERENCE_NUMBER
  PATIENT_IDENTIFIER
  CLINICIAN
  PROVIDER_LICENSE
}

input PrescriptionSortingInput {
  direction: OrderDirection!
  field: PrescriptionSortField!
}

type PrescriptionStatusChanged {
  prescription: Prescription
}

enum PriceRangeEnum {
  VERY_CHEAP
  CHEAP
  AVERAGE
  EXPENSIVE
  VERY_EXPENSIVE
}

type PricingRule implements Node {
  id: ID!
  weightFrom: Float!
  weightTo: Float!
  price: Float!
}

type PricingRuleCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  pricingRuleErrors: [ShippingError!]!
  pricingRule: PricingRule
}

type PricingRuleDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  pricingRuleErrors: [ShippingError!]!
  pricingRule: PricingRule
}

input PricingRuleInput {
  weightFrom: Float
  weightTo: Float
  price: Float!
}

type PricingRuleUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  pricingRuleErrors: [ShippingError!]!
  pricingRule: PricingRule
}

enum Priority {
  HIGH
  LOW
  MEDIUM
}

enum ProcessingStatus {
  APPROVED
  DRAFT
  EXPIRED
  PUBLISHED
  REJECTED
  UNDER_REVIEW
}

type Product implements Node & ObjectWithExtendedTranslatableFields {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String
  description: String
  descriptionJson: JSONString
  publicationDate: Date
  isPublished: Boolean!
  productType: ProductType!
  slug: String!
  category: Category
  updatedAt: DateTime
  createdAt: DateTime!
  chargeTaxes: Boolean!
  weight: Weight
  isAddon: Boolean
  hasAddons: Boolean
  totalLikes: Int!
  benefits: String
  howToUse: String
  thumbnail: Image
  isAvailable(branchId: ID): Boolean
  taxType: TaxType
  attributes: [SelectedAttribute!]!
  imageById(id: ID): ProductImage
  variants: [ProductVariant]
  images: [ProductImage]
  collections: [Collection]
  translation(languageCode: LanguageCodeEnum!): ProductTranslation
  isLiked: Boolean
}

type ProductAttributeError {
  field: String
  message: String
  code: ProductErrorCode!
  attributes: [ID!]
}

type ProductBrand implements Node {
  id: ID!
  name: String!
  products(
    before: String
    after: String
    first: Int
    last: Int
  ): ProductCountableConnection!
}

type ProductBrandCountableConnection {
  pageInfo: PageInfo!
  edges: [ProductBrandCountableEdge!]!
  totalCount: Int
}

type ProductBrandCountableEdge {
  node: ProductBrand!
  cursor: String!
}

type ProductBrandCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  productBrand: ProductBrand
}

type ProductBrandDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  productBrand: ProductBrand
}

input ProductBrandInput {
  name: String
}

type ProductBrandUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  productBrand: ProductBrand
}

type ProductBulkDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  count: Int!
  productErrors: [ProductError!]!
}

type ProductBulkPublish {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  count: Int!
  productErrors: [ProductError!]!
}

type ProductCountableConnection {
  pageInfo: PageInfo!
  edges: [ProductCountableEdge!]!
  totalCount: Int
}

type ProductCountableEdge {
  node: Product!
  cursor: String!
}

type ProductCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  product: Product
}

input ProductCreateInput {
  attributes: [AttributeValueInput]
  publicationDate: Date
  category: ID
  chargeTaxes: Boolean
  collections: [ID]
  description: String
  descriptionJson: JSONString
  isPublished: Boolean
  name: String
  slug: String
  taxCode: String
  seo: SeoInput
  weight: WeightScalar
  sku: String
  trackInventory: Boolean
  isAddon: Boolean
  hasAddons: Boolean
  benefits: String
  howToUse: String
  brand: ID
  productType: ID!
}

type ProductDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  product: Product
}

type ProductError {
  field: String
  message: String
  code: ProductErrorCode!
}

enum ProductErrorCode {
  ALREADY_EXISTS
  ATTRIBUTE_ALREADY_ASSIGNED
  ATTRIBUTE_CANNOT_BE_ASSIGNED
  ATTRIBUTE_VARIANTS_DISABLED
  DUPLICATED_INPUT_ITEM
  GRAPHQL_ERROR
  INVALID
  NOT_PRODUCTS_IMAGE
  NOT_FOUND
  REQUIRED
  UNIQUE
  NO_PURCHASE_HISTORY
}

input ProductFilterInput {
  isPublished: Boolean
  collections: [ID]
  categories: [ID]
  hasCategory: Boolean
  attributes: [AttributeInput]
  stockAvailability: StockAvailability
  productType: ID
  stocks: ProductStockFilterInput
  search: String
  isAddon: Boolean
  hasAddons: Boolean
  isLikedByUser: Boolean
  productTypes: [ID]
  onSale: Boolean
  brands: [ID]
}

type ProductImage implements Node {
  id: ID!
  sortOrder: Int
  alt: String!
  url: String!
}

type ProductImageBulkDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  count: Int!
  productErrors: [ProductError!]!
}

type ProductImageCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  product: Product
  image: ProductImage
  productErrors: [ProductError!]!
}

input ProductImageCreateInput {
  alt: String
  image: String!
  product: ID!
}

type ProductImageDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  product: Product
  image: ProductImage
  productErrors: [ProductError!]!
}

type ProductImageReorder {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  product: Product
  images: [ProductImage]
  productErrors: [ProductError!]!
}

type ProductImageUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  product: Product
  image: ProductImage
  productErrors: [ProductError!]!
}

input ProductImageUpdateInput {
  alt: String
}

input ProductInput {
  attributes: [AttributeValueInput]
  publicationDate: Date
  category: ID
  chargeTaxes: Boolean
  collections: [ID]
  description: String
  descriptionJson: JSONString
  isPublished: Boolean
  name: String
  slug: String
  taxCode: String
  seo: SeoInput
  weight: WeightScalar
  sku: String
  trackInventory: Boolean
  isAddon: Boolean
  hasAddons: Boolean
  benefits: String
  howToUse: String
  brand: ID
}

type ProductLike {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  productLike: ProductLikeType
}

input ProductLikeInput {
  product: ID!
}

type ProductLikeType implements Node {
  id: ID!
  product: Product!
  customerId: Int!
}

input ProductOrder {
  direction: OrderDirection!
  field: ProductOrderField
}

enum ProductOrderField {
  NAME
  DATE
  TYPE
  PUBLISHED
  CREATED
}

input ProductStockFilterInput {
  branchIds: [ID!]
  quantity: IntRangeInput
}

type ProductTranslatableContent implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: String!
  translation(languageCode: LanguageCodeEnum!): ProductTranslation
  product: Product
}

type ProductTranslate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  translationErrors: [TranslationError!]!
  product: Product
}

type ProductTranslation implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: String!
  language: LanguageDisplay!
}

type ProductType implements Node & ObjectWithBasicTranslatableFields {
  id: ID!
  name: String
  slug: String!
  hasVariants: Boolean!
  isShippingRequired: Boolean!
  weight: Weight
  products(
    before: String
    after: String
    first: Int
    last: Int
  ): ProductCountableConnection
  taxRate: TaxRateType
  taxType: TaxType
  variantAttributes: [Attribute]
  productAttributes: [Attribute]
  availableAttributes(
    filter: AttributeFilterInput
    before: String
    after: String
    first: Int
    last: Int
  ): AttributeCountableConnection
  translation(languageCode: LanguageCodeEnum!): ProductTypeTranslation
}

type ProductTypeBulkDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  count: Int!
  productErrors: [ProductError!]!
}

enum ProductTypeConfigurable {
  CONFIGURABLE
  SIMPLE
}

type ProductTypeCountableConnection {
  pageInfo: PageInfo!
  edges: [ProductTypeCountableEdge!]!
  totalCount: Int
}

type ProductTypeCountableEdge {
  node: ProductType!
  cursor: String!
}

type ProductTypeCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  productType: ProductType
}

type ProductTypeDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  productType: ProductType
}

input ProductTypeFilterInput {
  search: String
  configurable: ProductTypeConfigurable
  ids: [ID]
}

input ProductTypeInput {
  name: String
  slug: String
  hasVariants: Boolean
  productAttributes: [ID]
  variantAttributes: [ID]
  isShippingRequired: Boolean
  weight: WeightScalar
  taxCode: String
}

type ProductTypeReorderAttributes {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productType: ProductType
  productErrors: [ProductError!]!
}

enum ProductTypeSortField {
  NAME
  SHIPPING_REQUIRED
}

input ProductTypeSortingInput {
  direction: OrderDirection!
  field: ProductTypeSortField!
}

type ProductTypeTranslate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  translationErrors: [TranslationError!]!
  productType: ProductType
}

type ProductTypeTranslation implements Node {
  id: ID!
  name: String!
  language: LanguageDisplay!
}

type ProductTypeUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  productType: ProductType
}

type ProductUnLike {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  productLike: ProductLikeType
}

type ProductUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  product: Product
}

type ProductVariant implements Node & ObjectWithBasicTranslatableFields {
  id: ID!
  name: String
  sku: String!
  product: Product
  trackInventory: Boolean!
  weight: Weight
  attributes: [SelectedAttribute!]!
  quantityOrdered: Int
  revenue(period: ReportingPeriod): TaxedMoney
  images: [ProductImage]
  translation(languageCode: LanguageCodeEnum!): ProductVariantTranslation
  stocks(branchId: ID): [Stock]
  quantityAvailable(branchId: ID): Int!
  vendorProductVariant(branchId: ID): VendorProductVariant
}

type ProductVariantBulkCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  count: Int!
  productVariants: [ProductVariant!]!
  bulkProductErrors: [BulkProductError!]!
}

input ProductVariantBulkCreateInput {
  attributes: [AttributeValueInput]!
  sku: String!
  trackInventory: Boolean
  weight: WeightScalar
}

type ProductVariantBulkDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  count: Int!
  productErrors: [ProductError!]!
}

type ProductVariantCountableConnection {
  pageInfo: PageInfo!
  edges: [ProductVariantCountableEdge!]!
  totalCount: Int
}

type ProductVariantCountableEdge {
  node: ProductVariant!
  cursor: String!
}

type ProductVariantCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

input ProductVariantCreateInput {
  attributes: [AttributeValueInput]!
  sku: String
  trackInventory: Boolean
  weight: WeightScalar
  product: ID!
}

type ProductVariantDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

input ProductVariantFilterInput {
  categories: [ID]
  productTypes: [ID]
  search: String
  onSale: Boolean
  productBrands: [ID]
}

type ProductVariantImageAssign {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productVariant: ProductVariant
  image: ProductImage
  productErrors: [ProductError!]!
}

type ProductVariantImageUnassign {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productVariant: ProductVariant
  image: ProductImage
  productErrors: [ProductError!]!
}

input ProductVariantInput {
  attributes: [AttributeValueInput]
  sku: String
  trackInventory: Boolean
  weight: WeightScalar
}

type ProductVariantStocksDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productVariant: ProductVariant
  stockErrors: [StockError!]!
}

type ProductVariantTranslatableContent implements Node {
  id: ID!
  name: String!
  translation(languageCode: LanguageCodeEnum!): ProductVariantTranslation
  productVariant: ProductVariant
}

type ProductVariantTranslate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  translationErrors: [TranslationError!]!
  productVariant: ProductVariant
}

type ProductVariantTranslation implements Node {
  id: ID!
  name: String!
  language: LanguageDisplay!
}

type ProductVariantUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

type ProviderGuidedCareHealthProgramTeam implements H_Node {
  appointments: [Appointment]
  createdBy: String
  createdDate: Instant
  description: String
  guidedCareHealthProgram: GuidedCareHealthProgram!
  id: ID!
  isActive: Boolean
  isPatientAlreadyEnrolled: Boolean
  lastModifiedDate: Instant
  maxNumberOfPatients: Int
  name: String
  numberOfEnrolledPatients: Int
  provider: Vendor!
  teamEnrolledPatients: [HealthProgramMember]
  teamMembers: [ProviderGuidedCareProgramTeamMember]
  teamStatus: ProviderGuidedCareTeamStatus
  visits: [Visit]
}

type ProviderGuidedCareHealthProgramTeamCountableConnection {
  edges: [ProviderGuidedCareHealthProgramTeamCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type ProviderGuidedCareHealthProgramTeamCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProviderGuidedCareHealthProgramTeam!
}

type ProviderGuidedCareHealthProgramTeamCRUD {
  providerGuidedCareHealthProgramTeam: ProviderGuidedCareHealthProgramTeam
  providerGuidedCareHealthProgramTeamErrors: [H_EntityError!]!
}

input ProviderGuidedCareHealthProgramTeamFilterInput {
  guidedCareHealthProgramId: ID
  healthProgramMembers: [ID]
  patientUsers: [ID]
  patients: [String]
  payerId: ID
  providerId: ID
}

input ProviderGuidedCareHealthProgramTeamInput {
  description: String
  guidedCareHealthProgram: ID!
  id: ID
  isActive: Boolean
  maxNumberOfPatients: Int
  name: String
  providerId: ID!
  teamMembers: [ProviderGuidedCareProgramTeamMemberInput]
}

input ProviderGuidedCareHealthProgramTeamPayerResponseInput {
  isResponseApprove: Boolean
  teamId: ID
}

type ProviderGuidedCareProgramTeamMember implements H_Node {
  doctor: Doctor
  guidedCareProgramTeamMember: GuidedCareProgramTeamMember
  id: ID!
  isBackup: Boolean
  user: User
}

input ProviderGuidedCareProgramTeamMemberInput {
  doctorId: ID!
  guidedCareProgramTeamMember: GuidedCareProgramTeamMemberInput!
  isBackup: Boolean
  userId: ID!
}

enum ProviderGuidedCareTeamStatus {
  APPROVED
  PENDING
  REJECTED
}

input PushNotificationInput {
  key: String
  title: String
  body: String
  app: AppTypes!
  data: JSONString
}

type Qualification implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  code: String!
  fromDate: Date
  toDate: Date
  issuer: String!
  doctor: Doctor
}

input QualificationInput {
  code: String
  fromDate: Date
  toDate: Date
  issuer: String
}

type Query {
  bulkFiles(
    after: String
    before: String
    filters: BulkFilesFilterInput!
    first: Int
    last: Int
    sortBy: BulkFilesSortingInput
  ): BulkFileConnection
  bulkTemplates: [BulkTemplate]
  downloadBulkFile(fileId: ID!): String
  medicalDeliveryRequest(id: ID!): MedicalDeliveryRequest
  medicalDeliveryRequests(
    filter: MedicalOrderDeliveryFilterInput
    sortBy: MedicalDeliverySortingInput
    before: String
    after: String
    first: Int
    last: Int
  ): MedicalDeliveryRequestCountableConnection
  prescription(
    id: ID
    referenceNumber: String
    patientIdentifier: String
  ): Prescription
  prescriptions(
    filter: PrescriptionFilterInput
    sortBy: PrescriptionSortingInput
    before: String
    after: String
    first: Int
    last: Int
  ): PrescriptionCountableConnection
  earlyRefillReasons: [EarlyRefillReason]
  earlyRefillRequests(
    filter: EarlyRefillRequestFilterInput
    before: String
    after: String
    first: Int
    last: Int
  ): EarlyRefillRequestCountableConnection
  vendorInvoice(id: ID!): VendorInvoice
  vendorInvoices(
    filter: VendorInvoiceFilterInput
    sortBy: VendorInvoiceOrder
    before: String
    after: String
    first: Int
    last: Int
  ): VendorInvoiceCountableConnection
  translations(
    kind: TranslatableKinds!
    before: String
    after: String
    first: Int
    last: Int
  ): TranslatableItemConnection
  translation(id: ID!, kind: TranslatableKinds!): TranslatableItem
  stock(id: ID!): Stock
  stocks(
    filter: StockFilterInput
    before: String
    after: String
    first: Int
    last: Int
  ): StockCountableConnection
  siteSettings: SiteSettings!
  shippingZone(id: ID!): ShippingZone
  shippingZones(
    before: String
    after: String
    first: Int
    last: Int
  ): ShippingZoneCountableConnection
  attributes(
    filter: AttributeFilterInput
    sortBy: AttributeSortingInput
    before: String
    after: String
    first: Int
    last: Int
  ): AttributeCountableConnection
  attribute(id: ID!): Attribute
  categories(
    filter: CategoryFilterInput
    sortBy: CategorySortingInput
    level: Int
    before: String
    after: String
    first: Int
    last: Int
  ): CategoryCountableConnection
  category(id: ID, slug: String): Category
  collection(id: ID, slug: String): Collection
  collections(
    filter: CollectionFilterInput
    sortBy: CollectionSortingInput
    before: String
    after: String
    first: Int
    last: Int
  ): CollectionCountableConnection
  product(id: ID, slug: String): Product
  products(
    filter: ProductFilterInput
    sortBy: ProductOrder
    before: String
    after: String
    first: Int
    last: Int
  ): ProductCountableConnection
  productType(id: ID!): ProductType
  productTypes(
    filter: ProductTypeFilterInput
    sortBy: ProductTypeSortingInput
    before: String
    after: String
    first: Int
    last: Int
  ): ProductTypeCountableConnection
  productVariant(id: ID!): ProductVariant
  productVariants(
    filter: ProductVariantFilterInput
    sortBy: VariantSortingInput
    before: String
    after: String
    first: Int
    last: Int
  ): ProductVariantCountableConnection
  vendorCategories(
    filter: CategoryFilterInput
    sortBy: CategorySortingInput
    before: String
    after: String
    first: Int
    last: Int
  ): CategoryCountableConnection
  storeProducts(
    filter: VendorProductFilterInput
    sortBy: VendorProductSortingInput
    before: String
    after: String
    first: Int
    last: Int
  ): VendorProductVariantCountableConnection
  storeProduct(id: ID!): VendorProductVariant
  productBrands(
    before: String
    after: String
    first: Int
    last: Int
  ): ProductBrandCountableConnection
  productBrand(id: ID!): ProductBrand
  order(id: ID!): Order
  orders(
    sortBy: OrderSortingInput
    filter: OrderFilterInput
    before: String
    after: String
    first: Int
    last: Int
  ): OrderCountableConnection
  draftOrders(
    sortBy: OrderSortingInput
    filter: OrderDraftFilterInput
    before: String
    after: String
    first: Int
    last: Int
  ): OrderCountableConnection
  ordersDashboard(filter: OrderDashboardFilterInput): [Aggregation]
  ordersSocialDashboard(filter: OrderDashboardFilterInput): [DictType]
  ordersTotal(period: ReportingPeriod): TaxedMoney
  orderByToken(token: UUID!): Order
  orderRejectionReasons(
    before: String
    after: String
    first: Int
    last: Int
  ): OrderRejectionReasonCountableConnection
  plugin(id: ID!): Plugin
  plugins(
    filter: PluginFilterInput
    sortBy: PluginSortingInput
    before: String
    after: String
    first: Int
    last: Int
  ): PluginCountableConnection
  sale(id: ID!): Sale
  sales(
    filter: SaleFilterInput
    sortBy: SaleSortingInput
    query: String
    before: String
    after: String
    first: Int
    last: Int
  ): SaleCountableConnection
  taxTypes: [TaxType]
  checkout(token: UUID!): Checkout
  checkouts(
    before: String
    after: String
    first: Int
    last: Int
  ): CheckoutCountableConnection
  checkoutLine(id: ID): CheckoutLine
  checkoutLines(
    before: String
    after: String
    first: Int
    last: Int
  ): CheckoutLineCountableConnection
  downloadSubList(subListId: ID!): String
  getAllListFields: [Field]
  getDecision(id: ID!): Decision
  getDecisions(
    after: String
    before: String
    decisionName: String
    first: Int
    isActive: Boolean
    isScript: Boolean
    last: Int
    plan: ID
    sortBy: DecisionSortingInput
  ): DecisionConnection
  getPlans(isRiskTemplate: Boolean, planCode: String): [DecisionPlan]
  getRiskFactorField(id: ID!): RiskFactorField
  getRiskFactorFieldCategories: [RiskFactorFieldCategory]
  getRiskFactorFieldUnits: [RiskFactorFieldUnit]
  getRiskFactorFields(
    after: String
    before: String
    filter: RiskFactorFieldFilterInput!
    first: Int
    last: Int
    sortBy: RiskFactorFieldSortingInput
  ): RiskFactorFieldConnection
  getRiskFactorTemplate(id: ID!): RiskFactorTemplate
  getRiskFactorTemplates(
    after: String
    before: String
    filter: RiskFactorTemplateFilterInput!
    first: Int
    last: Int
    sortBy: RiskFactorTemplateSortingInput
  ): RiskFactorTemplateConnection
  getSubList(id: ID!): SubList
  getSubListItems(
    after: String
    before: String
    code: String
    display: String
    first: Int
    last: Int
    sortBy: SubListItemSortingInput
    subListId: ID!
  ): SubListItemConnection
  getSubLists(
    after: String
    before: String
    display: String
    field: ID
    first: Int
    last: Int
    sortBy: SubListSortingInput
  ): SubListConnection
  anonymousChatGroups(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): AnonymousChatGroupCountableConnection

  """
  Look up a Appointment by ID.
  """
  appointment(
    """
    ID of the Appointment.
    """
    id: ID!
  ): Appointment

  """
  List of appointments
  """
  appointments(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for Appointment
    """
    filter: AppointmentFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
    sortBy: AppointmentSortingInput
  ): AppointmentCountableConnection
  doctorVisitHealthProgramTracking(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: DoctorHealthProgramPointsFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): DoctorHealthProgramTotalPointsTrackingConnection!
  doctorVisitRejectionAudits(
    after: String
    before: String
    filter: DoctorVisitRejectionAuditFilterInput
    first: Int
    last: Int
  ): DoctorVisitRejectionAuditCountableConnection!
  guidedCareHealthProgram(id: ID!): GuidedCareHealthProgram
  guidedCareHealthPrograms(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: GuidedCareHealthProgramFilter

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): GuidedCareHealthProgramCountableConnection
  healthChannel(
    """
    ID of the HealthChannel.
    """
    id: ID
  ): HealthChannel
  healthChannelCategories(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): HealthChannelCategoryCountableConnection
  healthChannelCategory(
    """
    ID of the HealthChannelCategory.
    """
    id: ID
  ): HealthChannelCategory
  healthChannelFollowers(
    after: String
    before: String
    filter: HealthChannelFollowerFilterInput
    first: Int
    last: Int
  ): HealthChannelFollowerCountableConnection!
  healthChannels(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: HealthChannelFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): HealthChannelCountableConnection
  healthCheckForHealthProgram: String

  """
  Look up HealthProgram by ID.
  """
  healthProgram(
    """
    ID of the HealthProgram.
    """
    id: ID!
  ): HealthProgram

  """
  Look up BenefitOption by ID.
  """
  healthProgramBenefitGroupOption(
    """
    ID of the BenefitOption.
    """
    id: ID
  ): BenefitOption
  healthProgramBenefitGroupOptions(filter: BenefitFilterInput): [BenefitOption]
  healthProgramBenefitGroups(filter: BenefitFilterInput): [BenefitGroup]
  healthProgramCallsPerVendor(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: CallsPerVendorFilter

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): HealthProgramCallsPerVendorResponseConnection!

  """
  Look up ExclusionOption by ID.
  """
  healthProgramExclusionOption(
    """
    ID of the ExclusionOption.
    """
    id: ID
  ): ExclusionOption
  healthProgramExclusionOptions(filter: BenefitFilterInput): [ExclusionOption]
  healthProgramExtraBenefits(filter: BenefitFilterInput): [ExtraBenefit]
  healthProgramMember(id: ID!): HealthProgramMember
  healthProgramMemberLists(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: HealthProgramMemberListFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
    sortBy: HealthProgramMemberListSortingInput
  ): HealthProgramMemberListCountableConnection
  healthProgramMembers(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: HealthProgramMemberFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): HealthProgramMemberCountableConnection
  healthProgramNetworkProviderProfessionals(
    after: String
    before: String
    filter: HealthProgramNetworkProviderProfessionalFilterInput
    first: Int
    last: Int
  ): HealthProgramNetworkProviderProfessionalCountableConnection
  healthProgramNetworkProviders(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: HealthProgramNetworkProviderFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): HealthProgramNetworkProviderCountableConnection
  healthProgramNetworks(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: HealthProgramNetworkFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
    sortBy: HealthProgramNetworkSortingInput
  ): HealthProgramNetworkCountableConnection
  healthProgramTemplate(id: ID!): HealthProgramTemplate
  healthProgramTemplates(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: HealthProgramTemplateFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): HealthProgramTemplateCountableConnection
  healthProgramTotalPointsReport(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: HealthProgramPointsFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): HealthProgramTotalPointsTrackingConnection!
  healthProgramUserSubscriptions(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: HealthProgramUserSubscriptionFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): HealthProgramUserSubscriptionCountableConnection
  healthProgramVendorTotalPointsReport(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: HealthProgramVendorPointsFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): HealthProgramVendorTotalPointsTrackingConnection!
  healthPrograms(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: HealthProgramFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
    sortBy: HealthProgramSortingInput
  ): HealthProgramCountableConnection
  insuranceNetwork(id: ID!): InsuranceNetwork
  insuranceNetworkFacilities(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: InsuranceNetworkFacilityFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): InsuranceNetworkFacilityCountableConnection
  insuranceNetworks(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: InsuranceNetworkFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
    sortBy: InsuranceSortingInput
  ): InsuranceNetworkCountableConnection
  patientEligibleTeams(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: ProviderGuidedCareHealthProgramTeamFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ProviderGuidedCareHealthProgramTeamCountableConnection
  providerGuidedCareHealthProgramTeam(
    id: ID!
  ): ProviderGuidedCareHealthProgramTeam
  providerGuidedCareHealthProgramTeams(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: ProviderGuidedCareHealthProgramTeamFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ProviderGuidedCareHealthProgramTeamCountableConnection
  reviewQuestions: [ReviewQuestion]
  teamEnrolledMembers(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
    teamId: ID!
  ): HealthProgramMemberCountableConnection

  """
  Look up HealthProgram by ID.
  """
  visit(
    """
    ID of the Visit.
    """
    id: ID
  ): Visit
  visitCancellationReasons: [VisitCancelReason]
  visitComplains(
    after: String
    before: String
    filter: VisitComplainFilterInput
    first: Int
    last: Int
  ): VisitComplainCountableConnection!
  visitMessages(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: VisitMessageFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): VisitMessageCountableConnection
  visitRejectionReasons: [VisitRejectionReason]
  visitReviewQuestions(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: VisitReviewQuestionFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): VisitReviewQuestionCountableConnection
  visitSummaries(
    after: String
    before: String
    filter: VisitSummaryFilterInput
    first: Int
    last: Int
  ): VisitSummaryCountableConnection!
  visitSummary(
    """
    ID of the HealthProgram.
    """
    id: ID!
  ): VisitSummary

  """
  all accessible visits for the requester
  """
  visits(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: VisitFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
    sortBy: VisitSortingInput
  ): VisitCountableConnection
  getClinicianCredentials(user: ID!): ClinicianCredentials
  getPatientPrescription(
    erxReference: String
    memberId: String!
  ): VisitPrescription
  getPharmacyCredentials(branch: ID!): PharmacyCredentials
  getPrescriptionById(id: ID!): VisitPrescription
  getVisitPrescriptions(
    after: String
    before: String
    first: Int
    last: Int
    sortBy: VisitPrescriptionSortingInput
    visit: ID!
  ): VisitPrescriptionConnection
  getReferralById(id: ID!): PatientReferral
  getVisitReferrals(
    after: String
    before: String
    first: Int
    last: Int
    sortBy: VisitReferralSortingInput
    visit: ID!
  ): PatientReferralConnection
  codeSystemConceptAutoCompleteSearch(
    codeSystemCode: CodeSystemCode
    codeSystemId: ID
    keyword: String!
    propertyCode: String!
  ): [String]
  codeSystemConceptSearch(
    after: String
    before: String
    codeSystemCode: CodeSystemCode
    codeSystemId: ID
    first: Int
    keyword: String!
    last: Int
  ): CodeSystemConceptConnection
  containsControlledDrugs(genericDrugs: [String]): Boolean
  downloadCodeSystemFile(code: CodeSystemCode!, codeSystemId: ID): String
  getAllowedDeliveryTypes(
    genericDrugs: [String]!
  ): [GenericDrugDeliveryEligibility]
  getClinician(nationalId: String!): Clinician
  getCodeSystem(id: ID!): CodeSystem
  getCodeSystemConcept(id: ID!): CodeSystemConcept
  getCodeSystemConcepts(
    after: String
    before: String
    codeSystemId: ID
    first: Int
    last: Int
    searchParameters: [SearchParameter]
    showOnlyVisibleProperties: Boolean
  ): CodeSystemConceptConnection
  getCodeSystemConceptsByCode(
    after: String
    before: String
    codeSystemCode: CodeSystemCode
    first: Int
    last: Int
    searchParameters: [SearchParameter]
    showOnlyVisibleProperties: Boolean
  ): CodeSystemConceptConnection
  getCodeSystemDefinition(code: CodeSystemCode!): CodeSystemDefinition
  getCodeSystemDefinitionById(id: ID!): CodeSystemDefinition
  getCodeSystemDefinitionsSummery(name: String): [CodeSystemSummery]
  getCodeSystems(
    after: String
    before: String
    code: CodeSystemCode
    first: Int
    isActive: Boolean
    last: Int
  ): CodeSystemConnection
  getRejectionReasons: [RejectionReason]
  getTradeDrugQuantity(
    erxReference: String!
    patientIdentifier: String!
  ): [MedicationTradeDrugs]
  getTradeDrugs(tradeCodes: [String]): [TradeDrug]
  payer(id: ID!): Payer
  payers(
    filter: PayerFilterInput
    before: String
    after: String
    first: Int
    last: Int
  ): PayerCountableConnection
  doctor(id: ID, ssoId: String): Doctor
  doctors(
    filter: DoctorFilterInput
    sortBy: DoctorOrder
    before: String
    after: String
    first: Int
    last: Int
  ): DoctorCountableConnection
  specialization(id: ID): Specialization
  specializations(
    filter: SpecializationFilterInput
    before: String
    after: String
    first: Int
    last: Int
  ): SpecializationCountableConnection
  healthCondition(id: ID): HealthCondition
  healthConditions(
    filter: HealthConditionFilterInput
    before: String
    after: String
    first: Int
    last: Int
  ): HealthConditionCountableConnection
  doctorsAvailabilitiesSum(
    doctors: [ID]!
    fromDate: Date!
    toDate: Date!
  ): [DoctorAvailabilitiesSum]
  patient(id: ID, nationalId: String): Patient
  patients(
    filter: PatientFilterInput
    before: String
    after: String
    first: Int
    last: Int
  ): PatientCountableConnection
  plan(id: ID): Plan
  plans(
    filter: PlanFilterInput
    sortBy: PlanOrder
    before: String
    after: String
    first: Int
    last: Int
  ): PlanCountableConnection
  vendorSubscription(id: ID): VendorSubscription
  vendorSubscriptions(
    filter: SubscriptionFilterInput
    before: String
    after: String
    first: Int
    last: Int
  ): VendorSubscriptionCountableConnection
  planPeriods: [String]
  branch(id: ID!): Branch
  branches(
    userLocation: LocationInput
    filter: BranchFilterInput
    sortBy: BranchOrder
    before: String
    after: String
    first: Int
    last: Int
  ): BranchCountableConnection
  vendor(id: ID!): Vendor
  vendors(
    userLocation: LocationInput
    filter: VendorFilterInput
    sortBy: VendorOrder
    before: String
    after: String
    first: Int
    last: Int
  ): VendorCountableConnection
  division(id: ID!): Division
  divisions(
    before: String
    after: String
    first: Int
    last: Int
  ): DivisionConnection
  wallet: Wallet
  customersWallets(
    filter: WalletFilterInput
    sortBy: WalletOrder
    before: String
    after: String
    first: Int
    last: Int
  ): WalletCountableConnection
  city(id: ID!): City
  cities(
    filter: CityFilterInput
    sortBy: CityOrder
    before: String
    after: String
    first: Int
    last: Int
  ): CityCountableConnection
  block(id: ID!): Block
  blocks(
    filter: BlockFilterInput
    sortBy: BlockOrder
    before: String
    after: String
    first: Int
    last: Int
  ): BlockCountableConnection
  address(id: ID!): Address
  customers(
    branch: ID
    hasChatWith: Boolean
    filter: CustomerFilterInput
    sortBy: UserSortingInput
    before: String
    after: String
    first: Int
    last: Int
  ): UserCountableConnection
  customersDashboard(filter: CustomerDashboardFilterInput): [Aggregation]
  permissions: [Permission]!
  keyCloakPermissions(appType: AppTypes!): [Permission]
  permissionGroups(
    appType: AppTypes!
    vendorId: ID
    filter: PermissionGroupFilterInput
    sortBy: PermissionGroupSortingInput
    before: String
    after: String
    first: Int
    last: Int
  ): GroupCountableConnection
  permissionGroup(id: ID!): Group
  me: User
  user(id: ID!): User
  countries: [CountryDisplay]
  users(
    filter: UserFilterInput
    sortBy: UserSortingInput
    before: String
    after: String
    first: Int
    last: Int
  ): UserCountableConnection
  groupCandidateUsers(
    appType: AppTypes!
    vendorId: ID
    filter: UserFilterInput
    sortBy: UserSortingInput
    before: String
    after: String
    first: Int
    last: Int
  ): UserCountableConnection
  medlistUsers(
    filter: UserFilterInput
    sortBy: UserSortingInput
    before: String
    after: String
    first: Int
    last: Int
  ): UserCountableConnection
  customer(nationalId: String!): User
  consumerViewPreference(view: String!): ConsumerViewPreference
}

type Rad implements H_Node {
  code: String
  conceptId: String
  created: Instant
  id: ID!
  modified: Instant
  visit: Visit
}

type RateVendor {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  vendorErrors: [VendorError!]!
  vendorRating: VendorRating
}

type ReferralEdge {
  cursor: String
  node: PatientReferral
}

enum ReferralErrorCodes {
  REFERRAL_DOCTOR_NOT_FOUND
  REFERRAL_EMPTY_DOCTOR_LICENSE
  REFERRAL_ERROR_CALLING_INTEGRATOR
  REFERRAL_INVALID_ID
  REFERRAL_MAKER_NONE_NEGATIVE_PAGE_SIZE
  REFERRAL_MAKER_UNKNOWN
  REFERRAL_MAKER_UNKNOWN_TYPE
  REFERRAL_MEMBER_ID_IS_NULL
  REFERRAL_MEMBER_NOT_ACTIVE
  REFERRAL_NOT_FOUND
  REFERRAL_NO_PRINCIPAL_DIAGNOSIS
  REFERRAL_ONLY_ONE_PRINCIPAL_DIAGNOSIS_ALLOWED
  REFERRAL_OPERATION_NOT_ALLOWED
  REFERRAL_PATIENT_NOT_ELIGIBLE
  REFERRAL_PATIENT_NOT_FOUND
  REFERRAL_PAYER_LICENSE_NOT_DEFINED
  REFERRAL_PERMISSION_DENIED
  REFERRAL_USER_ID_NOT_DEFINED
}

type ReferralGraphqlError {
  code: ReferralErrorCodes
  errorType: ErrorType
  field: String
  message: String
}

enum ReferralOrderDirection {
  ASC
  DESC
}

input ReferralRequestInput {
  diagnosis: [DiagnosisInput]!
  observation: String!
  previousReferralReferenceID: String
  specialty: String!
  visitId: ID!
}

type RefillError {
  field: String
  message: String
  code: RefillErrorCode!
}

enum RefillErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type RejectionReason {
  code: String!
  display: String!
  id: ID!
}

type RejectVendor {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  rejectErrors: [VendorError!]!
  vendorRejectionReason: VendorRejectionReason
}

type RemoveVendorFromFavorite {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  customerFavoriteVendor: CustomerFavoriteVendor
  vendorErrors: [VendorError!]!
}

input ReorderInput {
  id: ID!
  sortOrder: Int
}

enum ReportingPeriod {
  TODAY
  THIS_MONTH
  LAST_7_DAYS
}

enum RequestedBy {
  PATIENT
  PROVIDER_GUIDED_CARE_HEALTH_PROGRAM_TEAM
}

input RequestedGenericDrugQuantity {
  code: String
  quantity: Float
}

type RequestPasswordResetByMobile {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  sessionToken: String
  accountErrors: [AccountError!]!
}

enum ResidencyTypesEnum {
  RESIDENCE
  VISITOR
}

type ResubmitOrderGetErxHubApproval {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  order: Order
  orderErrors: [OrderError!]!
}

type ReviewQuestion implements H_Node {
  created: Instant
  id: ID!
  modified: Instant
  question: String
  valueType: ReviewQuestionValueType
  visitsReviewQuestions(
    after: String
    before: String
    first: Int
    last: Int
  ): VisitReviewQuestionCountableConnection
}

enum ReviewQuestionValueType {
  BOOLEAN
  STAR_RATING
}

"""
Review an Visit
"""
type ReviewVisit {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  result: String
  visitErrors: [H_EntityError!]!
}

type RiskFactorField {
  allowedValues: [String]
  arabicDisplay: String
  category: RiskFactorFieldCategory
  code: String
  defaultValue: String
  display: String
  errors: [DecisionMakerGraphqlError]
  id: ID
  maxNormalRageValue: Float
  minNormalRageValue: Float
  standard: RiskFactorTemplateFieldStandard
  type: EntityType
  unit: RiskFactorFieldUnit
}

type RiskFactorFieldCategory {
  arabicDisplay: String
  code: String
  display: String
  id: ID
}

type RiskFactorFieldConnection {
  edges: [RiskFactorFieldEdge]
  pageInfo: PageInfo
  totalCount: Int
}

type RiskFactorFieldEdge {
  cursor: String
  node: RiskFactorField
}

input RiskFactorFieldFilterInput {
  arabicDisplay: String
  category: ID
  code: String
  display: String
}

enum RiskFactorFieldSortingField {
  ARABIC_DISPLAY
  CODE
  CREATED_DATE
  DISPLAY
}

input RiskFactorFieldSortingInput {
  direction: DecisionMakerOrderDirection!
  field: RiskFactorFieldSortingField!
}

type RiskFactorFieldUnit {
  arabicDisplay: String
  code: String
  display: String
  id: ID
}

type RiskFactorTemplate {
  arabicDisplay: String
  code: String
  display: String
  errors: [DecisionMakerGraphqlError]
  fields: [RiskFactorField]
  id: ID
  isActive: Boolean
}

type RiskFactorTemplateConnection {
  edges: [RiskFactorTemplateEdge]
  pageInfo: PageInfo
  totalCount: Int
}

type RiskFactorTemplateEdge {
  cursor: String
  node: RiskFactorTemplate
}

input RiskFactorTemplateFieldCategoryInput {
  id: ID!
}

input RiskFactorTemplateFieldInput {
  allowedValues: [String]
  arabicDisplay: String!
  category: RiskFactorTemplateFieldCategoryInput!
  code: String!
  defaultValue: String
  display: String!
  isMandatory: Boolean!
  maxNormalRageValue: Float
  minNormalRageValue: Float
  standard: RiskFactorTemplateFieldStandard!
  type: EntityType!
  unit: RiskFactorTemplateFieldUnitInput
}

enum RiskFactorTemplateFieldStandard {
  CPT
  LOINC
}

input RiskFactorTemplateFieldUnitInput {
  id: ID!
}

input RiskFactorTemplateFieldUpdateInput {
  arabicDisplay: String!
  category: RiskFactorTemplateFieldCategoryInput!
  defaultValue: String
  display: String!
  isMandatory: Boolean!
  maxNormalRageValue: Float
  minNormalRageValue: Float
  standard: RiskFactorTemplateFieldStandard!
  unit: RiskFactorTemplateFieldUnitInput
}

input RiskFactorTemplateFilterInput {
  arabicDisplay: String
  code: String
  diagnosisCode: String
  display: String
  isActive: Boolean
}

input RiskFactorTemplateInput {
  arabicDisplay: String!
  code: String!
  display: String!
  isActive: Boolean!
}

enum RiskFactorTemplateSortingField {
  ARABIC_DISPLAY
  CODE
  CREATED_DATE
  DIAGNOSIS_CODE
  DISPLAY
  IS_ACTIVE
}

input RiskFactorTemplateSortingInput {
  direction: DecisionMakerOrderDirection!
  field: RiskFactorTemplateSortingField!
}

input RiskFactorTemplateUpdateInput {
  arabicDisplay: String!
  diagnosisCode: String!
  display: String!
  isActive: Boolean!
}

input RoundInput {
  radius: Decimal!
  maxNumberOfPharmacies: Int!
  pharmaciesTypes: [VendorBranchTypeEnum!]!
}

type Sale implements Node & ObjectWithBasicTranslatableFields {
  id: ID!
  name: String
  type: SaleType!
  value: Float!
  startDate: DateTime!
  endDate: DateTime
  categories(
    before: String
    after: String
    first: Int
    last: Int
  ): CategoryCountableConnection
  collections(
    before: String
    after: String
    first: Int
    last: Int
  ): CollectionCountableConnection
  products(
    before: String
    after: String
    first: Int
    last: Int
  ): ProductCountableConnection
  translation(languageCode: LanguageCodeEnum!): SaleTranslation
  vendor: Vendor
}

type SaleAddCatalogues {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  sale: Sale
  discountErrors: [DiscountError!]!
}

type SaleBulkDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  count: Int!
  discountErrors: [DiscountError!]!
}

type SaleCountableConnection {
  pageInfo: PageInfo!
  edges: [SaleCountableEdge!]!
  totalCount: Int
}

type SaleCountableEdge {
  node: Sale!
  cursor: String!
}

type SaleCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  discountErrors: [DiscountError!]!
  sale: Sale
}

type SaleDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  discountErrors: [DiscountError!]!
  sale: Sale
}

input SaleFilterInput {
  status: [DiscountStatusEnum]
  saleType: DiscountValueTypeEnum
  started: DateTimeRangeInput
  search: String
}

input SaleInput {
  name: String
  type: DiscountValueTypeEnum
  value: Decimal
  products: [ID]
  categories: [ID]
  collections: [ID]
  startDate: DateTime
  endDate: DateTime
}

type SaleRemoveCatalogues {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  sale: Sale
  discountErrors: [DiscountError!]!
}

enum SaleSortField {
  NAME
  START_DATE
  END_DATE
  VALUE
  TYPE
}

input SaleSortingInput {
  direction: OrderDirection!
  field: SaleSortField!
}

type SaleTranslatableContent implements Node {
  id: ID!
  name: String!
  translation(languageCode: LanguageCodeEnum!): SaleTranslation
  sale: Sale
}

type SaleTranslate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  translationErrors: [TranslationError!]!
  sale: Sale
}

type SaleTranslation implements Node {
  id: ID!
  name: String
  language: LanguageDisplay!
}

enum SaleType {
  FIXED
  PERCENTAGE
}

type SaleUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  discountErrors: [DiscountError!]!
  sale: Sale
}

input SearchParameter {
  code: String
  type: Type
  valueBoolean: Boolean
  valueDate: Date
  valueFloat: Float
  valueInteger: Int
  valueString: String
}

type SelectedAttribute {
  attribute: Attribute!
  values: [AttributeValue]!
}

type SendOrderSubscriptionEvent {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  success: Boolean
  orderErrors: [OrderError!]!
}

type SendPushNotification {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  response: DictType
  accountErrors: [NotificationError!]!
}

"""
Creates a new visit message.
"""
type SendVisitMessage {
  chatErrors: [H_EntityError!]!

  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  visitMessage: VisitMessage
}

input SeoInput {
  title: String
  description: String
}

type ServiceOfGuidedCareHealthProgram implements H_Node {
  id: ID!
  minimumNumberOfCoverages: Int
  serviceCode: String
  serviceName: String
  standard: String
  templateService: ServiceOfHealthProgramTemplate
}

input ServiceOfGuidedCareHealthProgramInput {
  id: ID
  minimumNumberOfCoverages: Int
  serviceCode: String
  serviceName: String
  standard: String
  templateService: ServiceOfHealthProgramTemplateInput
}

type ServiceOfHealthProgramTemplate implements H_Node {
  id: ID!
  minimumNumberOfCoverages: Int
  serviceCode: String
  serviceName: String
  standard: String
}

input ServiceOfHealthProgramTemplateInput {
  id: ID
  minimumNumberOfCoverages: Int
  serviceCode: String
  serviceName: String
  standard: String
}

type SetPassword {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  accountErrors: [AccountError!]!
  success: Boolean
}

type ShippingError {
  field: String
  message: String
  code: ShippingErrorCode!
  branches: [ID!]
}

enum ShippingErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  MAX_LESS_THAN_MIN
  NOT_FOUND
  REQUIRED
  UNIQUE
  DUPLICATED_INPUT_ITEM
}

type ShippingMethod implements Node {
  id: ID!
  name: String!
  price: Money
  minimumOrderPrice: Money
  maximumOrderPrice: Money
  minimumOrderWeight: Weight
  maximumOrderWeight: Weight
  type: ShippingMethodTypeEnum
  translation(languageCode: LanguageCodeEnum!): ShippingMethodTranslation
}

type ShippingMethodTranslatableContent implements Node {
  id: ID!
  name: String!
  translation(languageCode: LanguageCodeEnum!): ShippingMethodTranslation
  shippingMethod: ShippingMethod
}

type ShippingMethodTranslation implements Node {
  id: ID!
  name: String
  language: LanguageDisplay!
}

enum ShippingMethodTypeEnum {
  PRICE
  WEIGHT
}

type ShippingPriceBulkDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  count: Int!
  shippingErrors: [ShippingError!]!
}

type ShippingPriceCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  shippingZone: ShippingZone
  shippingErrors: [ShippingError!]!
  shippingMethod: ShippingMethod
}

type ShippingPriceDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  shippingMethod: ShippingMethod
  shippingZone: ShippingZone
  shippingErrors: [ShippingError!]!
}

input ShippingPriceInput {
  name: String
  price: Decimal
  minimumOrderPrice: Decimal
  maximumOrderPrice: Decimal
  minimumOrderWeight: WeightScalar
  maximumOrderWeight: WeightScalar
  type: ShippingMethodTypeEnum
  shippingZone: ID
}

type ShippingPriceTranslate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  translationErrors: [TranslationError!]!
  shippingMethod: ShippingMethod
}

type ShippingPriceUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  shippingZone: ShippingZone
  shippingErrors: [ShippingError!]!
  shippingMethod: ShippingMethod
}

type ShippingZone implements Node {
  id: ID!
  name: String!
  default: Boolean!
  priceRange: MoneyRange
  countries: [CountryDisplay]
  shippingMethods: [ShippingMethod]
}

type ShippingZoneBulkDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  count: Int!
  shippingErrors: [ShippingError!]!
}

type ShippingZoneCountableConnection {
  pageInfo: PageInfo!
  edges: [ShippingZoneCountableEdge!]!
  totalCount: Int
}

type ShippingZoneCountableEdge {
  node: ShippingZone!
  cursor: String!
}

type ShippingZoneCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  shippingZone: ShippingZone
  shippingErrors: [ShippingError!]!
}

input ShippingZoneCreateInput {
  name: String
  countries: [String]
  default: Boolean
}

type ShippingZoneDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  shippingErrors: [ShippingError!]!
  shippingZone: ShippingZone
}

type ShippingZoneUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  shippingZone: ShippingZone
  shippingErrors: [ShippingError!]!
}

input ShippingZoneUpdateInput {
  name: String
  countries: [String]
  default: Boolean
}

type SiteSettings implements Node & H_Node {
  id: ID!
  countries(languageCode: LanguageCodeEnum): [CountryDisplay!]!
  currencies: [String]!
  defaultCurrency: String!
  homepageCollection: Collection
  languages: [LanguageDisplay]!
  name: String!
  phonePrefixes: [String]!
  includeTaxesInPrices: Boolean!
  displayGrossPrices: Boolean!
  chargeTaxesOnShipping: Boolean!
  trackInventoryByDefault: Boolean
  defaultWeightUnit: WeightUnitsEnum
  orderAcceptanceTimeout: Int
  orderErxHubApprovalTimeout: Int
  orderErxHubApprovalResubmitTimeout: Int
  orderDispensingTimeout: Int
  orderDeliveryTimeout: Int
  vatPercentage: Float
  orderBaseDeliveryFee: Float
  multiplePharmaciesDelivery: Boolean

  """
  time before the appointment system will send reminder notification
  """
  appointmentReminderTime: Int

  """
  time out after which the visit will be automatically rejected
  """
  doctorVisitAcceptanceTimeout: Int

  """
  health program visit wait time before call
  """
  healthProgramVisitWaitTimeBeforeCall: Int

  """
  minimum call duration to consider call as complete
  """
  messengerCallMinimumDuration: Int
  subscriptionKafkaTopics: [SubscriptionKafkaTopic]
}

type SiteSettingsError {
  field: String
  message: String
  code: SiteSettingsErrorCode!
}

enum SiteSettingsErrorCode {
  ALREADY_EXISTS
  CANNOT_FETCH_TAX_RATES
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input SiteSettingsInput {
  includeTaxesInPrices: Boolean
  displayGrossPrices: Boolean
  chargeTaxesOnShipping: Boolean
  trackInventoryByDefault: Boolean
  defaultWeightUnit: WeightUnitsEnum
  orderAcceptanceTimeout: Int
  orderErxHubApprovalTimeout: Int
  orderErxHubApprovalResubmitTimeout: Int
  orderDispensingTimeout: Int
  orderDeliveryTimeout: Int
  vatPercentage: Float
  orderBaseDeliveryFee: Decimal
  multiplePharmaciesDelivery: Boolean
}

type SiteSettingsUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  siteSettings: SiteSettings
  siteSettingsErrors: [SiteSettingsError!]!
}

type Specialization implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  name: String!
  description: String!
  parent: Specialization
  lft: Int!
  rght: Int!
  treeId: Int!
  level: Int!
  children(
    before: String
    after: String
    first: Int
    last: Int
  ): SpecializationCountableConnection!
  doctors(
    before: String
    after: String
    first: Int
    last: Int
  ): DoctorCountableConnection!
  healthConditions(
    before: String
    after: String
    first: Int
    last: Int
  ): HealthConditionCountableConnection!
}

type SpecializationCountableConnection {
  pageInfo: PageInfo!
  edges: [SpecializationCountableEdge!]!
  totalCount: Int
}

type SpecializationCountableEdge {
  node: Specialization!
  cursor: String!
}

type SpecializationCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  specializationErrors: [SpecializationError!]!
  specialization: Specialization
}

type SpecializationDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  specializationErrors: [SpecializationError!]!
  specialization: Specialization
}

type SpecializationError {
  field: String
  message: String
  code: SpecializationErrorCode!
}

enum SpecializationErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input SpecializationFilterInput {
  name: String
  name_Icontains: String
  parent: ID
  topLevel: Boolean
  healthConditions: [ID]
}

input SpecializationInput {
  name: String
  description: String
  parent: ID
}

type SpecializationUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  specializationErrors: [SpecializationError!]!
  specialization: Specialization
}

type SSOAccountRegister {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  requiresConfirmation: Boolean
  sessionToken: String
  accountErrors: [AccountError!]!
  user: User
}

type SSOAccountUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  accountErrors: [AccountError!]!
  user: User
}

type SSOCreateToken {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  accountErrors: [AccountError!]!
  user: User
  branches: [Branch]
  token: String
}

type SSOCustomerCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  requiresConfirmation: Boolean
  sessionToken: String
  accountErrors: [AccountError!]!
  user: User
}

type SSOCustomerUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  accountErrors: [AccountError!]!
  user: User
}

type Stock implements Node {
  productVariant: ProductVariant!
  quantity: Int!
  id: ID!
  quantityAllocated: Int!
  branch: Branch
}

enum StockAvailability {
  IN_STOCK
  OUT_OF_STOCK
}

type StockCountableConnection {
  pageInfo: PageInfo!
  edges: [StockCountableEdge!]!
  totalCount: Int
}

type StockCountableEdge {
  node: Stock!
  cursor: String!
}

type StockError {
  field: String
  message: String
  code: StockErrorCode!
}

enum StockErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input StockFilterInput {
  quantity: Float
  search: String
}

input StockInput {
  branch: ID!
  quantity: Int
}

scalar StringNotBlank

type SubList {
  display: String
  errors: [DecisionMakerGraphqlError]
  field: Field
  id: ID
}

type SubListConnection {
  edges: [SubListEdge]
  pageInfo: PageInfo
  totalCount: Int
}

type SubListEdge {
  cursor: String
  node: SubList
}

input SubListInput {
  display: String
  field: FieldInput
  id: ID
}

type SubListItem {
  code: String
  display: String
  errors: [DecisionMakerGraphqlError]
  id: ID
}

type SubListItemConnection {
  edges: [SubListItemEdge]
  pageInfo: PageInfo
  totalCount: Int
}

type SubListItemEdge {
  cursor: String
  node: SubListItem
}

input SubListItemInput {
  code: String
  display: String
  id: ID
}

enum SubListItemSortField {
  CODE
  DISPLAY
}

input SubListItemSortingInput {
  direction: DecisionMakerOrderDirection!
  field: SubListItemSortField!
}

enum SubListSortField {
  DISPLAY
  FIELD
}

input SubListSortingInput {
  direction: DecisionMakerOrderDirection!
  field: SubListSortField!
}

type Subscription {
  medicalDeliveryRequestStatusChanged: MedicalDeliveryRequestStatusChanged
  notificationCreated: NotificationCreated
  prescriptionStatusChanged: PrescriptionStatusChanged
  orderStatusChanged: OrderStatusChange
  orderDeleted: OrderDeleted
  needActionCodeSystems(token: String!): NeedActionCodeSystems
  doctorAvailability: DoctorAvailabilityStatusChange
  messageSent: MessageSent
}

type SubscriptionEntityChanged implements H_Node {
  changes: [SubscriptionEntityFieldChanges]
  creationDate: Instant
  graphqlType: String
  id: ID!
  users: [ID]
}

type SubscriptionEntityFieldChanges {
  field: String
  value: String
}

type SubscriptionError {
  field: String
  message: String
  code: SubscriptionErrorCode!
}

enum SubscriptionErrorCode {
  ALREADY_EXISTS
  DUPLICATED_INPUT_ITEM
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input SubscriptionFilterInput {
  validFrom: DateTime
  validTill: DateTime
}

input SubscriptionInput {
  plan: ID
  vendor: ID
  fixedCostAmount: Decimal
  fixedOrderCostAmount: Decimal
  fixedOrderPercentage: Decimal
}

type SubscriptionKafkaTopic {
  graphqlType: String
  topic: String
}

type T_Specialization {
  code: String!
  display: String
}

type TaxedMoney {
  currency: String!
  gross: Money!
  net: Money!
  tax: Money!
}

enum TaxRateType {
  ACCOMMODATION
  ADMISSION_TO_CULTURAL_EVENTS
  ADMISSION_TO_ENTERTAINMENT_EVENTS
  ADMISSION_TO_SPORTING_EVENTS
  ADVERTISING
  AGRICULTURAL_SUPPLIES
  BABY_FOODSTUFFS
  BIKES
  BOOKS
  CHILDRENS_CLOTHING
  DOMESTIC_FUEL
  DOMESTIC_SERVICES
  E_BOOKS
  FOODSTUFFS
  HOTELS
  MEDICAL
  NEWSPAPERS
  PASSENGER_TRANSPORT
  PHARMACEUTICALS
  PROPERTY_RENOVATIONS
  RESTAURANTS
  SOCIAL_HOUSING
  STANDARD
  WATER
  WINE
}

type TaxType {
  description: String
  taxCode: String
}

enum TeamMemberPosition {
  ADMIN
  NURSE
  PHYSICIAN
  TEAM_ADMIN
  TEAM_LEADER
}

type TemplateTeamMember implements H_Node {
  id: ID!
  isBackupPersonMandatory: Boolean
  isKeyTeamMember: Boolean
  isLicencedHealthProfessional: Boolean
  isMandatory: Boolean
  minimumNumberOfProactiveFacilityVisits: Int
  minimumNumberOfProactiveHomeVisits: Int
  minimumNumberOfProactiveVirtualVisits: Int
  minimumNumberOfReactiveFacilityVisits: Int
  minimumNumberOfReactiveHomeVisits: Int
  minimumNumberOfReactiveVirtualVisits: Int
  position: TeamMemberPosition
  specialization: String
}

input TemplateTeamMemberInput {
  id: ID
  isBackupPersonMandatory: Boolean
  isKeyTeamMember: Boolean
  isLicencedHealthProfessional: Boolean
  isMandatory: Boolean
  minimumNumberOfProactiveFacilityVisits: Int
  minimumNumberOfProactiveHomeVisits: Int
  minimumNumberOfProactiveVirtualVisits: Int
  minimumNumberOfReactiveFacilityVisits: Int
  minimumNumberOfReactiveHomeVisits: Int
  minimumNumberOfReactiveVirtualVisits: Int
  position: TeamMemberPosition
  specialization: String
}

type TerminateVendorSubscription {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  vendor: Vendor
  vendorErrors: [VendorError!]!
}

enum TerminologyErrorCodes {
  INVALID_OR_EXPIRED_TOKEN
  TERMINOLOGY_CLINICIAN_NOT_FOUND
  TERMINOLOGY_CONCEPT_DEFINITION_LIST_NOT_FOUND
  TERMINOLOGY_DUPLICATE_COLUMN
  TERMINOLOGY_DUPLICATE_PROPERTY
  TERMINOLOGY_DUPLICATE_ROW_DATA
  TERMINOLOGY_DUPLICATE_VERSION
  TERMINOLOGY_EMPTY_FILE
  TERMINOLOGY_FILE_SERVICE_NOT_REACHABLE
  TERMINOLOGY_INVALID_DATE_FORMAT
  TERMINOLOGY_INVALID_FILE_EXTENSION
  TERMINOLOGY_INVALID_PROCESSING_STATUS
  TERMINOLOGY_INVALID_TOKEN
  TERMINOLOGY_LIST_Definition_NOT_FOUND
  TERMINOLOGY_LIST_Item_NOT_FOUND
  TERMINOLOGY_LIST_NOT_FOUND
  TERMINOLOGY_MANDATORY_CONCEPT_PROPERTY_EXCEPTION
  TERMINOLOGY_NONE_DRAFT_CODE_SYSTEM
  TERMINOLOGY_NONE_EDITABLE_CONCEPT_DEFINITION
  TERMINOLOGY_NONE_EDITABLE_LIST
  TERMINOLOGY_NONE_NEGATIVE_PAGE_SIZE
  TERMINOLOGY_NONE_UNDER_REVIEW_CODE_SYSTEM
  TERMINOLOGY_NOT_APPROVED_CODE_SYSTEM
  TERMINOLOGY_NO_ACTIVE_CODE_SYSTEM
  TERMINOLOGY_OLD_VERSION
  TERMINOLOGY_PERMISSION_DENIED
  TERMINOLOGY_UNKNOWN
  TERMINOLOGY_UNKNOWN_TYPE
}

type TerminologyGraphqlError {
  code: TerminologyErrorCodes
  errorType: ErrorType
  field: String
  message: String
}

type TextSummary {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  summary: String
  textSummaryErrors: [PrescriptionError!]!
}

input TextSummaryInput {
  text: String!
}

scalar Time

type TimeRange {
  openTime: Time
  closeTime: Time
}

input TimeRangeFilterInput {
  start: Time!
  end: Time!
}

input TimeRangeInput {
  openTime: Time!
  closeTime: Time!
}

type ToGlobalId {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  id: ID
}

type TradeDrug {
  code: String!
  dictionaryURL: String
  display: String!
  genericDisplay: String!
  granularUnit: Int
  id: ID!
  isHazardous: Boolean
  isHighAlert: Boolean
  isLASA: Boolean
  largeIconURL: String
  price: Float
  quantity: Int
  routeOfAdmin: String
  smallIconURL: String
  unitID: Int
}

union TranslatableItem =
    ProductTranslatableContent
  | CollectionTranslatableContent
  | CategoryTranslatableContent
  | AttributeTranslatableContent
  | AttributeValueTranslatableContent
  | ProductVariantTranslatableContent
  | ShippingMethodTranslatableContent
  | SaleTranslatableContent

type TranslatableItemConnection {
  pageInfo: PageInfo!
  edges: [TranslatableItemEdge!]!
  totalCount: Int
}

type TranslatableItemEdge {
  node: TranslatableItem!
  cursor: String!
}

enum TranslatableKinds {
  ATTRIBUTE
  ATTRIBUTE_VALUE
  CATEGORY
  COLLECTION
  MENU_ITEM
  PAGE
  PRODUCT
  SALE
  SHIPPING_METHOD
  VARIANT
}

type TranslationError {
  field: String
  message: String
  code: TranslationErrorCode!
}

enum TranslationErrorCode {
  GRAPHQL_ERROR
  NOT_FOUND
  REQUIRED
}

input TranslationInput {
  seoTitle: String
  seoDescription: String
  name: String
  description: String
  descriptionJson: JSONString
}

enum Type {
  BOOLEAN
  DATE
  FLOAT
  INTEGER
  STRING
}

type TypeMutationInsertUnattendedCall {
  result: String
  unattendedCallErrors: [H_EntityError!]!
}

type UnAssignUserFromBranch {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  branchErrors: [BranchError!]!
  branchUser: BranchUser
}

input UnattendedCallInput {
  doctorId: Int!
  doctorUserId: Int!
  healthProgramId: Int!
  patientId: Int!
  patientUserId: Int!
  vendorId: Int!
  visitId: Int!
}

"""
A custom scalar that represents files
"""
scalar Upload

type UploadAttachment {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  chatErrors: [ChatError!]!
  attachment: Attachment
}

type User implements Node {
  id: ID!
  checkout: Checkout
  orders(
    sortBy: OrderSortingInput
    filter: OrderFilterInput
    before: String
    after: String
    first: Int
    last: Int
  ): OrderCountableConnection
  totalOrdersAmount: TaxedMoney
  unReadNotificationsCount: Int
  notifications(
    filter: NotificationFilterInput
    before: String
    after: String
    first: Int
    last: Int
  ): NotificationCountableConnection
  unReadNotificationsCountByType: DictType
  prescriptions(
    filter: PrescriptionFilterInput
    sortBy: PrescriptionSortingInput
    before: String
    after: String
    first: Int
    last: Int
  ): PrescriptionCountableConnection
  wishlist: Wishlist
  followedHealthChannels(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): HealthChannelCountableConnection
  healthProgramsSubscriptions(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: HealthProgramUserSubscriptionFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): HealthProgramUserSubscriptionCountableConnection
  visits(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String
    filter: VisitFilterInput

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): VisitCountableConnection
  needActionCodeSystems: NeedActionCodeSystems
  lastLogin: DateTime
  email: String
  firstName: String
  secondName: String
  thirdName: String
  lastName: String
  gender: UserGender
  photo: String
  isActive: Boolean!
  note: String
  dateJoined: DateTime!
  defaultShippingAddress: Address
  defaultBillingAddress: Address
  mobileVerified: Boolean!
  emailVerified: Boolean!
  appType: AppTypes
  appRole: AppRoleTypes
  vendorUserType: UserVendorUserType
  vendor: Vendor
  meetingPlatformId: String
  healthLicenseStartDate: Date
  healthLicenseEndDate: Date
  patient: Patient
  doctor: Doctor
  addresses: [Address]
  userPermissions: [UserPermission]
  permissionGroups: [Group]
  editableGroups: [Group]
  avatar: String
  events: [CustomerEvent]
  wallet: Wallet
  isSuperuser: Boolean
  isStaff: Boolean
  isVendorAdmin: Boolean
  branches: [Branch]
  messages(
    branchId: ID!
    before: String
    after: String
    first: Int
    last: Int
  ): MessageCountableConnection
  lastMessage: Message
  unReadMessagesCount: Int
  unReadMessagesCountWithBranch(branchId: ID!): Int
  dateOfBirth: Date
  mobile: String
  nationalId: String
  healthLicenseNumber: String
}

input UserBranchInput {
  user: ID
  branch: ID
}

type UserCountableConnection {
  pageInfo: PageInfo!
  edges: [UserCountableEdge!]!
  totalCount: Int
}

type UserCountableEdge {
  node: User!
  cursor: String!
}

type UserCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  accountErrors: [AccountError!]!
  user: User
}

type UserDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  accountErrors: [AccountError!]!
  user: User
}

type UserDevice implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  udid: String!
  pushToken: String!
  app: String!
  appVersion: String
  os: String!
  osVersion: String
  modelName: String
  deviceName: String
  userId: Int!
  isOnline: Boolean!
  language: UserDeviceLanguage!
}

enum UserDeviceLanguage {
  AR
  AZ
  BG
  BN
  CA
  CS
  DA
  DE
  EL
  EN
  ES
  ES_CO
  ET
  FA
  FI
  FR
  HI
  HU
  HY
  ID
  IS
  IT
  JA
  KO
  LT
  MN
  NB
  NL
  PL
  PT
  PT_BR
  RO
  RU
  SK
  SL
  SQ
  SR
  SV
  SW
  TA
  TH
  TR
  UK
  VI
  ZH_HANS
  ZH_HANT
}

type UserDeviceRegister {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  accountErrors: [NotificationError!]!
  userDevice: UserDevice
}

input UserDeviceRegisterInput {
  udid: String!
  os: String!
  osVersion: String
  modelName: String
  deviceName: String
  pushToken: String!
  app: AppTypes!
  appVersion: String
  language: String!
}

type UserDeviceUnRegister {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  accountErrors: [NotificationError!]!
  userDevice: UserDevice
}

input UserDeviceUnRegisterInput {
  udid: String!
  app: AppTypes!
}

input UserFilterInput {
  dateJoined: DateRangeInput
  search: String
  joinedPeriod: ReportingPeriod
  ids: [ID]
  status: UserStatus
  appType: AppTypes
  appRole: AppRoleTypes
  vendorId: String
  branchId: String
  groupName: String
}

enum UserGender {
  MALE
  FEMALE
}

type UserPermission {
  code: PermissionEnum
  name: String!
  keyCloakPermission: KeyCloakPermission
  sourcePermissionGroups(userId: ID!): [Group!]
}

enum UserSortField {
  FIRST_NAME
  LAST_NAME
  EMAIL
  ORDER_COUNT
  LAST_MESSAGE_SENT
  DATE_JOINED
}

input UserSortingInput {
  direction: OrderDirection!
  field: UserSortField!
}

enum UserStatus {
  ACTIVE
  DEACTIVATED
}

type UserUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  accountErrors: [AccountError!]!
  user: User
}

input UserUpdateInput {
  firstName: String
  lastName: String
  gender: PersonGenderEnum
  dateOfBirth: Date
  isActive: Boolean
  note: String
  mobile: String
  nationalId: String
  photo: String
  password: String
  addGroups: [ID!]
  removeGroups: [ID!]
  appRole: AppRoleTypes
  branches: [ID]
  doctorInfo: DoctorInput
}

enum UserVendorUserType {
  MANAGER
  PHARMACIST
  NURSE
  DOCTOR
}

scalar UUID

type ValidatePrescription {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  prescription: Prescription
  allowedDeliveryTypes: [DeliveryTypes]
  prescriptionErrors: [PrescriptionError!]!
}

input ValidatePrescriptionInput {
  referenceNumber: String!
  patientIdentifier: String
}

type VariantPricingInfo {
  onSale: Boolean
  discount: TaxedMoney
  discountLocalCurrency: TaxedMoney
  price: TaxedMoney
  priceUndiscounted: TaxedMoney
  priceLocalCurrency: TaxedMoney
}

enum VariantSortField {
  POPULAR
  NEWEST
}

input VariantSortingInput {
  direction: OrderDirection!
  field: VariantSortField!
}

type Vendor implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  seoTitle: String
  seoDescription: String
  name: String!
  nameAr: String
  slug: String!
  description: String
  isActive: Boolean!
  logo: String
  backGroundImage: String
  commercialRegistrationNumber: String!
  ownerName: String!
  nationalId: String!
  contactMobileNumber: String
  contactPhoneNumber: String
  tradeName: String!
  taxLicenseNumber: String!
  isVip: Boolean!
  hasMultipleBranches: Boolean!
  totalRatings: Int!
  ratingsSum: Float!
  averageRating: Float!
  raters(
    before: String
    after: String
    first: Int
    last: Int
  ): UserCountableConnection!
  address: Address
  approved: Boolean!
  approvedAt: DateTime
  approvedBy: User
  deliveryMinFrom: Int!
  deliveryMinTo: Int!
  priceRange: PriceRangeEnum
  hasOwnDrivers: Boolean!
  isShippingFree: Boolean!
  orderMinimumFreeDelivery: Float!
  type: VendorType
  totalOrdersCount: Float!
  division: Division
  authorityCode: String
  contactEmail: String
  operationStatus: String
  onboardingStatus: String
  cluster: String
  group: String
  virtualGroup: String
  source: String
  orgIdNhic: String
  maxNumberOfUsers: Int
  isIntegrated: Boolean!
  users: [User]
  favoriteCustomers(
    before: String
    after: String
    first: Int
    last: Int
  ): UserCountableConnection!
  rejections(
    before: String
    after: String
    first: Int
    last: Int
  ): VendorRejectionReasonCountableConnection
  branches(
    userLocation: LocationInput
    filter: BranchFilterInput
    sortBy: BranchOrder
    before: String
    after: String
    first: Int
    last: Int
  ): BranchCountableConnection
  ratings(
    before: String
    after: String
    first: Int
    last: Int
  ): VendorRatingCountableConnection
  bankInfo: VendorBankInfo
  customerfavoritevendor(
    before: String
    after: String
    first: Int
    last: Int
  ): CustomerFavoriteVendorCountableConnection!
  images: [VendorImage]
  managersContactInfo: VendorManagersContactInfo
  subscriptions(
    before: String
    after: String
    first: Int
    last: Int
  ): VendorSubscriptionCountableConnection!
  doctors(
    before: String
    after: String
    first: Int
    last: Int
  ): DoctorCountableConnection!
  fixedCosts(dateFrom: Date!, dateTill: Date!): Int
  isFavorite: Boolean
  ordersCount: Int
}

input VendorAdminInput {
  slug: String
  isActive: Boolean
  isVip: Boolean
  subscription: SubscriptionInput
  hasOwnDrivers: Boolean
  authorityCode: String
  operationStatus: String
  cluster: String
  group: String
  virtualGroup: String
  source: String
  orgIdNhic: String
  maxNumberOfUsers: Int
  mobileNumber: String!
  email: String!
  name: String
  nameAr: String
  description: String
  logo: String
  backGroundImage: String
  commercialRegistrationNumber: String
  ownerName: String
  tradeName: String
  taxLicenseNumber: String
  nationalId: String
  contactMobileNumber: String
  contactPhoneNumber: String
  bankInfo: VendorBankInfoInput
  hasMultipleBranches: Boolean
  branchWorkingHours: [WorkingHourInput]
  branchWorkingHoursOverride: [WorkingHourOverrideInput]
  branchType: VendorBranchTypeEnum
  healthLicenseNumber: String
  healthLicenseStartDate: Date
  healthLicenseEndDate: Date
  acceptsDelivery: Boolean
  acceptsPickup: Boolean
  addressInput: AddressInput
  deliveryMinFrom: Int
  deliveryMinTo: Int
  priceRange: PriceRangeEnum
  type: VendorTypeEnum
  managersContactInfo: VendorManagersContactInfoInput
}

type VendorBankInfo implements Node {
  id: ID!
  bankName: String!
  accountNumber: String!
  iban: String!
  accountName: String
  vendor: Vendor!
}

input VendorBankInfoInput {
  bankName: String
  accountNumber: String
  iban: String
  accountName: String
}

enum VendorBranchTypeEnum {
  HOSPITAL
  PHARMACY
  CLINIC
  DIAGNOSTIC_CENTER
}

type VendorCountableConnection {
  pageInfo: PageInfo!
  edges: [VendorCountableEdge!]!
  totalCount: Int
}

type VendorCountableEdge {
  node: Vendor!
  cursor: String!
}

type VendorCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  vendorErrors: [VendorError!]!
  vendor: Vendor
}

type VendorDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  vendorErrors: [VendorError!]!
  vendor: Vendor
}

type VendorError {
  field: String
  message: String
  code: VendorErrorCode!
}

enum VendorErrorCode {
  ALREADY_EXISTS
  DUPLICATED_INPUT_ITEM
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  NOT_VENDORS_IMAGE
}

input VendorFilterInput {
  slug: String
  slug_Icontains: String
  description: String
  description_Icontains: String
  isActive: Boolean
  ownerName: String
  ownerName_Icontains: String
  nationalId: String
  nationalId_Icontains: String
  contactMobileNumber: String
  contactMobileNumber_Icontains: String
  contactPhoneNumber: String
  contactPhoneNumber_Icontains: String
  approved: Boolean
  isVip: Boolean
  priceRange: String
  search: String
  rating: DecimalRangeInput
  commercialRegistrationNumber: String
  delivery: DecimalRangeInput
  subscriptionExpiry: DateRangeInput
  hasChatWith: Boolean
  isFavorite: Boolean
  type: [VendorTypeEnum]
  location: DistanceFilterInput
  name_Icontains: String
  name: String
}

type VendorImage implements Node {
  id: ID!
  sortOrder: Int
  alt: String!
  url(size: Int): String!
}

type VendorImageCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  vendor: Vendor
  image: VendorImage
  vendorErrors: [VendorError!]!
}

input VendorImageCreateInput {
  alt: String
  image: String!
  vendor: ID!
}

type VendorImageDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  vendor: Vendor
  image: VendorImage
  vendorErrors: [VendorError!]!
}

type VendorImageReorder {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  vendor: Vendor
  images: [VendorImage]
  vendorErrors: [VendorError!]!
}

type VendorImageUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  vendor: Vendor
  image: VendorImage
  vendorErrors: [VendorError!]!
}

input VendorImageUpdateInput {
  alt: String
}

input VendorInput {
  mobileNumber: String!
  email: String!
  name: String
  nameAr: String
  description: String
  logo: String
  backGroundImage: String
  commercialRegistrationNumber: String
  ownerName: String
  tradeName: String
  taxLicenseNumber: String
  nationalId: String
  contactMobileNumber: String
  contactPhoneNumber: String
  bankInfo: VendorBankInfoInput
  hasMultipleBranches: Boolean
  branchWorkingHours: [WorkingHourInput]
  branchWorkingHoursOverride: [WorkingHourOverrideInput]
  branchType: VendorBranchTypeEnum
  healthLicenseNumber: String
  healthLicenseStartDate: Date
  healthLicenseEndDate: Date
  acceptsDelivery: Boolean
  acceptsPickup: Boolean
  addressInput: AddressInput
  deliveryMinFrom: Int
  deliveryMinTo: Int
  priceRange: PriceRangeEnum
  type: VendorTypeEnum
  managersContactInfo: VendorManagersContactInfoInput
}

type VendorInvoice implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  number: String!
  vendorId: Int
  numberOfBranches: Int
  serviceCommissionPercentage: Float
  totalServiceCommission: Float
  totalCreditOrders: Float
  totalCashOrders: Float
  totalWalletOrders: Float
  totalOrders: Int
  netAmountBeforeVat: Float
  visaPaymentBankFees: Float
  madaPaymentBankFees: Float
  applePaymentBankFees: Float
  vat: Float
  netAmountAfterVat: Float
  totalShippingPrice: Float
  totalPaidShippingPrice: Float
  endDate: Date
  isPaid: Boolean!
  attachmentId: Int
  isReady: Boolean!
  transferId: String
  orders(
    before: String
    after: String
    first: Int
    last: Int
  ): OrderCountableConnection!
  branchInvoices: [BranchInvoice]
  vendor: Vendor
  attachment: Attachment
}

type VendorInvoiceCountableConnection {
  pageInfo: PageInfo!
  edges: [VendorInvoiceCountableEdge!]!
  totalCount: Int
}

type VendorInvoiceCountableEdge {
  node: VendorInvoice!
  cursor: String!
}

type VendorInvoiceCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  invoiceErrors: [InvoiceError!]!
  vendorInvoice: VendorInvoice
}

input VendorInvoiceFilterInput {
  number: String
  number_Icontains: String
  isPaid: Boolean
  isReady: Boolean
  vendors: [ID]
  endDate: DateRangeInput
}

input VendorInvoiceInput {
  endDate: Date
  vendor: ID
}

input VendorInvoiceOrder {
  direction: OrderDirection!
  field: VendorInvoiceOrderField
}

enum VendorInvoiceOrderField {
  NUMBER
  CREATED
  IS_PAID
  IS_READY
  DATE
}

type VendorInvoiceUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  invoiceErrors: [InvoiceError!]!
  vendorInvoice: VendorInvoice
}

input VendorInvoiceUpdateInput {
  attachment: ID!
  isReady: Boolean!
  transferId: String!
}

type VendorManagersContactInfo implements Node {
  id: ID!
  generalManagerEmail: String
  purchasingManagerName: String
  purchasingManagerMobileNumber: String
  purchasingManagerEmail: String
  financialManagerName: String
  financialManagerMobileNumber: String
  financialManagerEmail: String
  vendor: Vendor!
}

input VendorManagersContactInfoInput {
  generalManagerEmail: String
  purchasingManagerName: String
  purchasingManagerMobileNumber: String
  purchasingManagerEmail: String
  financialManagerName: String
  financialManagerMobileNumber: String
  financialManagerEmail: String
}

type VendorMarkInvoiceAsPaid {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  invoiceErrors: [InvoiceError!]!
  vendorInvoice: VendorInvoice
}

type VendorMarkMessagesAsSeen {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  updatedCount: Int
  chatErrors: [ChatError!]!
}

input VendorMessageInput {
  content: String
  attachments: [MessageAttachmentInput]
  branch: ID
  recipient: ID
}

input VendorOrder {
  direction: OrderDirection!
  field: VendorOrderField
}

type VendorOrderAccept {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  order: Order
  orderErrors: [OrderError!]!
}

input VendorOrderAcceptInput {
  acceptedMedications: [MedicationOrderLineInput]
}

type VendorOrderCancel {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  order: Order
  orderErrors: [OrderError!]!
}

type VendorOrderDeliveryStatusUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  orderErrors: [OrderError!]!
  order: Order
}

enum VendorOrderField {
  NAME
  ORDER_COUNT
  RATING
  CREATED
  NEAREST
}

type VendorOrderReject {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  order: Order
  orderErrors: [OrderError!]!
}

input VendorProductFilterInput {
  priceAmount: Float
  vendors: [ID]
  categories: [ID]
  productTypes: [ID]
  search: String
  productBrands: [ID]
}

input VendorProductSortingInput {
  direction: OrderDirection!
  field: VariantSortField!
}

type VendorProductVariant implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  productVariant: ProductVariant!
  vendorId: Int!
  currency: String
  priceAmount: Float
  price: Money
  trackInventory: Boolean!
  soldCount: Int!
  stocks: [Stock]
  wishlistItems(
    before: String
    after: String
    first: Int
    last: Int
    id: ID
  ): WishlistItemCountableConnection!
  vendor: Vendor
  pricing: VariantPricingInfo
}

type VendorProductVariantCountableConnection {
  pageInfo: PageInfo!
  edges: [VendorProductVariantCountableEdge!]!
  totalCount: Int
}

type VendorProductVariantCountableEdge {
  node: VendorProductVariant!
  cursor: String!
}

type VendorProductVariantStocksCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  stockErrors: [StockError!]!
  vendorProductVariant: VendorProductVariant
}

input VendorProductVariantStocksCreateInput {
  productVariant: ID!
  price: Decimal!
  stocks: [StockInput!]!
}

type VendorProductVariantStocksUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  stockErrors: [StockError!]!
  vendorProductVariant: VendorProductVariant
}

input VendorProductVariantStocksUpdateInput {
  productVariant: ID!
  price: Decimal
  stocks: [StockInput!]
}

type VendorRating implements Node {
  id: ID!
  vendor: Vendor
  customer: User
  rating: Float!
  comment: String
}

type VendorRatingCountableConnection {
  pageInfo: PageInfo!
  edges: [VendorRatingCountableEdge!]!
  totalCount: Int
}

type VendorRatingCountableEdge {
  node: VendorRating!
  cursor: String!
}

input VendorRatingInput {
  vendor: ID!
  rating: Decimal!
  comment: String
}

type VendorRegister {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  vendorErrors: [VendorError!]!
  vendor: Vendor
}

type VendorRejectionReason implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  reason: String!
  vendor: Vendor!
}

type VendorRejectionReasonCountableConnection {
  pageInfo: PageInfo!
  edges: [VendorRejectionReasonCountableEdge!]!
  totalCount: Int
}

type VendorRejectionReasonCountableEdge {
  node: VendorRejectionReason!
  cursor: String!
}

input VendorRejectionReasonInput {
  reason: String!
  vendor: ID!
}

type VendorSendMessage {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  chatErrors: [ChatError!]!
  message: Message
}

type VendorSubscription implements Node {
  fixedCost: Money
  fixedOrderCost: Money
  id: ID!
  created: DateTime!
  modified: DateTime!
  currency: String!
  fixedCostAmount: Float!
  isActive: Boolean!
  fixedOrderCostAmount: Float!
  fixedOrderPercentage: Float!
  vendor: Vendor
  validFrom: DateTime!
  validTill: DateTime
  plan: Plan
}

type VendorSubscriptionCountableConnection {
  pageInfo: PageInfo!
  edges: [VendorSubscriptionCountableEdge!]!
  totalCount: Int
}

type VendorSubscriptionCountableEdge {
  node: VendorSubscription!
  cursor: String!
}

enum VendorType {
  HOSPITAL
  PHARMACY
  CLINIC
  DIAGNOSTIC_CENTER
}

enum VendorTypeEnum {
  HOSPITAL
  PHARMACY
  CLINIC
  DIAGNOSTIC_CENTER
}

type VendorUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  vendorErrors: [VendorError!]!
  vendor: Vendor
}

input VendorUpdateAdminInput {
  slug: String
  isActive: Boolean
  isVip: Boolean
  subscription: SubscriptionInput
  hasOwnDrivers: Boolean
  authorityCode: String
  operationStatus: String
  cluster: String
  group: String
  virtualGroup: String
  source: String
  orgIdNhic: String
  maxNumberOfUsers: Int
  name: String
  nameAr: String
  description: String
  logo: String
  backGroundImage: String
  commercialRegistrationNumber: String
  ownerName: String
  tradeName: String
  taxLicenseNumber: String
  nationalId: String
  contactMobileNumber: String
  contactPhoneNumber: String
  bankInfo: VendorBankInfoInput
  hasMultipleBranches: Boolean
  branchWorkingHours: [WorkingHourInput]
  branchWorkingHoursOverride: [WorkingHourOverrideInput]
  branchType: VendorBranchTypeEnum
  healthLicenseNumber: String
  healthLicenseStartDate: Date
  healthLicenseEndDate: Date
  acceptsDelivery: Boolean
  acceptsPickup: Boolean
  addressInput: AddressInput
  deliveryMinFrom: Int
  deliveryMinTo: Int
  priceRange: PriceRangeEnum
  type: VendorTypeEnum
  managersContactInfo: VendorManagersContactInfoInput
}

type VendorUpdateIsIntegrated {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  vendorErrors: [VendorError!]!
  vendor: Vendor
}

input VendorUpdateIsIntegratedInput {
  isIntegrated: Boolean!
}

type VendorUserCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  accountErrors: [AccountError!]!
  user: User
}

input VendorUserCreateInput {
  firstName: String
  lastName: String
  gender: PersonGenderEnum
  dateOfBirth: Date
  isActive: Boolean
  note: String
  mobile: String
  nationalId: String
  photo: String
  password: String!
  branches: [ID]
  healthLicenseNumber: String
  healthLicenseStartDate: Date
  healthLicenseEndDate: Date
  email: String!
  address: AddressInput
  appRole: AppRoleTypes!
}

type VendorUserDelete {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  accountErrors: [AccountError!]!
  user: User
}

enum VendorUserTypes {
  MANAGER
  PHARMACIST
  NURSE
  DOCTOR
}

type VendorUserUpdate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  accountErrors: [AccountError!]!
  user: User
}

input VendorUserUpdateInput {
  firstName: String
  lastName: String
  gender: PersonGenderEnum
  dateOfBirth: Date
  isActive: Boolean
  note: String
  mobile: String
  nationalId: String
  photo: String
  healthLicenseNumber: String
  healthLicenseStartDate: Date
  healthLicenseEndDate: Date
  appRole: AppRoleTypes
  branches: [ID]
  password: String
}

type Visit implements H_Node {
  appointment: Appointment
  assistantAgentConnected: Boolean
  attachments: [VisitAttachment]
  cancellationReason: String
  careInitialType: CareType
  careType: VisitCareType
  complains(
    after: String
    before: String
    first: Int
    last: Int
  ): VisitComplainCountableConnection
  created: Instant
  doctor: Doctor
  doctorAvailabilityStatus: String
  doctorId: Int
  doctorNote: String
  doctorUser: User
  doctorUserId: Int
  duration: Int
  endTime: Instant
  healthProgram: HealthProgram
  healthProgramMember: HealthProgramMember
  id: ID!
  labs: [Lab]
  meetingPlatformLink: String
  messages(
    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): VisitMessageCountableConnection
  modified: Instant

  """
  User-friendly number of a visit
  """
  number: String
  patient: Patient
  patientId: Int
  patientNote: String
  patientUser: User
  patientUserId: Int
  prescription: Prescription
  prescriptionId: Int
  providerGuidedCareHealthProgramTeam: ProviderGuidedCareHealthProgramTeam
  rads: [Rad]
  rejectionAudits(
    after: String
    before: String
    first: Int
    last: Int
  ): DoctorVisitRejectionAuditCountableConnection
  reviews: [VisitReviewQuestion]
  startTime: Instant
  status: VisitStatus
  subscription: HealthProgramUserSubscription
  summaries(
    after: String
    before: String
    first: Int
    last: Int
  ): VisitSummaryCountableConnection
  type: VisitType
  vendor: Vendor
  vendorId: Int
  visitDiagnoses: [VisitDiagnosis]
}

type VisitAction {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  visit: Visit
  visitErrors: [H_EntityError!]!
}

"""
Visit Approval Action
"""
type VisitApprovalAction {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  visit: Visit
  visitErrors: [H_EntityError!]!
}

"""
Update Visit Assistant Agent Status.
"""
type VisitAssistantAgentStatusUpdate {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  success: Boolean
  visitErrors: [H_EntityError!]!
}

type VisitAttachment implements H_Node {
  attachment: Attachment
  attachmentId: Int
  created: Instant
  id: ID!
  modified: Instant
  type: VisitAttachmentType
  visit: Visit
}

enum VisitAttachmentType {
  FILE
  MEDICAL_REPORT
  TEST_RESULT
}

input VisitAttachmentUploadInput {
  attachment: ID!
  type: VisitAttachmentType!
  visit: ID!
}

"""
end visit call.
"""
type VisitCallEnd {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  success: Boolean
  visitErrors: [H_EntityError!]!
}

type VisitCancelReason implements H_Node {
  created: Instant
  id: ID!
  modified: Instant
  text: String
}

"""
CRUD a new cancel reason.
"""
type VisitCancelReasonCRUD {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  visitCancelReason: VisitCancelReason
  visitErrors: [H_EntityError!]!
}

input VisitCancelReasonInput {
  """
  Cancel Reason
  """
  text: String!
}

enum VisitCareType {
  """
  Home Visit
  """
  HOME_VISIT

  """
  In Person
  """
  IN_PERSON

  """
  Virtual
  """
  VIRTUAL
}

input VisitChronicGuidedCareMemberAddInput {
  guidedCareProgramId: ID
  labId: ID
}

type VisitComplain implements H_Node {
  complain: String
  created: Instant
  customerId: Int
  id: ID!
  modified: Instant
  visit: Visit
}

type VisitComplainCountableConnection {
  edges: [VisitComplainCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type VisitComplainCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: VisitComplain!
}

"""
creates a new Visit Complain
"""
type VisitComplainCreate {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  visitComplain: VisitComplain
  visitErrors: [H_EntityError!]!
}

input VisitComplainCreateInput {
  """
  customer complain
  """
  complain: String!

  """
  ID of Visit to be Complain about
  """
  visit: ID!
}

input VisitComplainFilterInput {
  visits: [ID]
}

type VisitCountableConnection {
  edges: [VisitCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type VisitCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Visit!
}

type VisitDiagnosis implements H_Node {
  code: String!
  id: ID!
  visitDiagnosisType: VisitDiagnosisType!
  display: String
}

type VisitDiagnosisCRUD {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  visitDiagnosis: VisitDiagnosis
  visitDiagnosisErrors: [H_EntityError!]!
}

enum VisitDiagnosisType {
  PRINCIPAL
  SECONDARY
}

"""
assign call request to doctor
"""
type VisitDoctorAssign {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  result: String
  visitErrors: [H_EntityError!]!
}

input VisitDoctorNoteInput {
  doctorNote: String
  visit: ID!
}

input VisitFilterInput {
  careInitialType: [CareType]
  careType: [VisitCareType]
  date: H_DateTimeRangeInput
  healthProgramMembers: [ID]
  healthPrograms: [ID]
  id: String
  numbers: [Int]
  requestedBy: RequestedBy
  status: [VisitStatus]
  subscriptions: [ID]
  users: [ID]
}

type VisitMessage implements H_Node {
  attachments: [VisitMessageAttachment]
  content: String
  created: Instant
  id: ID!
  isBotMessage: Boolean
  jsonPayload: String
  recipient: User
  recipientId: Int
  seenDate: Instant
  sender: User
  senderId: Int
  visit: Visit
}

type VisitMessageAttachment implements H_Node {
  attachment: Attachment
  attachmentId: Int
  created: Instant
  id: ID!
  message: VisitMessage
  modified: Instant
  sortOrder: Int
}

type VisitMessageCountableConnection {
  edges: [VisitMessageCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type VisitMessageCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: VisitMessage!
}

input VisitMessageFilterInput {
  visits: [ID]
}

input VisitMessageInput {
  """
  message image attachments
  """
  attachments: [ID]

  """
  message text content
  """
  content: String

  """
  Message json payload
  """
  jsonPayload: String

  """
  visit ID to chat belong to.
  """
  visit: ID
}

type VisitPrescription {
  activities: [VistPrescriptionActivity]
  authStatus: AuthStatus
  diagnoses: [VistPrescriptionDiagnose]
  errors: [IntegrationGraphqlError]
  id: ID
  memberWeight: Int
  reference: String
  type: String
  visitId: ID
}

type VisitPrescriptionConnection {
  edges: [VisitPrescriptionEdge]
  pageInfo: Integration_PageInfo
  totalCount: Int
}

type VisitPrescriptionEdge {
  cursor: String
  node: VisitPrescription
}

enum VisitPrescriptionSortField {
  CREATED_DATE
}

input VisitPrescriptionSortingInput {
  direction: IntegrationOrderDirection!
  field: VisitPrescriptionSortField!
}

enum VisitReferralSortField {
  CREATED_DATE
}

input VisitReferralSortingInput {
  direction: ReferralOrderDirection!
  field: VisitReferralSortField!
}

type VisitRejectionReason implements H_Node {
  created: Instant
  id: ID!
  modified: Instant
  text: String
}

"""
CRUD a new rejection reason.
"""
type VisitRejectionReasonCRUD {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  visitErrors: [H_EntityError!]!
  visitRejectionReason: VisitRejectionReason
}

input VisitRejectionReasonInput {
  """
  Rejection Reason
  """
  text: String!
}

input VisitReviewInput {
  questionsValues: [VisitReviewQuestionInput]!

  """
  ID of Visit to be reviewed
  """
  visit: ID!
}

type VisitReviewQuestion implements H_Node {
  created: Instant
  customerId: Int
  id: ID!
  modified: Instant
  question: ReviewQuestion
  value: H_Float
  visit: Visit
}

type VisitReviewQuestionCountableConnection {
  edges: [VisitReviewQuestionCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type VisitReviewQuestionCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: VisitReviewQuestion!
}

input VisitReviewQuestionFilterInput {
  reviewQuestions: [ID]
}

input VisitReviewQuestionInput {
  question: ID!

  """
  question value
  """
  value: H_FloatNotNegative!
}

enum VisitSortField {
  """
  Sort visit by created.
  """
  CREATED

  """
  Sort visit by date.
  """
  DATE

  """
  Sort visit by number.
  """
  NUMBER
}

input VisitSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: H_OrderDirection!

  """
  Sort visits by the selected field.
  """
  field: VisitSortField!
}

enum VisitStatus {
  ACCEPTED
  ASSIGNED
  CALL_IN_PROGRESS
  CANCELED
  CHAT_IN_PROGRESS
  COMPLETED
  ENDED_BY_ONE_OF_THE_PARTICIPANTS
  INCOMPLETED
  PENDING
}

"""
Visit status update
"""
type VisitStatusUpdate {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  visit: Visit
  visitErrors: [H_EntityError!]!
}

input VisitStatusUpdateInput {
  """
  visit cancellation reason
  """
  cancellationReason: String

  """
  called doctor id.
  """
  doctor: ID

  """
  Visit Call Duration
  """
  duration: Int

  """
  Visit Link
  """
  meetingPlatformLink: String

  """
  quality rating out of 5
  """
  qualityRating: Int
  status: VisitStatus!
}

type VisitSummary implements H_Node {
  created: Instant
  doctorNotes: String
  id: ID!
  isProblemSolved: Boolean
  modified: Instant
  visit: Visit
}

type VisitSummaryCountableConnection {
  edges: [VisitSummaryCountableEdge!]!

  """
  Pagination data for this connection.
  """
  pageInfo: H_PageInfo!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type VisitSummaryCountableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: VisitSummary!
}

"""
CRUD a new Visit Summary.
"""
type VisitSummaryCRUD {
  """
  List of errors that occurred executing the mutation.
  """
  errors: [H_Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  visitSummary: VisitSummary
  visitSummaryErrors: [H_EntityError!]!
}

input VisitSummaryFilterInput {
  ids: [ID]
  visits: [ID]
}

input VisitSummaryInput {
  doctorNotes: String
  isProblemSolved: Boolean
  visitId: String
}

enum VisitType {
  DIRECT_APPOINTMENT
  HEALTH_PROGRAM
}

type VistPrescriptionActivity {
  authStatus: AuthStatus
  code: String
  denialCode: String
  denialDescription: String
  duration: String
  frequencyType: FrequencyType
  frequencyUnitType: String
  frequencyValue: Int
  instructions: String
  observation: String
  quantity: Float
  refills: Int
  type: ActivityType
}

type VistPrescriptionDiagnose {
  code: String
  type: String
}

type Wallet implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  currency: String!
  balanceAmount: Float!
  balance: Money
  transactions(
    before: String
    after: String
    first: Int
    last: Int
  ): WalletTransactionCountableConnection!
  customer: User
}

type WalletCountableConnection {
  pageInfo: PageInfo!
  edges: [WalletCountableEdge!]!
  totalCount: Int
}

type WalletCountableEdge {
  node: Wallet!
  cursor: String!
}

type WalletError {
  field: String
  message: String
  code: WalletErrorCode!
}

enum WalletErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input WalletFilterInput {
  balanceAmount: Float
  balanceAmount_Gt: Float
  balanceAmount_Lt: Float
}

input WalletOrder {
  direction: OrderDirection!
  field: WalletOrderField
}

enum WalletOrderField {
  BALANCE
}

type WalletTransaction implements Node {
  id: ID!
  created: DateTime!
  modified: DateTime!
  wallet: Wallet!
  type: WalletTransactionType!
  description: String!
  amount: Float
}

type WalletTransactionCountableConnection {
  pageInfo: PageInfo!
  edges: [WalletTransactionCountableEdge!]!
  totalCount: Int
}

type WalletTransactionCountableEdge {
  node: WalletTransaction!
  cursor: String!
}

type WalletTransactionCreate {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  vendorErrors: [WalletError!]!
  wallet: Wallet
}

input WalletTransactionInput {
  type: WalletTransactionTypeEnum
  amount: Decimal
  description: String
}

enum WalletTransactionType {
  DEBIT
  CREDIT
}

enum WalletTransactionTypeEnum {
  DEBIT
  CREDIT
}

type Weight {
  unit: String!
  value: Float!
}

scalar WeightScalar

enum WeightUnitsEnum {
  KG
  LB
  OZ
  G
}

type Wishlist implements Node {
  id: ID!
  createdAt: DateTime!
  items: [WishlistItem]
}

type WishlistAddVendorProductVariantMutation {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  wishlist: Wishlist
  wishlistErrors: [WishlistError!]!
}

type WishlistError {
  field: String
  message: String
  code: WishlistErrorCode!
}

enum WishlistErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type WishlistItem implements Node {
  id: ID!
  wishlist: Wishlist!
  vendorProductVariant: VendorProductVariant!
  createdAt: DateTime!
}

type WishlistItemCountableConnection {
  pageInfo: PageInfo!
  edges: [WishlistItemCountableEdge!]!
  totalCount: Int
}

type WishlistItemCountableEdge {
  node: WishlistItem!
  cursor: String!
}

type WishlistRemoveVendorProductVariantMutation {
  errors: [Error!]!
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2020-07-31."
    )
  wishlist: Wishlist
  wishlistErrors: [WishlistError!]!
}

type WorkingHour {
  day: DayOfWeekEnum
  openTimeRanges: [TimeRange]
}

input WorkingHourInput {
  day: DayOfWeekEnum!
  openTimeRanges: [TimeRangeInput]!
}

type WorkingHourOverride {
  date: Date
  openTimeRanges: [TimeRange]
}

input WorkingHourOverrideInput {
  date: Date!
  openTimeRanges: [TimeRangeInput]!
}
